
Snow-weAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048a8  08007140  08007140  00017140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e8  0800b9e8  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9e8  0800b9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f0  0800b9f0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b9f0  0800b9f0  0001b9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ba00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b80  20000200  0800bc00  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  0800bc00  00020d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186cd  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf2  00000000  00000000  000388fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c672  00000000  00000000  0003b5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f28  00000000  00000000  00047c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ef0  00000000  00000000  00048b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00027d01  00000000  00000000  00049a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000dd39  00000000  00000000  00071781  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000eea65  00000000  00000000  0007f4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016df1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003688  00000000  00000000  0016df9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007124 	.word	0x08007124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08007124 	.word	0x08007124

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f88:	b500      	push	{lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	aa06      	add	r2, sp, #24
 8000f8e:	f802 0d01 	strb.w	r0, [r2, #-1]!
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9200      	str	r2, [sp, #0]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2178      	movs	r1, #120	; 0x78
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ssd1306_WriteCommand+0x28>)
 8000fa4:	f001 fdc4 	bl	8002b30 <HAL_I2C_Mem_Write>
}
 8000fa8:	b007      	add	sp, #28
 8000faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fae:	bf00      	nop
 8000fb0:	20000c5c 	.word	0x20000c5c

08000fb4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fb4:	b500      	push	{lr}
 8000fb6:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	b289      	uxth	r1, r1
 8000fc0:	9101      	str	r1, [sp, #4]
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	2178      	movs	r1, #120	; 0x78
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <ssd1306_WriteData+0x24>)
 8000fcc:	f001 fdb0 	bl	8002b30 <HAL_I2C_Mem_Write>
}
 8000fd0:	b005      	add	sp, #20
 8000fd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fd6:	bf00      	nop
 8000fd8:	20000c5c 	.word	0x20000c5c

08000fdc <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e003      	b.n	8000fe8 <ssd1306_Fill+0xc>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000fe0:	21ff      	movs	r1, #255	; 0xff
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <ssd1306_Fill+0x1c>)
 8000fe4:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fec:	d203      	bcs.n	8000ff6 <ssd1306_Fill+0x1a>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d1f6      	bne.n	8000fe0 <ssd1306_Fill+0x4>
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e7f5      	b.n	8000fe2 <ssd1306_Fill+0x6>
    }
}
 8000ff6:	4770      	bx	lr
 8000ff8:	2000021c 	.word	0x2000021c

08000ffc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000ffc:	b510      	push	{r4, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ffe:	2400      	movs	r4, #0
 8001000:	e012      	b.n	8001028 <ssd1306_UpdateScreen+0x2c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001002:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001006:	b2c0      	uxtb	r0, r0
 8001008:	f7ff ffbe 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ffbb 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001012:	2010      	movs	r0, #16
 8001014:	f7ff ffb8 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <ssd1306_UpdateScreen+0x34>)
 800101c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8001020:	f7ff ffc8 	bl	8000fb4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001024:	3401      	adds	r4, #1
 8001026:	b2e4      	uxtb	r4, r4
 8001028:	2c07      	cmp	r4, #7
 800102a:	d9ea      	bls.n	8001002 <ssd1306_UpdateScreen+0x6>
    }
}
 800102c:	bd10      	pop	{r4, pc}
 800102e:	bf00      	nop
 8001030:	2000021c 	.word	0x2000021c

08001034 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001034:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001038:	d116      	bne.n	8001068 <ssd1306_DrawPixel+0x34>
 800103a:	293f      	cmp	r1, #63	; 0x3f
 800103c:	d814      	bhi.n	8001068 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <ssd1306_DrawPixel+0x50>)
 8001040:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8001044:	b113      	cbz	r3, 800104c <ssd1306_DrawPixel+0x18>
        color = (SSD1306_COLOR)!color;
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	0952      	lsrs	r2, r2, #5
    }
    
    // Draw in the right color
    if(color == White) {
 800104c:	2a01      	cmp	r2, #1
 800104e:	d00c      	beq.n	800106a <ssd1306_DrawPixel+0x36>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001050:	08cb      	lsrs	r3, r1, #3
 8001052:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001056:	f001 0107 	and.w	r1, r1, #7
 800105a:	2301      	movs	r3, #1
 800105c:	408b      	lsls	r3, r1
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <ssd1306_DrawPixel+0x50>)
 8001060:	5c11      	ldrb	r1, [r2, r0]
 8001062:	ea21 0103 	bic.w	r1, r1, r3
 8001066:	5411      	strb	r1, [r2, r0]
    }
}
 8001068:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800106a:	08cb      	lsrs	r3, r1, #3
 800106c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001070:	f001 0107 	and.w	r1, r1, #7
 8001074:	2301      	movs	r3, #1
 8001076:	408b      	lsls	r3, r1
 8001078:	4a02      	ldr	r2, [pc, #8]	; (8001084 <ssd1306_DrawPixel+0x50>)
 800107a:	5c11      	ldrb	r1, [r2, r0]
 800107c:	4319      	orrs	r1, r3
 800107e:	5411      	strb	r1, [r2, r0]
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000021c 	.word	0x2000021c

08001088 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108c:	b083      	sub	sp, #12
 800108e:	ac02      	add	r4, sp, #8
 8001090:	e904 0006 	stmdb	r4, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001094:	f1a0 0220 	sub.w	r2, r0, #32
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	2a5e      	cmp	r2, #94	; 0x5e
 800109c:	d84b      	bhi.n	8001136 <ssd1306_WriteChar+0xae>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800109e:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <ssd1306_WriteChar+0xc0>)
 80010a0:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 80010a4:	f89d 6000 	ldrb.w	r6, [sp]
 80010a8:	4432      	add	r2, r6
 80010aa:	2a80      	cmp	r2, #128	; 0x80
 80010ac:	dc47      	bgt.n	800113e <ssd1306_WriteChar+0xb6>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80010ae:	4a26      	ldr	r2, [pc, #152]	; (8001148 <ssd1306_WriteChar+0xc0>)
 80010b0:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	; 0x402
 80010b4:	f89d a001 	ldrb.w	sl, [sp, #1]
 80010b8:	46d3      	mov	fp, sl
 80010ba:	4452      	add	r2, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010bc:	2a40      	cmp	r2, #64	; 0x40
 80010be:	dc40      	bgt.n	8001142 <ssd1306_WriteChar+0xba>
 80010c0:	461f      	mov	r7, r3
 80010c2:	4681      	mov	r9, r0
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80010c4:	2500      	movs	r5, #0
 80010c6:	e023      	b.n	8001110 <ssd1306_WriteChar+0x88>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
        for(j = 0; j < Font.FontWidth; j++) {
            if((b << j) & 0x8000)  {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <ssd1306_WriteChar+0xc0>)
 80010ca:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 80010ce:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80010d2:	4429      	add	r1, r5
 80010d4:	4420      	add	r0, r4
 80010d6:	fab7 f287 	clz	r2, r7
 80010da:	0952      	lsrs	r2, r2, #5
 80010dc:	b2c9      	uxtb	r1, r1
 80010de:	b2c0      	uxtb	r0, r0
 80010e0:	f7ff ffa8 	bl	8001034 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80010e4:	3401      	adds	r4, #1
 80010e6:	42a6      	cmp	r6, r4
 80010e8:	d911      	bls.n	800110e <ssd1306_WriteChar+0x86>
            if((b << j) & 0x8000)  {
 80010ea:	fa08 f304 	lsl.w	r3, r8, r4
 80010ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80010f2:	d0e9      	beq.n	80010c8 <ssd1306_WriteChar+0x40>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <ssd1306_WriteChar+0xc0>)
 80010f6:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 80010fa:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80010fe:	4429      	add	r1, r5
 8001100:	4420      	add	r0, r4
 8001102:	463a      	mov	r2, r7
 8001104:	b2c9      	uxtb	r1, r1
 8001106:	b2c0      	uxtb	r0, r0
 8001108:	f7ff ff94 	bl	8001034 <ssd1306_DrawPixel>
 800110c:	e7ea      	b.n	80010e4 <ssd1306_WriteChar+0x5c>
    for(i = 0; i < Font.FontHeight; i++) {
 800110e:	3501      	adds	r5, #1
 8001110:	45aa      	cmp	sl, r5
 8001112:	d908      	bls.n	8001126 <ssd1306_WriteChar+0x9e>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001114:	f1a9 0320 	sub.w	r3, r9, #32
 8001118:	fb03 530b 	mla	r3, r3, fp, r5
 800111c:	9a01      	ldr	r2, [sp, #4]
 800111e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        for(j = 0; j < Font.FontWidth; j++) {
 8001122:	2400      	movs	r4, #0
 8001124:	e7df      	b.n	80010e6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <ssd1306_WriteChar+0xc0>)
 8001128:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800112c:	4416      	add	r6, r2
 800112e:	f8a3 6400 	strh.w	r6, [r3, #1024]	; 0x400
    
    // Return written char for validation
    return ch;
 8001132:	4648      	mov	r0, r9
 8001134:	e000      	b.n	8001138 <ssd1306_WriteChar+0xb0>
        return 0;
 8001136:	2000      	movs	r0, #0
}
 8001138:	b003      	add	sp, #12
 800113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 800113e:	2000      	movs	r0, #0
 8001140:	e7fa      	b.n	8001138 <ssd1306_WriteChar+0xb0>
 8001142:	2000      	movs	r0, #0
 8001144:	e7f8      	b.n	8001138 <ssd1306_WriteChar+0xb0>
 8001146:	bf00      	nop
 8001148:	2000021c 	.word	0x2000021c

0800114c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	4605      	mov	r5, r0
 8001152:	a802      	add	r0, sp, #8
 8001154:	e900 0006 	stmdb	r0, {r1, r2}
 8001158:	461e      	mov	r6, r3
    // Write until null-byte
    while (*str) {
 800115a:	782c      	ldrb	r4, [r5, #0]
 800115c:	b15c      	cbz	r4, 8001176 <ssd1306_WriteString+0x2a>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800115e:	4633      	mov	r3, r6
 8001160:	aa02      	add	r2, sp, #8
 8001162:	e912 0006 	ldmdb	r2, {r1, r2}
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff ff8e 	bl	8001088 <ssd1306_WriteChar>
 800116c:	782c      	ldrb	r4, [r5, #0]
 800116e:	42a0      	cmp	r0, r4
 8001170:	d101      	bne.n	8001176 <ssd1306_WriteString+0x2a>
            // Char could not be written
            return *str;
        }
        
        // Next char
        str++;
 8001172:	3501      	adds	r5, #1
 8001174:	e7f1      	b.n	800115a <ssd1306_WriteString+0xe>
    }
    
    // Everything ok
    return *str;
}
 8001176:	4620      	mov	r0, r4
 8001178:	b002      	add	sp, #8
 800117a:	bd70      	pop	{r4, r5, r6, pc}

0800117c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <ssd1306_SetCursor+0xc>)
 800117e:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    SSD1306.CurrentY = y;
 8001182:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
}
 8001186:	4770      	bx	lr
 8001188:	2000021c 	.word	0x2000021c

0800118c <ssd1306_DrawCircle>:
  int32_t x = -par_r;
  int32_t y = 0;
  int32_t err = 2 - 2 * par_r;
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800118c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001190:	d153      	bne.n	800123a <ssd1306_DrawCircle+0xae>
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	4257      	negs	r7, r2
 800119a:	f1c2 0201 	rsb	r2, r2, #1
 800119e:	0054      	lsls	r4, r2, #1
  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80011a0:	293f      	cmp	r1, #63	; 0x3f
 80011a2:	d847      	bhi.n	8001234 <ssd1306_DrawCircle+0xa8>
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	468b      	mov	fp, r1
 80011a8:	9001      	str	r0, [sp, #4]
  int32_t y = 0;
 80011aa:	f04f 0a00 	mov.w	sl, #0
 80011ae:	e008      	b.n	80011c2 <ssd1306_DrawCircle+0x36>
 80011b0:	4623      	mov	r3, r4
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80011b2:	42a7      	cmp	r7, r4
 80011b4:	da3c      	bge.n	8001230 <ssd1306_DrawCircle+0xa4>
          x++;
 80011b6:	3701      	adds	r7, #1
          err = err + (x * 2 + 1);
 80011b8:	007c      	lsls	r4, r7, #1
 80011ba:	3401      	adds	r4, #1
 80011bc:	441c      	add	r4, r3
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80011be:	2f00      	cmp	r7, #0
 80011c0:	dc38      	bgt.n	8001234 <ssd1306_DrawCircle+0xa8>
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80011c2:	b2fe      	uxtb	r6, r7
 80011c4:	9b01      	ldr	r3, [sp, #4]
 80011c6:	eba3 0806 	sub.w	r8, r3, r6
 80011ca:	fa5f f888 	uxtb.w	r8, r8
 80011ce:	fa5f f58a 	uxtb.w	r5, sl
 80011d2:	eb05 090b 	add.w	r9, r5, fp
 80011d6:	fa5f f989 	uxtb.w	r9, r9
 80011da:	9a00      	ldr	r2, [sp, #0]
 80011dc:	4649      	mov	r1, r9
 80011de:	4640      	mov	r0, r8
 80011e0:	f7ff ff28 	bl	8001034 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80011e4:	9b01      	ldr	r3, [sp, #4]
 80011e6:	441e      	add	r6, r3
 80011e8:	b2f6      	uxtb	r6, r6
 80011ea:	9a00      	ldr	r2, [sp, #0]
 80011ec:	4649      	mov	r1, r9
 80011ee:	4630      	mov	r0, r6
 80011f0:	f7ff ff20 	bl	8001034 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80011f4:	ebab 0505 	sub.w	r5, fp, r5
 80011f8:	b2ed      	uxtb	r5, r5
 80011fa:	f8dd 9000 	ldr.w	r9, [sp]
 80011fe:	464a      	mov	r2, r9
 8001200:	4629      	mov	r1, r5
 8001202:	4630      	mov	r0, r6
 8001204:	f7ff ff16 	bl	8001034 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001208:	464a      	mov	r2, r9
 800120a:	4629      	mov	r1, r5
 800120c:	4640      	mov	r0, r8
 800120e:	f7ff ff11 	bl	8001034 <ssd1306_DrawPixel>
        if (e2 <= y) {
 8001212:	45a2      	cmp	sl, r4
 8001214:	dbcc      	blt.n	80011b0 <ssd1306_DrawCircle+0x24>
            y++;
 8001216:	f10a 0a01 	add.w	sl, sl, #1
            err = err + (y * 2 + 1);
 800121a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800121e:	3301      	adds	r3, #1
 8001220:	4423      	add	r3, r4
            if(-x == y && e2 <= x) {
 8001222:	eb1a 0f07 	cmn.w	sl, r7
 8001226:	d1c4      	bne.n	80011b2 <ssd1306_DrawCircle+0x26>
 8001228:	42a7      	cmp	r7, r4
 800122a:	dbc2      	blt.n	80011b2 <ssd1306_DrawCircle+0x26>
              e2 = 0;
 800122c:	2400      	movs	r4, #0
 800122e:	e7c0      	b.n	80011b2 <ssd1306_DrawCircle+0x26>
 8001230:	461c      	mov	r4, r3
 8001232:	e7c4      	b.n	80011be <ssd1306_DrawCircle+0x32>

    return;
}
 8001234:	b003      	add	sp, #12
 8001236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123a:	4770      	bx	lr

0800123c <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800123c:	b510      	push	{r4, lr}
 800123e:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001240:	2081      	movs	r0, #129	; 0x81
 8001242:	f7ff fea1 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fe9e 	bl	8000f88 <ssd1306_WriteCommand>
}
 800124c:	bd10      	pop	{r4, pc}
	...

08001250 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001250:	b508      	push	{r3, lr}
    uint8_t value;
    if (on) {
 8001252:	b938      	cbnz	r0, 8001264 <ssd1306_SetDisplayOn+0x14>
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <ssd1306_SetDisplayOn+0x20>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
        value = 0xAE;   // Display off
 800125c:	20ae      	movs	r0, #174	; 0xae
    }
    ssd1306_WriteCommand(value);
 800125e:	f7ff fe93 	bl	8000f88 <ssd1306_WriteCommand>
}
 8001262:	bd08      	pop	{r3, pc}
        SSD1306.DisplayOn = 1;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <ssd1306_SetDisplayOn+0x20>)
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
        value = 0xAF;   // Display on
 800126c:	20af      	movs	r0, #175	; 0xaf
 800126e:	e7f6      	b.n	800125e <ssd1306_SetDisplayOn+0xe>
 8001270:	2000021c 	.word	0x2000021c

08001274 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001274:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f001 f920 	bl	80024bc <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ffe7 	bl	8001250 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001282:	2020      	movs	r0, #32
 8001284:	f7ff fe80 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fe7d 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800128e:	20b0      	movs	r0, #176	; 0xb0
 8001290:	f7ff fe7a 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001294:	20c8      	movs	r0, #200	; 0xc8
 8001296:	f7ff fe77 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fe74 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012a0:	2010      	movs	r0, #16
 80012a2:	f7ff fe71 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012a6:	2040      	movs	r0, #64	; 0x40
 80012a8:	f7ff fe6e 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 80012ac:	20ff      	movs	r0, #255	; 0xff
 80012ae:	f7ff ffc5 	bl	800123c <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012b2:	20a1      	movs	r0, #161	; 0xa1
 80012b4:	f7ff fe68 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012b8:	20a6      	movs	r0, #166	; 0xa6
 80012ba:	f7ff fe65 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012be:	20a8      	movs	r0, #168	; 0xa8
 80012c0:	f7ff fe62 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80012c4:	203f      	movs	r0, #63	; 0x3f
 80012c6:	f7ff fe5f 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012ca:	20a4      	movs	r0, #164	; 0xa4
 80012cc:	f7ff fe5c 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012d0:	20d3      	movs	r0, #211	; 0xd3
 80012d2:	f7ff fe59 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fe56 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012dc:	20d5      	movs	r0, #213	; 0xd5
 80012de:	f7ff fe53 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012e2:	20f0      	movs	r0, #240	; 0xf0
 80012e4:	f7ff fe50 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012e8:	20d9      	movs	r0, #217	; 0xd9
 80012ea:	f7ff fe4d 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012ee:	2022      	movs	r0, #34	; 0x22
 80012f0:	f7ff fe4a 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012f4:	20da      	movs	r0, #218	; 0xda
 80012f6:	f7ff fe47 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80012fa:	2012      	movs	r0, #18
 80012fc:	f7ff fe44 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001300:	20db      	movs	r0, #219	; 0xdb
 8001302:	f7ff fe41 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001306:	2020      	movs	r0, #32
 8001308:	f7ff fe3e 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800130c:	208d      	movs	r0, #141	; 0x8d
 800130e:	f7ff fe3b 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001312:	2014      	movs	r0, #20
 8001314:	f7ff fe38 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff ff99 	bl	8001250 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe5c 	bl	8000fdc <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001324:	f7ff fe6a 	bl	8000ffc <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <ssd1306_Init+0xc8>)
 800132a:	2200      	movs	r2, #0
 800132c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    SSD1306.CurrentY = 0;
 8001330:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    SSD1306.Initialized = 1;
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
}
 800133a:	bd08      	pop	{r3, pc}
 800133c:	2000021c 	.word	0x2000021c

08001340 <readWord>:
			return ((uint16_t)data[1] << 8) | data[0];
	}
	return 100;
}

uint16_t readWord(uint16_t subAddress, I2C_HandleTypeDef *hi2c) {
 8001340:	b510      	push	{r4, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	460c      	mov	r4, r1
	HAL_StatusTypeDef ret;
	uint8_t data[2];
	ret = HAL_I2C_Mem_Read(hi2c, BB_I2C_ADDR, subAddress, I2C_MEMADD_SIZE_8BIT, &data, 2, HAL_MAX_DELAY);
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2302      	movs	r3, #2
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	ab05      	add	r3, sp, #20
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	4602      	mov	r2, r0
 8001358:	21aa      	movs	r1, #170	; 0xaa
 800135a:	4620      	mov	r0, r4
 800135c:	f001 fcba 	bl	8002cd4 <HAL_I2C_Mem_Read>
	if(ret == HAL_OK)
 8001360:	b938      	cbnz	r0, 8001372 <readWord+0x32>
		return ((uint16_t)data[1] << 8) | data[0];
 8001362:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001366:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800136a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	return 101;
}
 800136e:	b006      	add	sp, #24
 8001370:	bd10      	pop	{r4, pc}
	return 101;
 8001372:	2065      	movs	r0, #101	; 0x65
 8001374:	e7fb      	b.n	800136e <readWord+0x2e>
	...

08001378 <readTemp>:
uint16_t readTemp(I2C_HandleTypeDef *hi2c) {
 8001378:	b508      	push	{r3, lr}
	return 10*((readWord(BQ27441_COMMAND_TEMP, hi2c)/10 - 273.15) * 9/5 + 32);
 800137a:	4601      	mov	r1, r0
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff ffdf 	bl	8001340 <readWord>
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <readTemp+0x58>)
 8001384:	fba3 3000 	umull	r3, r0, r3, r0
 8001388:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800138c:	f7ff f8ca 	bl	8000524 <__aeabi_i2d>
 8001390:	a30d      	add	r3, pc, #52	; (adr r3, 80013c8 <readTemp+0x50>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7fe ff77 	bl	8000288 <__aeabi_dsub>
 800139a:	2200      	movs	r2, #0
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <readTemp+0x5c>)
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	2200      	movs	r2, #0
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <readTemp+0x60>)
 80013a6:	f7ff fa51 	bl	800084c <__aeabi_ddiv>
 80013aa:	2200      	movs	r2, #0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <readTemp+0x64>)
 80013ae:	f7fe ff6d 	bl	800028c <__adddf3>
 80013b2:	2200      	movs	r2, #0
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <readTemp+0x68>)
 80013b6:	f7ff f91f 	bl	80005f8 <__aeabi_dmul>
 80013ba:	f7ff fbf5 	bl	8000ba8 <__aeabi_d2uiz>
}
 80013be:	b280      	uxth	r0, r0
 80013c0:	bd08      	pop	{r3, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	66666666 	.word	0x66666666
 80013cc:	40711266 	.word	0x40711266
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	40220000 	.word	0x40220000
 80013d8:	40140000 	.word	0x40140000
 80013dc:	40400000 	.word	0x40400000
 80013e0:	40240000 	.word	0x40240000

080013e4 <BB_soc>:
		return true;
	}
	return false;
}

uint16_t BB_soc(I2C_HandleTypeDef *hi2c, soc_measure type) {
 80013e4:	b508      	push	{r3, lr}
	uint16_t socRet = 0;
	switch (type) {
 80013e6:	b119      	cbz	r1, 80013f0 <BB_soc+0xc>
 80013e8:	2901      	cmp	r1, #1
 80013ea:	d006      	beq.n	80013fa <BB_soc+0x16>
	uint16_t socRet = 0;
 80013ec:	2000      	movs	r0, #0
 80013ee:	e003      	b.n	80013f8 <BB_soc+0x14>
	case 0:
		socRet = readWord(BQ27441_COMMAND_SOC, hi2c);
 80013f0:	4601      	mov	r1, r0
 80013f2:	201c      	movs	r0, #28
 80013f4:	f7ff ffa4 	bl	8001340 <readWord>
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL, hi2c);
		break;
	}

	return socRet;
}
 80013f8:	bd08      	pop	{r3, pc}
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL, hi2c);
 80013fa:	4601      	mov	r1, r0
 80013fc:	2030      	movs	r0, #48	; 0x30
 80013fe:	f7ff ff9f 	bl	8001340 <readWord>
		break;
 8001402:	e7f9      	b.n	80013f8 <BB_soc+0x14>
 8001404:	0000      	movs	r0, r0
	...

08001408 <convertDegMinToDecDeg>:

int store[100] = {0};
int count = 0;

//##################################################################################################################
double convertDegMinToDecDeg (float degMin) {
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	ed2d 8b02 	vpush	{d8}
 800140e:	eeb0 8a40 	vmov.f32	s16, s0
  double min = 0.0;
  double decDeg = 0.0;

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001412:	ee10 0a10 	vmov	r0, s0
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001468 <convertDegMinToDecDeg+0x60>
 800141e:	ec41 0b10 	vmov	d0, r0, r1
 8001422:	f005 fd07 	bl	8006e34 <fmod>
 8001426:	ec57 6b10 	vmov	r6, r7, d0

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 800142a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001470 <convertDegMinToDecDeg+0x68>
 800142e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  decDeg = degMin + ( min / 60 );
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	ee17 0a90 	vmov	r0, s15
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	2200      	movs	r2, #0
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <convertDegMinToDecDeg+0x6c>)
 800144a:	4630      	mov	r0, r6
 800144c:	4639      	mov	r1, r7
 800144e:	f7ff f9fd 	bl	800084c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe ff17 	bl	800028c <__adddf3>

  return decDeg;
}
 800145e:	ec41 0b10 	vmov	d0, r0, r1
 8001462:	ecbd 8b02 	vpop	{d8}
 8001466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001468:	00000000 	.word	0x00000000
 800146c:	40590000 	.word	0x40590000
 8001470:	42c80000 	.word	0x42c80000
 8001474:	404e0000 	.word	0x404e0000

08001478 <GPS_Parse>:

void GPS_Parse(void) {
 8001478:	b538      	push	{r3, r4, r5, lr}

	char* str = (char*) GPS.rxBuffer;

	int i=7;
	if(str[3] == 86 && str[4] == 84) {
 800147a:	4bc2      	ldr	r3, [pc, #776]	; (8001784 <GPS_Parse+0x30c>)
 800147c:	78db      	ldrb	r3, [r3, #3]
 800147e:	2b56      	cmp	r3, #86	; 0x56
 8001480:	d001      	beq.n	8001486 <GPS_Parse+0xe>
 8001482:	2307      	movs	r3, #7
 8001484:	e04d      	b.n	8001522 <GPS_Parse+0xaa>
 8001486:	4bbf      	ldr	r3, [pc, #764]	; (8001784 <GPS_Parse+0x30c>)
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	2b54      	cmp	r3, #84	; 0x54
 800148c:	d00b      	beq.n	80014a6 <GPS_Parse+0x2e>
 800148e:	2307      	movs	r3, #7
 8001490:	e047      	b.n	8001522 <GPS_Parse+0xaa>
void GPS_Parse(void) {
 8001492:	460b      	mov	r3, r1
		int comma = 0;
		while(comma < 6) {
 8001494:	2a05      	cmp	r2, #5
 8001496:	dc09      	bgt.n	80014ac <GPS_Parse+0x34>
			if(str[i++] == ',') {
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	48ba      	ldr	r0, [pc, #744]	; (8001784 <GPS_Parse+0x30c>)
 800149c:	5c1b      	ldrb	r3, [r3, r0]
 800149e:	2b2c      	cmp	r3, #44	; 0x2c
 80014a0:	d1f7      	bne.n	8001492 <GPS_Parse+0x1a>
				comma++;
 80014a2:	3201      	adds	r2, #1
 80014a4:	e7f5      	b.n	8001492 <GPS_Parse+0x1a>
		int comma = 0;
 80014a6:	2200      	movs	r2, #0
	int i=7;
 80014a8:	2307      	movs	r3, #7
 80014aa:	e7f3      	b.n	8001494 <GPS_Parse+0x1c>
			}
		}
		GPS.Velocity = 0;
 80014ac:	4ab5      	ldr	r2, [pc, #724]	; (8001784 <GPS_Parse+0x30c>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	f8c2 1224 	str.w	r1, [r2, #548]	; 0x224
		while(str[i] != '.') {
 80014b4:	e013      	b.n	80014de <GPS_Parse+0x66>
			GPS.Velocity = GPS.Velocity*10 + str[i++]-48;
 80014b6:	49b3      	ldr	r1, [pc, #716]	; (8001784 <GPS_Parse+0x30c>)
 80014b8:	edd1 7a89 	vldr	s15, [r1, #548]	; 0x224
 80014bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c4:	3301      	adds	r3, #1
 80014c6:	ee07 2a90 	vmov	s15, r2
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d2:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001788 <GPS_Parse+0x310>
 80014d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014da:	edc1 7a89 	vstr	s15, [r1, #548]	; 0x224
		while(str[i] != '.') {
 80014de:	4aa9      	ldr	r2, [pc, #676]	; (8001784 <GPS_Parse+0x30c>)
 80014e0:	5c9a      	ldrb	r2, [r3, r2]
 80014e2:	2a2e      	cmp	r2, #46	; 0x2e
 80014e4:	d1e7      	bne.n	80014b6 <GPS_Parse+0x3e>
		}
		int velDecimal = 0;
		int divFactor = 1;
 80014e6:	2101      	movs	r1, #1
		int velDecimal = 0;
 80014e8:	2200      	movs	r2, #0
 80014ea:	e008      	b.n	80014fe <GPS_Parse+0x86>
		while(str[i] != ',') {
			//GPS.Velocity += (str[i++]-48) / divFactor;
			velDecimal = velDecimal*10 + str[i++]-48;
 80014ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80014f0:	0050      	lsls	r0, r2, #1
 80014f2:	3301      	adds	r3, #1
 80014f4:	1902      	adds	r2, r0, r4
 80014f6:	3a30      	subs	r2, #48	; 0x30
			divFactor *= 10;
 80014f8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80014fc:	0041      	lsls	r1, r0, #1
		while(str[i] != ',') {
 80014fe:	48a1      	ldr	r0, [pc, #644]	; (8001784 <GPS_Parse+0x30c>)
 8001500:	5c1c      	ldrb	r4, [r3, r0]
 8001502:	2c2c      	cmp	r4, #44	; 0x2c
 8001504:	d1f2      	bne.n	80014ec <GPS_Parse+0x74>
		}
		GPS.Velocity = GPS.Velocity + velDecimal / divFactor;
 8001506:	ed90 7a89 	vldr	s14, [r0, #548]	; 0x224
 800150a:	fb92 f2f1 	sdiv	r2, r2, r1
 800150e:	ee07 2a90 	vmov	s15, r2
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800151a:	edc0 7a89 	vstr	s15, [r0, #548]	; 0x224
		return;
 800151e:	e130      	b.n	8001782 <GPS_Parse+0x30a>
	}

	while(str[i-1] != ',') {
		i++;
 8001520:	3301      	adds	r3, #1
	while(str[i-1] != ',') {
 8001522:	4a9a      	ldr	r2, [pc, #616]	; (800178c <GPS_Parse+0x314>)
 8001524:	5c9a      	ldrb	r2, [r3, r2]
 8001526:	2a2c      	cmp	r2, #44	; 0x2c
 8001528:	d1fa      	bne.n	8001520 <GPS_Parse+0xa8>
	}
	GPS.Latitude = 0;
 800152a:	4a96      	ldr	r2, [pc, #600]	; (8001784 <GPS_Parse+0x30c>)
 800152c:	2000      	movs	r0, #0
 800152e:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
	GPS.LatDec = 0;
 8001532:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
	GPS.Longitude = 0;
 8001536:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
	GPS.LonDec = 0;
 800153a:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
	GPS.MSL_Altitude = 0;
 800153e:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220

	GPS.UTC_Hour = 10*(str[i++]-48) + str[i++]-53;
 8001542:	1c5c      	adds	r4, r3, #1
 8001544:	5c98      	ldrb	r0, [r3, r2]
 8001546:	1c9d      	adds	r5, r3, #2
 8001548:	5ca1      	ldrb	r1, [r4, r2]
 800154a:	3830      	subs	r0, #48	; 0x30
 800154c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001550:	0044      	lsls	r4, r0, #1
 8001552:	4421      	add	r1, r4
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	3935      	subs	r1, #53	; 0x35
 8001558:	f882 1203 	strb.w	r1, [r2, #515]	; 0x203
	GPS.UTC_Min = 10*(str[i++]-48) + str[i++]-48;
 800155c:	1cd9      	adds	r1, r3, #3
 800155e:	5ca8      	ldrb	r0, [r5, r2]
 8001560:	1d1d      	adds	r5, r3, #4
 8001562:	5c89      	ldrb	r1, [r1, r2]
 8001564:	3830      	subs	r0, #48	; 0x30
 8001566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800156a:	0044      	lsls	r4, r0, #1
 800156c:	4421      	add	r1, r4
 800156e:	b2c9      	uxtb	r1, r1
 8001570:	3930      	subs	r1, #48	; 0x30
 8001572:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
	GPS.UTC_Sec = 10*(str[i++]-48) + str[i++]-48;
 8001576:	1d59      	adds	r1, r3, #5
 8001578:	5ca8      	ldrb	r0, [r5, r2]
 800157a:	5c89      	ldrb	r1, [r1, r2]
 800157c:	3830      	subs	r0, #48	; 0x30
 800157e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001582:	0044      	lsls	r4, r0, #1
 8001584:	4421      	add	r1, r4
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	3930      	subs	r1, #48	; 0x30
 800158a:	b2c9      	uxtb	r1, r1
 800158c:	f882 1205 	strb.w	r1, [r2, #517]	; 0x205
	store[count++] = GPS.UTC_Sec;
 8001590:	487f      	ldr	r0, [pc, #508]	; (8001790 <GPS_Parse+0x318>)
 8001592:	6804      	ldr	r4, [r0, #0]
 8001594:	1c65      	adds	r5, r4, #1
 8001596:	6005      	str	r5, [r0, #0]
 8001598:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800159c:	6041      	str	r1, [r0, #4]
	i++;
 800159e:	1dd8      	adds	r0, r3, #7
	GPS.UTC_MicroSec = 100*(str[i++]-48) + 10*(str[i++]-48) + str[i++]-48;
 80015a0:	f103 0108 	add.w	r1, r3, #8
 80015a4:	5c80      	ldrb	r0, [r0, r2]
 80015a6:	f103 0509 	add.w	r5, r3, #9
 80015aa:	5c8c      	ldrb	r4, [r1, r2]
 80015ac:	3830      	subs	r0, #48	; 0x30
 80015ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015b6:	0081      	lsls	r1, r0, #2
 80015b8:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 80015bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015c0:	0044      	lsls	r4, r0, #1
 80015c2:	4421      	add	r1, r4
 80015c4:	b2c9      	uxtb	r1, r1
 80015c6:	5ca8      	ldrb	r0, [r5, r2]
 80015c8:	4401      	add	r1, r0
 80015ca:	b2c9      	uxtb	r1, r1
 80015cc:	3930      	subs	r1, #48	; 0x30
 80015ce:	f882 1206 	strb.w	r1, [r2, #518]	; 0x206
	i++;
 80015d2:	f103 040b 	add.w	r4, r3, #11
	while(str[i] != '.') {
 80015d6:	e013      	b.n	8001600 <GPS_Parse+0x188>
		GPS.Latitude = GPS.Latitude*10 + str[i++]-48;
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <GPS_Parse+0x30c>)
 80015da:	edd2 7a82 	vldr	s15, [r2, #520]	; 0x208
 80015de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e6:	3401      	adds	r4, #1
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001788 <GPS_Parse+0x310>
 80015f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015fc:	edc2 7a82 	vstr	s15, [r2, #520]	; 0x208
	while(str[i] != '.') {
 8001600:	4b60      	ldr	r3, [pc, #384]	; (8001784 <GPS_Parse+0x30c>)
 8001602:	5ce3      	ldrb	r3, [r4, r3]
 8001604:	2b2e      	cmp	r3, #46	; 0x2e
 8001606:	d1e7      	bne.n	80015d8 <GPS_Parse+0x160>
	}
	i++;
 8001608:	3401      	adds	r4, #1
	int divFactor = 1;
 800160a:	2201      	movs	r2, #1
	while(str[i] != ',') {
 800160c:	e016      	b.n	800163c <GPS_Parse+0x1c4>
		GPS.LatDec = GPS.LatDec*10 + str[i++]-48;
 800160e:	495d      	ldr	r1, [pc, #372]	; (8001784 <GPS_Parse+0x30c>)
 8001610:	edd1 7a83 	vldr	s15, [r1, #524]	; 0x20c
 8001614:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800161c:	3401      	adds	r4, #1
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800162a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001788 <GPS_Parse+0x310>
 800162e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001632:	edc1 7a83 	vstr	s15, [r1, #524]	; 0x20c
		divFactor *= 10;
 8001636:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800163a:	005a      	lsls	r2, r3, #1
	while(str[i] != ',') {
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <GPS_Parse+0x30c>)
 800163e:	5ce3      	ldrb	r3, [r4, r3]
 8001640:	2b2c      	cmp	r3, #44	; 0x2c
 8001642:	d1e4      	bne.n	800160e <GPS_Parse+0x196>
	}
	GPS.Latitude = GPS.Latitude + GPS.LatDec / divFactor;
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <GPS_Parse+0x30c>)
 8001646:	ed93 0a82 	vldr	s0, [r3, #520]	; 0x208
 800164a:	edd3 6a83 	vldr	s13, [r3, #524]	; 0x20c
 800164e:	ee07 2a90 	vmov	s15, r2
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800165a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800165e:	ed83 0a82 	vstr	s0, [r3, #520]	; 0x208
	i++;
 8001662:	1c62      	adds	r2, r4, #1
	GPS.NS_Indicator = str[i++];
 8001664:	5cd2      	ldrb	r2, [r2, r3]
 8001666:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	i++;
 800166a:	3403      	adds	r4, #3
	while(str[i] != '.') {
 800166c:	e013      	b.n	8001696 <GPS_Parse+0x21e>
		GPS.Longitude = GPS.Longitude*10 + str[i++]-48;
 800166e:	4a45      	ldr	r2, [pc, #276]	; (8001784 <GPS_Parse+0x30c>)
 8001670:	edd2 7a85 	vldr	s15, [r2, #532]	; 0x214
 8001674:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001678:	ee27 7a87 	vmul.f32	s14, s15, s14
 800167c:	3401      	adds	r4, #1
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800168a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001788 <GPS_Parse+0x310>
 800168e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001692:	edc2 7a85 	vstr	s15, [r2, #532]	; 0x214
	while(str[i] != '.') {
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <GPS_Parse+0x30c>)
 8001698:	5ce3      	ldrb	r3, [r4, r3]
 800169a:	2b2e      	cmp	r3, #46	; 0x2e
 800169c:	d1e7      	bne.n	800166e <GPS_Parse+0x1f6>
	}
	i++;
 800169e:	3401      	adds	r4, #1
	divFactor = 1;
	while(str[i] != ',') {
 80016a0:	e013      	b.n	80016ca <GPS_Parse+0x252>
		GPS.LonDec = GPS.LonDec*10 + str[i++]-48;
 80016a2:	4a38      	ldr	r2, [pc, #224]	; (8001784 <GPS_Parse+0x30c>)
 80016a4:	edd2 7a86 	vldr	s15, [r2, #536]	; 0x218
 80016a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016b0:	3401      	adds	r4, #1
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016be:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001788 <GPS_Parse+0x310>
 80016c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c6:	edc2 7a86 	vstr	s15, [r2, #536]	; 0x218
	while(str[i] != ',') {
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <GPS_Parse+0x30c>)
 80016cc:	5ce3      	ldrb	r3, [r4, r3]
 80016ce:	2b2c      	cmp	r3, #44	; 0x2c
 80016d0:	d1e7      	bne.n	80016a2 <GPS_Parse+0x22a>
		divFactor *= 10;
	}
	i++;
 80016d2:	1c63      	adds	r3, r4, #1
	GPS.EW_Indicator = str[i++];
 80016d4:	3402      	adds	r4, #2
 80016d6:	4d2b      	ldr	r5, [pc, #172]	; (8001784 <GPS_Parse+0x30c>)
 80016d8:	5d5b      	ldrb	r3, [r3, r5]
 80016da:	f885 321c 	strb.w	r3, [r5, #540]	; 0x21c
	GPS.LatDec = convertDegMinToDecDeg(GPS.Latitude);
 80016de:	f7ff fe93 	bl	8001408 <convertDegMinToDecDeg>
 80016e2:	ec51 0b10 	vmov	r0, r1, d0
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
	GPS.LonDec = convertDegMinToDecDeg(GPS.Longitude);
 80016ee:	ed95 0a85 	vldr	s0, [r5, #532]	; 0x214
 80016f2:	f7ff fe89 	bl	8001408 <convertDegMinToDecDeg>
 80016f6:	ec51 0b10 	vmov	r0, r1, d0
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218

	int comma = 0;
 8001702:	2300      	movs	r3, #0
	while(comma < 4) {
 8001704:	e000      	b.n	8001708 <GPS_Parse+0x290>
	int divFactor = 1;
 8001706:	4614      	mov	r4, r2
	while(comma < 4) {
 8001708:	2b03      	cmp	r3, #3
 800170a:	dc1a      	bgt.n	8001742 <GPS_Parse+0x2ca>
		if(str[i++] == ',') {
 800170c:	1c62      	adds	r2, r4, #1
 800170e:	491d      	ldr	r1, [pc, #116]	; (8001784 <GPS_Parse+0x30c>)
 8001710:	5c61      	ldrb	r1, [r4, r1]
 8001712:	292c      	cmp	r1, #44	; 0x2c
 8001714:	d1f7      	bne.n	8001706 <GPS_Parse+0x28e>
			comma++;
 8001716:	3301      	adds	r3, #1
 8001718:	e7f5      	b.n	8001706 <GPS_Parse+0x28e>
		}
	}
	while(str[i] != '.') {
		GPS.MSL_Altitude = GPS.MSL_Altitude*10 + str[i++]-48;
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <GPS_Parse+0x30c>)
 800171c:	edd2 7a88 	vldr	s15, [r2, #544]	; 0x220
 8001720:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001728:	3401      	adds	r4, #1
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001736:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001788 <GPS_Parse+0x310>
 800173a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800173e:	edc2 7a88 	vstr	s15, [r2, #544]	; 0x220
	while(str[i] != '.') {
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <GPS_Parse+0x30c>)
 8001744:	5ce3      	ldrb	r3, [r4, r3]
 8001746:	2b2e      	cmp	r3, #46	; 0x2e
 8001748:	d1e7      	bne.n	800171a <GPS_Parse+0x2a2>
	}
	int altDecimal = 0;
 800174a:	2300      	movs	r3, #0
	divFactor = 1;
 800174c:	2201      	movs	r2, #1
 800174e:	e008      	b.n	8001762 <GPS_Parse+0x2ea>
	while(str[i] != ',') {
		altDecimal = altDecimal*10 + str[i++]-48;
 8001750:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001754:	0059      	lsls	r1, r3, #1
 8001756:	3401      	adds	r4, #1
 8001758:	180b      	adds	r3, r1, r0
 800175a:	3b30      	subs	r3, #48	; 0x30
		divFactor *= 10;
 800175c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001760:	004a      	lsls	r2, r1, #1
	while(str[i] != ',') {
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <GPS_Parse+0x30c>)
 8001764:	5c60      	ldrb	r0, [r4, r1]
 8001766:	282c      	cmp	r0, #44	; 0x2c
 8001768:	d1f2      	bne.n	8001750 <GPS_Parse+0x2d8>
	}
	GPS.MSL_Altitude = GPS.MSL_Altitude + altDecimal / divFactor;
 800176a:	ed91 7a88 	vldr	s14, [r1, #544]	; 0x220
 800176e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800177e:	edc1 7a88 	vstr	s15, [r1, #544]	; 0x220
}
 8001782:	bd38      	pop	{r3, r4, r5, pc}
 8001784:	200009dc 	.word	0x200009dc
 8001788:	42400000 	.word	0x42400000
 800178c:	200009db 	.word	0x200009db
 8001790:	20000624 	.word	0x20000624

08001794 <readReg>:
	//set up for RX by default
	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 1 << 6);
}

uint8_t readReg(uint8_t addr){
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <readReg+0x48>)
 80017a0:	f000 fff5 	bl	800278e <HAL_GPIO_WritePin>
	while ((SPI1->SR & SPI_SR_BSY)); // Wait while receive buffer is empty
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <readReg+0x4c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017ac:	d1fa      	bne.n	80017a4 <readReg+0x10>
	SPI1->DR = addr; // Send byte to SPI (TXE cleared)
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <readReg+0x4c>)
 80017b0:	60dc      	str	r4, [r3, #12]
	while (!(SPI1->SR & SPI_SR_TXE)); // Wait while receive buffer is empty
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <readReg+0x4c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f013 0f02 	tst.w	r3, #2
 80017ba:	d0fa      	beq.n	80017b2 <readReg+0x1e>
	while (!(SPI1->SR & SPI_SR_RXNE)); // Wait while receive buffer is empty
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <readReg+0x4c>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f013 0f01 	tst.w	r3, #1
 80017c4:	d0fa      	beq.n	80017bc <readReg+0x28>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <readReg+0x48>)
 80017ce:	f000 ffde 	bl	800278e <HAL_GPIO_WritePin>

	return SPI1->DR & 0xFF; // Return received byte
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <readReg+0x4c>)
 80017d4:	68d8      	ldr	r0, [r3, #12]
}
 80017d6:	b2c0      	uxtb	r0, r0
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	bf00      	nop
 80017dc:	48001000 	.word	0x48001000
 80017e0:	40013000 	.word	0x40013000

080017e4 <writeReg>:
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);

	return (SPI1->DR & 0xFF); // Return received byte
}

void writeReg(uint8_t addr, uint8_t value){
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	460d      	mov	r5, r1
	uint8_t reg = addr | 0x80;
 80017e8:	f040 0480 	orr.w	r4, r0, #128	; 0x80
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <writeReg+0x40>)
 80017f4:	f000 ffcb 	bl	800278e <HAL_GPIO_WritePin>
	while ((SPI1->SR & SPI_SR_BSY)); // Wait while receive buffer is empty
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <writeReg+0x44>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001800:	d1fa      	bne.n	80017f8 <writeReg+0x14>
	SPI1->DR = reg | value << 8; // Send byte to SPI (TXE cleared)
 8001802:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <writeReg+0x44>)
 8001808:	60dc      	str	r4, [r3, #12]
	while ((SPI1->SR & SPI_SR_BSY)); // Wait while receive buffer is empty
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <writeReg+0x44>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001812:	d1fa      	bne.n	800180a <writeReg+0x26>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	4802      	ldr	r0, [pc, #8]	; (8001824 <writeReg+0x40>)
 800181c:	f000 ffb7 	bl	800278e <HAL_GPIO_WritePin>

}
 8001820:	bd38      	pop	{r3, r4, r5, pc}
 8001822:	bf00      	nop
 8001824:	48001000 	.word	0x48001000
 8001828:	40013000 	.word	0x40013000

0800182c <LoRa_Init>:
void LoRa_Init(void){
 800182c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800182e:	4c2e      	ldr	r4, [pc, #184]	; (80018e8 <LoRa_Init+0xbc>)
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001836:	4620      	mov	r0, r4
 8001838:	f000 ffa9 	bl	800278e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800183c:	200a      	movs	r0, #10
 800183e:	f000 fe3d 	bl	80024bc <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001848:	4620      	mov	r0, r4
 800184a:	f000 ffa0 	bl	800278e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800184e:	200a      	movs	r0, #10
 8001850:	f000 fe34 	bl	80024bc <HAL_Delay>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x80); //long range mode
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff ffc4 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x01);
 800185c:	2101      	movs	r1, #1
 800185e:	200d      	movs	r0, #13
 8001860:	f7ff ffc0 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0x00); //tx base addr to 0
 8001864:	2100      	movs	r1, #0
 8001866:	200e      	movs	r0, #14
 8001868:	f7ff ffbc 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0x00); //rx base addr to 0
 800186c:	2100      	movs	r1, #0
 800186e:	200f      	movs	r0, #15
 8001870:	f7ff ffb8 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_1D_MODEM_CONFIG1, 0x72); //coding rate and modem config
 8001874:	2172      	movs	r1, #114	; 0x72
 8001876:	201d      	movs	r0, #29
 8001878:	f7ff ffb4 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_1E_MODEM_CONFIG2, 0x70); //rxpayloadcrc and spreading factor CHANGED 74
 800187c:	2170      	movs	r1, #112	; 0x70
 800187e:	201e      	movs	r0, #30
 8001880:	f7ff ffb0 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_26_MODEM_CONFIG3, 0x04); //LNA gain
 8001884:	2104      	movs	r1, #4
 8001886:	2026      	movs	r0, #38	; 0x26
 8001888:	f7ff ffac 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_20_PREAMBLE_MSB, 0x00); //preamble MSB
 800188c:	2100      	movs	r1, #0
 800188e:	2020      	movs	r0, #32
 8001890:	f7ff ffa8 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_21_PREAMBLE_LSB, 0x08); //premamble LSB
 8001894:	2108      	movs	r1, #8
 8001896:	2021      	movs	r0, #33	; 0x21
 8001898:	f7ff ffa4 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x84); //padac CHanged 04
 800189c:	2184      	movs	r1, #132	; 0x84
 800189e:	204d      	movs	r0, #77	; 0x4d
 80018a0:	f7ff ffa0 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x8f); //output power and PA_BOOST // CHANGED 88
 80018a4:	218f      	movs	r1, #143	; 0x8f
 80018a6:	2009      	movs	r0, #9
 80018a8:	f7ff ff9c 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_06_FRF_MSB, 0xE4); //freq msb CHANGE BACK TOE4
 80018ac:	21e4      	movs	r1, #228	; 0xe4
 80018ae:	2006      	movs	r0, #6
 80018b0:	f7ff ff98 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_07_FRF_MID, 0xC0); //freq mid
 80018b4:	21c0      	movs	r1, #192	; 0xc0
 80018b6:	2007      	movs	r0, #7
 80018b8:	f7ff ff94 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_08_FRF_LSB, 0x00); //freq lsb
 80018bc:	2100      	movs	r1, #0
 80018be:	2008      	movs	r0, #8
 80018c0:	f7ff ff90 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x07); //padac
 80018c4:	2107      	movs	r1, #7
 80018c6:	204d      	movs	r0, #77	; 0x4d
 80018c8:	f7ff ff8c 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x8F); //output power and PA_BOOST
 80018cc:	218f      	movs	r1, #143	; 0x8f
 80018ce:	2009      	movs	r0, #9
 80018d0:	f7ff ff88 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 80018d4:	2105      	movs	r1, #5
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff ff84 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 1 << 6);
 80018dc:	2140      	movs	r1, #64	; 0x40
 80018de:	4608      	mov	r0, r1
 80018e0:	f7ff ff80 	bl	80017e4 <writeReg>
}
 80018e4:	bd10      	pop	{r4, pc}
 80018e6:	bf00      	nop
 80018e8:	48001000 	.word	0x48001000

080018ec <loraStandbyMode>:
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame

	return;
}

void loraStandbyMode(void){
 80018ec:	b508      	push	{r3, lr}
	uint8_t mode = readReg(RH_RF95_REG_01_OP_MODE) & 0x3;
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff ff50 	bl	8001794 <readReg>
 80018f4:	f000 0003 	and.w	r0, r0, #3
	if((mode != RH_RF95_MODE_STDBY)){
 80018f8:	2801      	cmp	r0, #1
 80018fa:	d003      	beq.n	8001904 <loraStandbyMode+0x18>
		writeReg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 80018fc:	2101      	movs	r1, #1
 80018fe:	4608      	mov	r0, r1
 8001900:	f7ff ff70 	bl	80017e4 <writeReg>
	}
}
 8001904:	bd08      	pop	{r3, pc}

08001906 <loraTransmitCopy>:
void loraTransmitCopy(uint8_t *buffer, uint8_t len){
 8001906:	b570      	push	{r4, r5, r6, lr}
 8001908:	4606      	mov	r6, r0
 800190a:	460d      	mov	r5, r1
	loraStandbyMode();
 800190c:	f7ff ffee 	bl	80018ec <loraStandbyMode>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00); //fifo addr pointer
 8001910:	2100      	movs	r1, #0
 8001912:	200d      	movs	r0, #13
 8001914:	f7ff ff66 	bl	80017e4 <writeReg>
	for(int i = 0; i < len; i++){
 8001918:	2400      	movs	r4, #0
 800191a:	e004      	b.n	8001926 <loraTransmitCopy+0x20>
		writeReg(REG_FIFO, buffer[i]);
 800191c:	5d31      	ldrb	r1, [r6, r4]
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff60 	bl	80017e4 <writeReg>
	for(int i = 0; i < len; i++){
 8001924:	3401      	adds	r4, #1
 8001926:	42a5      	cmp	r5, r4
 8001928:	dcf8      	bgt.n	800191c <loraTransmitCopy+0x16>
	writeReg(RH_RF95_REG_22_PAYLOAD_LENGTH, len);
 800192a:	4629      	mov	r1, r5
 800192c:	2022      	movs	r0, #34	; 0x22
 800192e:	f7ff ff59 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x03);
 8001932:	2103      	movs	r1, #3
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff ff55 	bl	80017e4 <writeReg>
	HAL_Delay(50);
 800193a:	2032      	movs	r0, #50	; 0x32
 800193c:	f000 fdbe 	bl	80024bc <HAL_Delay>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 8001940:	2101      	movs	r1, #1
 8001942:	4608      	mov	r0, r1
 8001944:	f7ff ff4e 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF); //clear txdone
 8001948:	21ff      	movs	r1, #255	; 0xff
 800194a:	2012      	movs	r0, #18
 800194c:	f7ff ff4a 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 8001950:	2105      	movs	r1, #5
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff ff46 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 8001958:	2100      	movs	r1, #0
 800195a:	2040      	movs	r0, #64	; 0x40
 800195c:	f7ff ff42 	bl	80017e4 <writeReg>
}
 8001960:	bd70      	pop	{r4, r5, r6, pc}

08001962 <loraReceiveModeInit>:

	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00);
	//loraReceiveModeInit();
}

void loraReceiveModeInit(void){
 8001962:	b508      	push	{r3, lr}
	loraStandbyMode(); // make sure mode is standby or sleep
 8001964:	f7ff ffc2 	bl	80018ec <loraStandbyMode>
	writeReg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS | RH_RF95_LONG_RANGE_MODE);
 8001968:	2185      	movs	r1, #133	; 0x85
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff ff3a 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 8001970:	2100      	movs	r1, #0
 8001972:	2040      	movs	r0, #64	; 0x40
 8001974:	f7ff ff36 	bl	80017e4 <writeReg>
}
 8001978:	bd08      	pop	{r3, pc}
	...

0800197c <loraReadFIFO>:

void loraReadFIFO(uint8_t *buf, uint16_t len){
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	4606      	mov	r6, r0
 8001980:	460d      	mov	r5, r1

  // Start SPI transaction, send address
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
	readReg(reg);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff ff06 	bl	8001794 <readReg>
	while ((SPI1->SR & SPI_SR_BSY));
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <loraReadFIFO+0x2c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001990:	d1fa      	bne.n	8001988 <loraReadFIFO+0xc>
	for(int i = 0; i < len; i++){
 8001992:	2400      	movs	r4, #0
 8001994:	e004      	b.n	80019a0 <loraReadFIFO+0x24>
		buf[i] = readReg(REG_FIFO);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fefc 	bl	8001794 <readReg>
 800199c:	5530      	strb	r0, [r6, r4]
	for(int i = 0; i < len; i++){
 800199e:	3401      	adds	r4, #1
 80019a0:	42a5      	cmp	r5, r4
 80019a2:	dcf8      	bgt.n	8001996 <loraReadFIFO+0x1a>
		//buf[i] = readReg(REG_FIFO);
	//}
  // End SPI transaction
	//HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
	return;
}
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
 80019a6:	bf00      	nop
 80019a8:	40013000 	.word	0x40013000

080019ac <loraReceiveGPSData>:
void loraReceiveGPSData(uint8_t *buf){
 80019ac:	b510      	push	{r4, lr}
 80019ae:	4604      	mov	r4, r0
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, RH_RF95_RX_DONE_MASK);
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	2012      	movs	r0, #18
 80019b4:	f7ff ff16 	bl	80017e4 <writeReg>
	int currAddr = readReg(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR);
 80019b8:	2010      	movs	r0, #16
 80019ba:	f7ff feeb 	bl	8001794 <readReg>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, currAddr);
 80019be:	4601      	mov	r1, r0
 80019c0:	200d      	movs	r0, #13
 80019c2:	f7ff ff0f 	bl	80017e4 <writeReg>
	uint8_t len = readReg(RH_RF95_REG_13_RX_NB_BYTES);
 80019c6:	2013      	movs	r0, #19
 80019c8:	f7ff fee4 	bl	8001794 <readReg>
	loraReadFIFO(buf, (uint16_t) len);
 80019cc:	b281      	uxth	r1, r0
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff ffd4 	bl	800197c <loraReadFIFO>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01);
 80019d4:	2101      	movs	r1, #1
 80019d6:	4608      	mov	r0, r1
 80019d8:	f7ff ff04 	bl	80017e4 <writeReg>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00);
 80019dc:	2100      	movs	r1, #0
 80019de:	200d      	movs	r0, #13
 80019e0:	f7ff ff00 	bl	80017e4 <writeReg>
}
 80019e4:	bd10      	pop	{r4, pc}
	...

080019e8 <SPI1_Init>:
}

void SPI1_Init(void){

	// Reset SPI peripheral
	RCC->APB2RSTR |=  RCC_APB2RSTR_SPI1RST;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <SPI1_Init+0x40>)
 80019ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST;
 80019f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
	/* Enable SPI1 peripheral Clock */
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80019fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a00:	661a      	str	r2, [r3, #96]	; 0x60

	/* Set control registers. Full duplex master mode, 64 clk divider, 8 data bits */
	/* MSB first */
	SPI1->CR1 = SPI_CR1_BIDIOE | SPI_CR1_BR_0 | SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_SSM;
 8001a02:	f5a3 4360 	sub.w	r3, r3, #57344	; 0xe000
 8001a06:	f244 222c 	movw	r2, #16940	; 0x422c
 8001a0a:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_SSOE; // | SPI_CR2_RXNEIE;
 8001a0c:	f240 7204 	movw	r2, #1796	; 0x704
 8001a10:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SPI1_Init+0x44>)
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	2208      	movs	r2, #8
 8001a24:	605a      	str	r2, [r3, #4]

	NVIC_SetPriority(SPI1_IRQn, 2); /* (4) */
	NVIC_EnableIRQ(SPI1_IRQn); /* (5) */
}
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <MX_GPIO_Init>:
static void MX_GPIO_Init(void) {
 8001a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a34:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	2400      	movs	r4, #0
 8001a38:	9407      	str	r4, [sp, #28]
 8001a3a:	9408      	str	r4, [sp, #32]
 8001a3c:	9409      	str	r4, [sp, #36]	; 0x24
 8001a3e:	940a      	str	r4, [sp, #40]	; 0x28
 8001a40:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	4b74      	ldr	r3, [pc, #464]	; (8001c14 <MX_GPIO_Init+0x1e4>)
 8001a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a60:	f002 0204 	and.w	r2, r2, #4
 8001a64:	9202      	str	r2, [sp, #8]
 8001a66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a72:	f002 0201 	and.w	r2, r2, #1
 8001a76:	9203      	str	r2, [sp, #12]
 8001a78:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7c:	f042 0202 	orr.w	r2, r2, #2
 8001a80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a84:	f002 0202 	and.w	r2, r2, #2
 8001a88:	9204      	str	r2, [sp, #16]
 8001a8a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8e:	f042 0210 	orr.w	r2, r2, #16
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a96:	f002 0210 	and.w	r2, r2, #16
 8001a9a:	9205      	str	r2, [sp, #20]
 8001a9c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa0:	f042 0208 	orr.w	r2, r2, #8
 8001aa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	9306      	str	r3, [sp, #24]
 8001aae:	9b06      	ldr	r3, [sp, #24]
	  HAL_GPIO_WritePin(LORA_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001ab0:	4e59      	ldr	r6, [pc, #356]	; (8001c18 <MX_GPIO_Init+0x1e8>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab8:	4630      	mov	r0, r6
 8001aba:	f000 fe68 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LORA_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f000 fe62 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RXDone_GPIO_Port, RXDone_Pin, GPIO_PIN_RESET);
 8001aca:	4622      	mov	r2, r4
 8001acc:	2104      	movs	r1, #4
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fe5c 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001adc:	4630      	mov	r0, r6
 8001ade:	f000 fe56 	bl	800278e <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8001ae2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae6:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2501      	movs	r5, #1
 8001aea:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(LORA_GPIO_Port, &GPIO_InitStruct);
 8001af0:	a907      	add	r1, sp, #28
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 fd60 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LORA_MOSI_Pin | LORA_MISO_Pin | LORA_SCLK_Pin;
 8001af8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001afc:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	f04f 0802 	mov.w	r8, #2
 8001b02:	f8cd 8020 	str.w	r8, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Alternate = 0x05;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	930b      	str	r3, [sp, #44]	; 0x2c
	  HAL_GPIO_Init(LORA_SPI_Port, &GPIO_InitStruct);
 8001b0c:	a907      	add	r1, sp, #28
 8001b0e:	4630      	mov	r0, r6
 8001b10:	f000 fd52 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b18:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b20:	a907      	add	r1, sp, #28
 8001b22:	4630      	mov	r0, r6
 8001b24:	f000 fd48 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = RXDone_Pin;
 8001b28:	2604      	movs	r6, #4
 8001b2a:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <MX_GPIO_Init+0x1ec>)
 8001b2e:	9308      	str	r3, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	9409      	str	r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(RXDone_GPIO_Port, &GPIO_InitStruct);
 8001b32:	a907      	add	r1, sp, #28
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f000 fd3e 	bl	80025b8 <HAL_GPIO_Init>
	  HAL_NVIC_SetPriority(LORA_EXTI_IRQn, 2, 0);
 8001b3c:	4622      	mov	r2, r4
 8001b3e:	4641      	mov	r1, r8
 8001b40:	2028      	movs	r0, #40	; 0x28
 8001b42:	f000 fce1 	bl	8002508 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LORA_EXTI_IRQn);
 8001b46:	2028      	movs	r0, #40	; 0x28
 8001b48:	f000 fd12 	bl	8002570 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	2007      	movs	r0, #7
 8001b52:	f000 fcd9 	bl	8002508 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b56:	2007      	movs	r0, #7
 8001b58:	f000 fd0a 	bl	8002570 <HAL_NVIC_EnableIRQ>
	  HAL_GPIO_WritePin(GPIOH, BB_GPOUT_Pin|BB_CE_Pin, GPIO_PIN_RESET);
 8001b5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001c28 <MX_GPIO_Init+0x1f8>
 8001b60:	4622      	mov	r2, r4
 8001b62:	2103      	movs	r1, #3
 8001b64:	4650      	mov	r0, sl
 8001b66:	f000 fe12 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BB_SYSOFF_Pin, GPIO_PIN_RESET);
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f000 fe0c 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b76:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8001c2c <MX_GPIO_Init+0x1fc>
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	4631      	mov	r1, r6
 8001b7e:	4648      	mov	r0, r9
 8001b80:	f000 fe05 	bl	800278e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPSReg_Pwr_GPIO_Port, GPSReg_Pwr_Pin, GPIO_PIN_RESET);
 8001b84:	4f26      	ldr	r7, [pc, #152]	; (8001c20 <MX_GPIO_Init+0x1f0>)
 8001b86:	4622      	mov	r2, r4
 8001b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	f000 fdfe 	bl	800278e <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = BB_GPOUT_Pin|BB_CE_Pin;
 8001b92:	2303      	movs	r3, #3
 8001b94:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9c:	a907      	add	r1, sp, #28
 8001b9e:	4650      	mov	r0, sl
 8001ba0:	f000 fd0a 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = BB_SYSOFF_Pin;
 8001ba4:	9507      	str	r5, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	a907      	add	r1, sp, #28
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f000 fd01 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = session_btn_Pin;
 8001bb6:	f8cd 801c 	str.w	r8, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_GPIO_Init+0x1f4>)
 8001bbc:	9308      	str	r3, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	9409      	str	r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(session_btn_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	a907      	add	r1, sp, #28
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f000 fcf7 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = radio_btn_Pin;
 8001bca:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	9408      	str	r4, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	9409      	str	r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(radio_btn_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	a907      	add	r1, sp, #28
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f000 fcef 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LED_Pin;
 8001bda:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001be2:	a907      	add	r1, sp, #28
 8001be4:	4648      	mov	r0, r9
 8001be6:	f000 fce7 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPSReg_ERR_Pin;
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	9408      	str	r4, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	9409      	str	r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPSReg_ERR_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	a907      	add	r1, sp, #28
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f000 fcdf 	bl	80025b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPSReg_Pwr_Pin;
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	9409      	str	r4, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	940a      	str	r4, [sp, #40]	; 0x28
	  HAL_GPIO_Init(GPSReg_Pwr_GPIO_Port, &GPIO_InitStruct);
 8001c06:	a907      	add	r1, sp, #28
 8001c08:	4638      	mov	r0, r7
 8001c0a:	f000 fcd5 	bl	80025b8 <HAL_GPIO_Init>
}
 8001c0e:	b00c      	add	sp, #48	; 0x30
 8001c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48001000 	.word	0x48001000
 8001c1c:	10110000 	.word	0x10110000
 8001c20:	48000800 	.word	0x48000800
 8001c24:	10310000 	.word	0x10310000
 8001c28:	48001c00 	.word	0x48001c00
 8001c2c:	48000400 	.word	0x48000400

08001c30 <MX_I2C1_Init>:
static void MX_I2C1_Init(void) {
 8001c30:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8001c32:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <MX_I2C1_Init+0x38>)
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_I2C1_Init+0x3c>)
 8001c36:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <MX_I2C1_Init+0x40>)
 8001c3a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c46:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c48:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4a:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f000 ff10 	bl	8002a74 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001c54:	4629      	mov	r1, r5
 8001c56:	4620      	mov	r0, r4
 8001c58:	f001 f912 	bl	8002e80 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f001 f93c 	bl	8002edc <HAL_I2CEx_ConfigDigitalFilter>
}
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	20000c5c 	.word	0x20000c5c
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	10808dd3 	.word	0x10808dd3

08001c74 <MX_I2C2_Init>:

static void MX_I2C2_Init(void) {
 8001c74:	b538      	push	{r3, r4, r5, lr}
  hi2c2.Instance = I2C2;
 8001c76:	4c0d      	ldr	r4, [pc, #52]	; (8001cac <MX_I2C2_Init+0x38>)
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <MX_I2C2_Init+0x3c>)
 8001c7a:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x10808DD3;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <MX_I2C2_Init+0x40>)
 8001c7e:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c80:	2500      	movs	r5, #0
 8001c82:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c84:	2301      	movs	r3, #1
 8001c86:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c8a:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c8c:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8e:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c90:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001c92:	4620      	mov	r0, r4
 8001c94:	f000 feee 	bl	8002a74 <HAL_I2C_Init>
    Error_Handler();
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f001 f8f0 	bl	8002e80 <HAL_I2CEx_ConfigAnalogFilter>
    Error_Handler();
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f001 f91a 	bl	8002edc <HAL_I2CEx_ConfigDigitalFilter>
    Error_Handler();
  }
}
 8001ca8:	bd38      	pop	{r3, r4, r5, pc}
 8001caa:	bf00      	nop
 8001cac:	20000ca8 	.word	0x20000ca8
 8001cb0:	40005800 	.word	0x40005800
 8001cb4:	10808dd3 	.word	0x10808dd3

08001cb8 <MX_I2C3_Init>:

static void MX_I2C3_Init(void) {
 8001cb8:	b538      	push	{r3, r4, r5, lr}
  hi2c3.Instance = I2C3;
 8001cba:	4c0d      	ldr	r4, [pc, #52]	; (8001cf0 <MX_I2C3_Init+0x38>)
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_I2C3_Init+0x3c>)
 8001cbe:	6023      	str	r3, [r4, #0]
  hi2c3.Init.Timing = 0x10808DD3;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <MX_I2C3_Init+0x40>)
 8001cc2:	6063      	str	r3, [r4, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	60a5      	str	r5, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	60e3      	str	r3, [r4, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	6125      	str	r5, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cce:	6165      	str	r5, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd0:	61a5      	str	r5, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd2:	61e5      	str	r5, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd4:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f000 fecc 	bl	8002a74 <HAL_I2C_Init>
    Error_Handler();
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f001 f8ce 	bl	8002e80 <HAL_I2CEx_ConfigAnalogFilter>
    Error_Handler();
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f001 f8f8 	bl	8002edc <HAL_I2CEx_ConfigDigitalFilter>
    Error_Handler();
  }
}
 8001cec:	bd38      	pop	{r3, r4, r5, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000c10 	.word	0x20000c10
 8001cf4:	40005c00 	.word	0x40005c00
 8001cf8:	10808dd3 	.word	0x10808dd3

08001cfc <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
 8001cfc:	b508      	push	{r3, lr}
	if(USART2->ISR & USART_ISR_RXNE) {
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <USART2_IRQHandler+0x70>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f013 0f20 	tst.w	r3, #32
 8001d06:	d00a      	beq.n	8001d1e <USART2_IRQHandler+0x22>
		char rx = (char)(USART2->RDR & 0xFF);
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <USART2_IRQHandler+0x70>)
 8001d0a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001d0c:	b2c9      	uxtb	r1, r1
		data[idx++] = rx;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <USART2_IRQHandler+0x74>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	1c42      	adds	r2, r0, #1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4403      	add	r3, r0
 8001d18:	7119      	strb	r1, [r3, #4]
		if(rx == '\n') {
 8001d1a:	290a      	cmp	r1, #10
 8001d1c:	d000      	beq.n	8001d20 <USART2_IRQHandler+0x24>
}
 8001d1e:	bd08      	pop	{r3, pc}
			numBytes++;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <USART2_IRQHandler+0x74>)
 8001d22:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001d26:	3101      	adds	r1, #1
 8001d28:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
			if(data[3] == 71 && data[4] == 71) {
 8001d2c:	79db      	ldrb	r3, [r3, #7]
 8001d2e:	2b47      	cmp	r3, #71	; 0x47
 8001d30:	d005      	beq.n	8001d3e <USART2_IRQHandler+0x42>
			else if(data[3] == 86 && data[4] == 84) {
 8001d32:	2b56      	cmp	r3, #86	; 0x56
 8001d34:	d00e      	beq.n	8001d54 <USART2_IRQHandler+0x58>
			idx = 0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <USART2_IRQHandler+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	e7ef      	b.n	8001d1e <USART2_IRQHandler+0x22>
			if(data[3] == 71 && data[4] == 71) {
 8001d3e:	490c      	ldr	r1, [pc, #48]	; (8001d70 <USART2_IRQHandler+0x74>)
 8001d40:	7a09      	ldrb	r1, [r1, #8]
 8001d42:	2947      	cmp	r1, #71	; 0x47
 8001d44:	d1f5      	bne.n	8001d32 <USART2_IRQHandler+0x36>
				memcpy((void*)GPS.rxBuffer, data, idx);
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <USART2_IRQHandler+0x78>)
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <USART2_IRQHandler+0x7c>)
 8001d4a:	f002 fc5d 	bl	8004608 <memcpy>
				GPS_Parse();
 8001d4e:	f7ff fb93 	bl	8001478 <GPS_Parse>
 8001d52:	e7f0      	b.n	8001d36 <USART2_IRQHandler+0x3a>
			else if(data[3] == 86 && data[4] == 84) {
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <USART2_IRQHandler+0x74>)
 8001d56:	7a1b      	ldrb	r3, [r3, #8]
 8001d58:	2b54      	cmp	r3, #84	; 0x54
 8001d5a:	d1ec      	bne.n	8001d36 <USART2_IRQHandler+0x3a>
				memcpy((void*)GPS.rxBuffer, data, idx);
 8001d5c:	4905      	ldr	r1, [pc, #20]	; (8001d74 <USART2_IRQHandler+0x78>)
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <USART2_IRQHandler+0x7c>)
 8001d60:	f002 fc52 	bl	8004608 <memcpy>
				GPS_Parse();
 8001d64:	f7ff fb88 	bl	8001478 <GPS_Parse>
 8001d68:	e7e5      	b.n	8001d36 <USART2_IRQHandler+0x3a>
 8001d6a:	bf00      	nop
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	200007b8 	.word	0x200007b8
 8001d74:	200007bc 	.word	0x200007bc
 8001d78:	200009dc 	.word	0x200009dc

08001d7c <displayHomeScreen>:
void displayHomeScreen(void) {
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	f5ad 5db8 	sub.w	sp, sp, #5888	; 0x1700
 8001d82:	b086      	sub	sp, #24
	int logo[739][2] = {{11, 19}, {11, 20}, {11, 21}, {11, 22}, {11, 23}, {11, 24}, {11, 25}, {11, 26}, {11, 27}, {11, 28}, {11, 29}, {11, 30}, {12, 13}, {12, 14}, {12, 15}, {12, 16}, {12, 17}, {12, 18}, {12, 19}, {12, 20}, {12, 21}, {12, 22}, {12, 23}, {12, 24}, {12, 25}, {12, 26}, {12, 27}, {12, 28}, {12, 29}, {12, 30}, {12, 31}, {12, 32}, {12, 33}, {12, 34}, {12, 35}, {12, 36}, {13, 9}, {13, 10}, {13, 11}, {13, 12}, {13, 13}, {13, 14}, {13, 15}, {13, 16}, {13, 17}, {13, 18}, {13, 19}, {13, 20}, {13, 21}, {13, 22}, {13, 23}, {13, 24}, {13, 25}, {13, 26}, {13, 27}, {13, 28}, {13, 29}, {13, 30}, {13, 31}, {13, 32}, {13, 33}, {13, 34}, {13, 35}, {13, 36}, {13, 37}, {13, 38}, {13, 39}, {13, 40}, {14, 7}, {14, 8}, {14, 9}, {14, 10}, {14, 11}, {14, 12}, {14, 13}, {14, 14}, {14, 15}, {14, 16}, {14, 17}, {14, 18}, {14, 19}, {14, 20}, {14, 21}, {14, 22}, {14, 23}, {14, 24}, {14, 25}, {14, 26}, {14, 27}, {14, 28}, {14, 29}, {14, 30}, {14, 31}, {14, 32}, {14, 33}, {14, 34}, {14, 35}, {14, 36}, {14, 37}, {14, 38}, {14, 39}, {14, 40}, {14, 41}, {14, 42}, {15, 6}, {15, 7}, {15, 8}, {15, 9}, {15, 10}, {15, 11}, {15, 12}, {15, 13}, {15, 14}, {15, 15}, {15, 16}, {15, 17}, {15, 18}, {15, 19}, {15, 20}, {15, 21}, {15, 22}, {15, 23}, {15, 24}, {15, 25}, {15, 26}, {15, 27}, {15, 28}, {15, 29}, {15, 30}, {15, 31}, {15, 32}, {15, 33}, {15, 34}, {15, 35}, {15, 36}, {15, 37}, {15, 38}, {15, 39}, {15, 40}, {15, 41}, {15, 42}, {15, 43}, {15, 44}, {16, 4}, {16, 5}, {16, 6}, {16, 7}, {16, 8}, {16, 9}, {16, 10}, {16, 11}, {16, 12}, {16, 13}, {16, 14}, {16, 15}, {16, 16}, {16, 17}, {16, 32}, {16, 33}, {16, 34}, {16, 35}, {16, 36}, {16, 37}, {16, 38}, {16, 39}, {16, 40}, {16, 41}, {16, 42}, {16, 43}, {16, 44}, {16, 45}, {17, 3}, {17, 4}, {17, 5}, {17, 6}, {17, 7}, {17, 8}, {17, 9}, {17, 10}, {17, 11}, {17, 38}, {17, 39}, {17, 40}, {17, 41}, {17, 42}, {17, 43}, {17, 44}, {17, 45}, {17, 46}, {18, 3}, {18, 4}, {18, 5}, {18, 6}, {18, 7}, {18, 8}, {18, 41}, {18, 42}, {18, 43}, {18, 44}, {18, 45}, {18, 46}, {19, 2}, {19, 3}, {19, 4}, {19, 5}, {19, 6}, {19, 7}, {19, 43}, {19, 44}, {19, 45}, {19, 46}, {19, 47}, {20, 2}, {20, 3}, {20, 4}, {20, 5}, {20, 6}, {20, 43}, {20, 44}, {20, 45}, {20, 46}, {20, 47}, {21, 1}, {21, 2}, {21, 3}, {21, 4}, {21, 5}, {21, 24}, {21, 25}, {21, 44}, {21, 45}, {21, 46}, {21, 47}, {21, 48}, {21, 49}, {22, 0}, {22, 1}, {22, 2}, {22, 3}, {22, 4}, {22, 5}, {22, 22}, {22, 25}, {22, 26}, {22, 27}, {22, 44}, {22, 46}, {22, 47}, {22, 48}, {22, 49}, {23, 0}, {23, 1}, {23, 2}, {23, 3}, {23, 4}, {23, 5}, {23, 20}, {23, 26}, {23, 27}, {23, 28}, {23, 44}, {23, 45}, {23, 46}, {23, 47}, {23, 48}, {23, 49}, {24, 0}, {24, 1}, {24, 2}, {24, 3}, {24, 4}, {24, 5}, {24, 15}, {24, 16}, {24, 17}, {24, 18}, {24, 19}, {24, 20}, {24, 23}, {24, 24}, {24, 25}, {24, 26}, {24, 27}, {24, 28}, {24, 29}, {24, 30}, {24, 31}, {24, 32}, {24, 44}, {24, 45}, {24, 46}, {24, 47}, {24, 48}, {24, 49}, {25, 0}, {25, 1}, {25, 2}, {25, 3}, {25, 4}, {25, 5}, {25, 14}, {25, 17}, {25, 18}, {25, 19}, {25, 20}, {25, 21}, {25, 22}, {25, 23}, {25, 24}, {25, 25}, {25, 26}, {25, 27}, {25, 28}, {25, 29}, {25, 30}, {25, 31}, {25, 32}, {25, 33}, {25, 34}, {25, 44}, {25, 46}, {25, 47}, {25, 48}, {25, 49}, {26, 0}, {26, 1}, {26, 2}, {26, 3}, {26, 4}, {26, 5}, {26, 13}, {26, 18}, {26, 19}, {26, 20}, {26, 21}, {26, 22}, {26, 23}, {26, 24}, {26, 25}, {26, 26}, {26, 27}, {26, 28}, {26, 29}, {26, 30}, {26, 31}, {26, 32}, {26, 33}, {26, 34}, {26, 35}, {26, 39}, {26, 40}, {26, 41}, {26, 44}, {26, 45}, {26, 46}, {26, 47}, {26, 48}, {26, 49}, {27, 0}, {27, 1}, {27, 2}, {27, 3}, {27, 4}, {27, 5}, {27, 12}, {27, 17}, {27, 18}, {27, 19}, {27, 20}, {27, 21}, {27, 28}, {27, 29}, {27, 30}, {27, 31}, {27, 32}, {27, 33}, {27, 34}, {27, 35}, {27, 36}, {27, 37}, {27, 38}, {27, 42}, {27, 43}, {27, 44}, {27, 46}, {27, 47}, {27, 48}, {27, 49}, {28, 0}, {28, 1}, {28, 2}, {28, 3}, {28, 5}, {28, 8}, {28, 9}, {28, 10}, {28, 11}, {28, 12}, {28, 13}, {28, 14}, {28, 15}, {28, 16}, {28, 17}, {28, 18}, {28, 19}, {28, 20}, {28, 22}, {28, 23}, {28, 24}, {28, 25}, {28, 26}, {28, 27}, {28, 29}, {28, 30}, {28, 31}, {28, 32}, {28, 33}, {28, 34}, {28, 35}, {28, 36}, {28, 37}, {28, 38}, {28, 39}, {28, 40}, {28, 42}, {28, 43}, {28, 44}, {28, 46}, {28, 47}, {28, 48}, {28, 49}, {29, 0}, {29, 1}, {29, 2}, {29, 3}, {29, 5}, {29, 6}, {29, 7}, {29, 10}, {29, 11}, {29, 12}, {29, 13}, {29, 14}, {29, 15}, {29, 16}, {29, 17}, {29, 18}, {29, 19}, {29, 21}, {29, 22}, {29, 23}, {29, 24}, {29, 25}, {29, 26}, {29, 27}, {29, 28}, {29, 30}, {29, 31}, {29, 32}, {29, 33}, {29, 34}, {29, 35}, {29, 36}, {29, 37}, {29, 38}, {29, 39}, {29, 40}, {29, 41}, {29, 42}, {29, 43}, {29, 44}, {29, 45}, {29, 46}, {29, 47}, {29, 48}, {29, 49}, {30, 0}, {30, 1}, {30, 2}, {30, 3}, {30, 4}, {30, 5}, {30, 6}, {30, 7}, {30, 8}, {30, 9}, {30, 10}, {30, 11}, {30, 12}, {30, 13}, {30, 14}, {30, 15}, {30, 16}, {30, 17}, {30, 18}, {30, 20}, {30, 21}, {30, 22}, {30, 23}, {30, 24}, {30, 25}, {30, 26}, {30, 27}, {30, 28}, {30, 29}, {30, 31}, {30, 32}, {30, 33}, {30, 34}, {30, 35}, {30, 36}, {30, 37}, {30, 38}, {30, 39}, {30, 40}, {30, 41}, {30, 42}, {30, 43}, {30, 44}, {30, 46}, {30, 47}, {30, 48}, {30, 49}, {31, 0}, {31, 1}, {31, 2}, {31, 3}, {31, 4}, {31, 5}, {31, 6}, {31, 7}, {31, 8}, {31, 9}, {31, 10}, {31, 11}, {31, 12}, {31, 13}, {31, 14}, {31, 15}, {31, 16}, {31, 17}, {31, 20}, {31, 21}, {31, 22}, {31, 23}, {31, 24}, {31, 25}, {31, 26}, {31, 27}, {31, 28}, {31, 29}, {31, 32}, {31, 33}, {31, 34}, {31, 35}, {31, 36}, {31, 37}, {31, 38}, {31, 39}, {31, 40}, {31, 41}, {31, 42}, {31, 43}, {31, 45}, {31, 46}, {31, 47}, {31, 48}, {31, 49}, {32, 0}, {32, 1}, {32, 2}, {32, 3}, {32, 4}, {32, 5}, {32, 7}, {32, 8}, {32, 9}, {32, 10}, {32, 11}, {32, 12}, {32, 13}, {32, 14}, {32, 15}, {32, 16}, {32, 17}, {32, 19}, {32, 20}, {32, 21}, {32, 22}, {32, 23}, {32, 26}, {32, 27}, {32, 28}, {32, 29}, {32, 30}, {32, 32}, {32, 33}, {32, 34}, {32, 35}, {32, 36}, {32, 37}, {32, 38}, {32, 39}, {32, 40}, {32, 41}, {32, 42}, {32, 44}, {32, 45}, {32, 46}, {32, 47}, {32, 48}, {32, 49}, {33, 2}, {33, 3}, {33, 4}, {33, 5}, {33, 6}, {33, 7}, {33, 9}, {33, 10}, {33, 11}, {33, 12}, {33, 13}, {33, 14}, {33, 15}, {33, 16}, {33, 18}, {33, 19}, {33, 20}, {33, 21}, {33, 22}, {33, 27}, {33, 28}, {33, 29}, {33, 30}, {33, 31}, {33, 33}, {33, 34}, {33, 35}, {33, 36}, {33, 37}, {33, 38}, {33, 39}, {33, 40}, {33, 42}, {33, 43}, {33, 44}, {33, 45}, {33, 46}, {33, 47}, {34, 5}, {34, 6}, {34, 7}, {34, 8}, {34, 9}, {34, 12}, {34, 13}, {34, 14}, {34, 15}, {34, 17}, {34, 18}, {34, 19}, {34, 20}, {34, 21}, {34, 28}, {34, 29}, {34, 30}, {34, 31}, {34, 32}, {34, 34}, {34, 35}, {34, 36}, {34, 37}, {34, 40}, {34, 41}, {34, 42}, {34, 43}, {34, 44}, {35, 7}, {35, 8}, {35, 9}, {35, 10}, {35, 11}, {35, 12}, {35, 16}, {35, 17}, {35, 18}, {35, 19}, {35, 20}, {35, 29}, {35, 30}, {35, 31}, {35, 32}, {35, 33}, {35, 34}, {35, 37}, {35, 38}, {35, 39}, {35, 40}, {35, 41}, {35, 42}, {36, 9}, {36, 10}, {36, 11}, {36, 12}, {36, 13}, {36, 14}, {36, 15}, {36, 16}, {36, 17}, {36, 18}, {36, 19}, {36, 30}, {36, 31}, {36, 32}, {36, 33}, {36, 34}, {36, 35}, {36, 36}, {36, 37}, {36, 38}, {36, 39}, {36, 40}, {37, 12}, {37, 13}, {37, 14}, {37, 15}, {37, 16}, {37, 17}, {37, 18}, {37, 19}, {37, 30}, {37, 31}, {37, 32}, {37, 33}, {37, 34}, {37, 35}, {37, 36}, {37, 37}};
 8001d84:	f241 7218 	movw	r2, #5912	; 0x1718
 8001d88:	4914      	ldr	r1, [pc, #80]	; (8001ddc <displayHomeScreen+0x60>)
 8001d8a:	4668      	mov	r0, sp
 8001d8c:	f002 fc3c 	bl	8004608 <memcpy>
	ssd1306_Fill(Black);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff f923 	bl	8000fdc <ssd1306_Fill>
	for(logo_idx = 0; logo_idx < 739; logo_idx++)
 8001d96:	2400      	movs	r4, #0
 8001d98:	e00a      	b.n	8001db0 <displayHomeScreen+0x34>
		int x = logo[logo_idx][1] + 40;
 8001d9a:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
 8001d9e:	6858      	ldr	r0, [r3, #4]
 8001da0:	3028      	adds	r0, #40	; 0x28
		ssd1306_DrawPixel(x, y, White);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f81d 1034 	ldrb.w	r1, [sp, r4, lsl #3]
 8001da8:	b2c0      	uxtb	r0, r0
 8001daa:	f7ff f943 	bl	8001034 <ssd1306_DrawPixel>
	for(logo_idx = 0; logo_idx < 739; logo_idx++)
 8001dae:	3401      	adds	r4, #1
 8001db0:	f240 23e2 	movw	r3, #738	; 0x2e2
 8001db4:	429c      	cmp	r4, r3
 8001db6:	ddf0      	ble.n	8001d9a <displayHomeScreen+0x1e>
	ssd1306_UpdateScreen();
 8001db8:	f7ff f920 	bl	8000ffc <ssd1306_UpdateScreen>
	ssd1306_SetCursor(4, 45);
 8001dbc:	212d      	movs	r1, #45	; 0x2d
 8001dbe:	2004      	movs	r0, #4
 8001dc0:	f7ff f9dc 	bl	800117c <ssd1306_SetCursor>
	ssd1306_WriteString("Snow-weAR Goggles", Font_7x10, White);
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <displayHomeScreen+0x64>)
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	ca06      	ldmia	r2, {r1, r2}
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <displayHomeScreen+0x68>)
 8001dcc:	f7ff f9be 	bl	800114c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001dd0:	f7ff f914 	bl	8000ffc <ssd1306_UpdateScreen>
}
 8001dd4:	f50d 5db8 	add.w	sp, sp, #5888	; 0x1700
 8001dd8:	b006      	add	sp, #24
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	08009f44 	.word	0x08009f44
 8001de0:	20000010 	.word	0x20000010
 8001de4:	0800b6a4 	.word	0x0800b6a4

08001de8 <session>:
void session(void) {
 8001de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dec:	ed2d 8b02 	vpush	{d8}
 8001df0:	b08e      	sub	sp, #56	; 0x38
	ssd1306_Fill(Black);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff f8f2 	bl	8000fdc <ssd1306_Fill>
	int cur_temp = -1;
 8001df8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int cur_soc = -1;
 8001dfc:	4647      	mov	r7, r8
 8001dfe:	e063      	b.n	8001ec8 <session+0xe0>
			ssd1306_SetCursor(100, 54);
 8001e00:	2136      	movs	r1, #54	; 0x36
 8001e02:	2064      	movs	r0, #100	; 0x64
 8001e04:	f7ff f9ba 	bl	800117c <ssd1306_SetCursor>
			sprintf(soc_str, "%3d%% ", soc);
 8001e08:	4622      	mov	r2, r4
 8001e0a:	494a      	ldr	r1, [pc, #296]	; (8001f34 <session+0x14c>)
 8001e0c:	a806      	add	r0, sp, #24
 8001e0e:	f002 fe0f 	bl	8004a30 <siprintf>
			ssd1306_WriteString(soc_str, Font_6x8, White);
 8001e12:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <session+0x150>)
 8001e14:	2301      	movs	r3, #1
 8001e16:	ca06      	ldmia	r2, {r1, r2}
 8001e18:	a806      	add	r0, sp, #24
 8001e1a:	f7ff f997 	bl	800114c <ssd1306_WriteString>
			cur_soc = soc;
 8001e1e:	4627      	mov	r7, r4
 8001e20:	e05d      	b.n	8001ede <session+0xf6>
		sprintf(lat_str, "%2d.%2d %c", (int)GPS.LatDec, (int)((GPS.LatDec-(int)GPS.LatDec)*100), GPS.NS_Indicator);
 8001e22:	4d46      	ldr	r5, [pc, #280]	; (8001f3c <session+0x154>)
 8001e24:	edd5 7a83 	vldr	s15, [r5, #524]	; 0x20c
 8001e28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001e2c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001e30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e34:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8001f40 <session+0x158>
 8001e38:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001e3c:	f895 3210 	ldrb.w	r3, [r5, #528]	; 0x210
 8001e40:	4e40      	ldr	r6, [pc, #256]	; (8001f44 <session+0x15c>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e48:	ee17 3a90 	vmov	r3, s15
 8001e4c:	ee17 2a10 	vmov	r2, s14
 8001e50:	4631      	mov	r1, r6
 8001e52:	a802      	add	r0, sp, #8
 8001e54:	f002 fdec 	bl	8004a30 <siprintf>
		ssd1306_SetCursor(4, 10);
 8001e58:	210a      	movs	r1, #10
 8001e5a:	2004      	movs	r0, #4
 8001e5c:	f7ff f98e 	bl	800117c <ssd1306_SetCursor>
		ssd1306_WriteString(lat_str, Font_7x10, White);
 8001e60:	4c39      	ldr	r4, [pc, #228]	; (8001f48 <session+0x160>)
 8001e62:	2301      	movs	r3, #1
 8001e64:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001e68:	a802      	add	r0, sp, #8
 8001e6a:	f7ff f96f 	bl	800114c <ssd1306_WriteString>
		ssd1306_SetCursor(4, 20);
 8001e6e:	2114      	movs	r1, #20
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff f983 	bl	800117c <ssd1306_SetCursor>
		sprintf(lon_str, "%2d.%2d %c", (int)GPS.LonDec, (int)((GPS.LonDec-(int)GPS.LonDec)*100), GPS.EW_Indicator);
 8001e76:	edd5 7a86 	vldr	s15, [r5, #536]	; 0x218
 8001e7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001e7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001e82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e86:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001e8a:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e94:	ee17 3a90 	vmov	r3, s15
 8001e98:	ee17 2a10 	vmov	r2, s14
 8001e9c:	4631      	mov	r1, r6
 8001e9e:	a806      	add	r0, sp, #24
 8001ea0:	f002 fdc6 	bl	8004a30 <siprintf>
		ssd1306_WriteString(lon_str, Font_7x10, White);
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001eaa:	a806      	add	r0, sp, #24
 8001eac:	f7ff f94e 	bl	800114c <ssd1306_WriteString>
		ssd1306_SetCursor(4, 30);
 8001eb0:	211e      	movs	r1, #30
 8001eb2:	2004      	movs	r0, #4
 8001eb4:	f7ff f962 	bl	800117c <ssd1306_SetCursor>
		ssd1306_WriteString(gpsStringData, Font_7x10, White);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001ebe:	4823      	ldr	r0, [pc, #140]	; (8001f4c <session+0x164>)
 8001ec0:	f7ff f944 	bl	800114c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001ec4:	f7ff f89a 	bl	8000ffc <ssd1306_UpdateScreen>
		if(state == 1)
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <session+0x168>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d02c      	beq.n	8001f2a <session+0x142>
		uint16_t soc = BB_soc(&hi2c1, 0);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4820      	ldr	r0, [pc, #128]	; (8001f54 <session+0x16c>)
 8001ed4:	f7ff fa86 	bl	80013e4 <BB_soc>
 8001ed8:	4604      	mov	r4, r0
		if(soc != cur_soc) {
 8001eda:	42b8      	cmp	r0, r7
 8001edc:	d190      	bne.n	8001e00 <session+0x18>
		uint16_t temp = readTemp(&hi2c1);
 8001ede:	481d      	ldr	r0, [pc, #116]	; (8001f54 <session+0x16c>)
 8001ee0:	f7ff fa4a 	bl	8001378 <readTemp>
 8001ee4:	4604      	mov	r4, r0
		if(temp != cur_temp) {
 8001ee6:	4540      	cmp	r0, r8
 8001ee8:	d09b      	beq.n	8001e22 <session+0x3a>
			sprintf(temp_str, "%2d.%1d F",(int)temp/10, (int)temp%10);
 8001eea:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <session+0x170>)
 8001eec:	fba2 3200 	umull	r3, r2, r2, r0
 8001ef0:	08d2      	lsrs	r2, r2, #3
 8001ef2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001ef6:	004b      	lsls	r3, r1, #1
 8001ef8:	1ac3      	subs	r3, r0, r3
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b292      	uxth	r2, r2
 8001efe:	4917      	ldr	r1, [pc, #92]	; (8001f5c <session+0x174>)
 8001f00:	a806      	add	r0, sp, #24
 8001f02:	f002 fd95 	bl	8004a30 <siprintf>
			ssd1306_SetCursor(83, 15);
 8001f06:	210f      	movs	r1, #15
 8001f08:	2053      	movs	r0, #83	; 0x53
 8001f0a:	f7ff f937 	bl	800117c <ssd1306_SetCursor>
			ssd1306_WriteString(temp_str, Font_7x10, White);
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <session+0x160>)
 8001f10:	2301      	movs	r3, #1
 8001f12:	ca06      	ldmia	r2, {r1, r2}
 8001f14:	a806      	add	r0, sp, #24
 8001f16:	f7ff f919 	bl	800114c <ssd1306_WriteString>
			ssd1306_DrawCircle(115, 15, 1, White);
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	210f      	movs	r1, #15
 8001f20:	2073      	movs	r0, #115	; 0x73
 8001f22:	f7ff f933 	bl	800118c <ssd1306_DrawCircle>
			cur_temp = temp;
 8001f26:	46a0      	mov	r8, r4
 8001f28:	e77b      	b.n	8001e22 <session+0x3a>
}
 8001f2a:	b00e      	add	sp, #56	; 0x38
 8001f2c:	ecbd 8b02 	vpop	{d8}
 8001f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f34:	0800b6d0 	.word	0x0800b6d0
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	200009dc 	.word	0x200009dc
 8001f40:	42c80000 	.word	0x42c80000
 8001f44:	0800b6e4 	.word	0x0800b6e4
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	200009d0 	.word	0x200009d0
 8001f50:	20000cf4 	.word	0x20000cf4
 8001f54:	20000c5c 	.word	0x20000c5c
 8001f58:	cccccccd 	.word	0xcccccccd
 8001f5c:	0800b6d8 	.word	0x0800b6d8

08001f60 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f60:	b510      	push	{r4, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	4604      	mov	r4, r0
  if(GPIO_Pin == session_btn_Pin){
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_EXTI_Callback+0x12>
  if(GPIO_Pin == RXDone_Pin){
 8001f6a:	2c04      	cmp	r4, #4
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_EXTI_Callback+0x36>
}
 8001f6e:	b004      	add	sp, #16
 8001f70:	bd10      	pop	{r4, pc}
	  int session_btn_val = HAL_GPIO_ReadPin(session_btn_GPIO_Port, session_btn_Pin);
 8001f72:	2102      	movs	r1, #2
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f000 fc02 	bl	8002780 <HAL_GPIO_ReadPin>
	  if(session_btn_val) {
 8001f7c:	b110      	cbz	r0, 8001f84 <HAL_GPIO_EXTI_Callback+0x24>
		session();
 8001f7e:	f7ff ff33 	bl	8001de8 <session>
 8001f82:	e7f2      	b.n	8001f6a <HAL_GPIO_EXTI_Callback+0xa>
		ssd1306_Fill(Black);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff f829 	bl	8000fdc <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001f8a:	f7ff f837 	bl	8000ffc <ssd1306_UpdateScreen>
		state = 1; //Home
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e7e9      	b.n	8001f6a <HAL_GPIO_EXTI_Callback+0xa>
	if(HAL_GPIO_ReadPin(RXDone_GPIO_Port, RXDone_Pin)){
 8001f96:	2104      	movs	r1, #4
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f000 fbf0 	bl	8002780 <HAL_GPIO_ReadPin>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d0e4      	beq.n	8001f6e <HAL_GPIO_EXTI_Callback+0xe>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001fa4:	4c15      	ldr	r4, [pc, #84]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	4620      	mov	r0, r4
 8001fae:	f000 fbee 	bl	800278e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 fbe8 	bl	800278e <HAL_GPIO_WritePin>
		for(int i = 0; i < GPSDATALEN; i++){
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_EXTI_Callback+0x6a>
			gpsStringData[i] = 0;
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < GPSDATALEN; i++){
 8001fc8:	3301      	adds	r3, #1
 8001fca:	2b0a      	cmp	r3, #10
 8001fcc:	ddf9      	ble.n	8001fc2 <HAL_GPIO_EXTI_Callback+0x62>
		loraReceiveGPSData(buf);
 8001fce:	a801      	add	r0, sp, #4
 8001fd0:	f7ff fcec 	bl	80019ac <loraReceiveGPSData>
		for(int i = 0; i < GPSDATALEN; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e006      	b.n	8001fe6 <HAL_GPIO_EXTI_Callback+0x86>
			gpsStringData[i] = (char)buf[i];
 8001fd8:	aa04      	add	r2, sp, #16
 8001fda:	441a      	add	r2, r3
 8001fdc:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001fe2:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < GPSDATALEN; i++){
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	ddf6      	ble.n	8001fd8 <HAL_GPIO_EXTI_Callback+0x78>
		loraTransmitCopy(buf, GPSDATALEN);
 8001fea:	210b      	movs	r1, #11
 8001fec:	a801      	add	r0, sp, #4
 8001fee:	f7ff fc8a 	bl	8001906 <loraTransmitCopy>
		loraReceiveModeInit();
 8001ff2:	f7ff fcb6 	bl	8001962 <loraReceiveModeInit>
  return;
 8001ff6:	e7ba      	b.n	8001f6e <HAL_GPIO_EXTI_Callback+0xe>
 8001ff8:	20000cf4 	.word	0x20000cf4
 8001ffc:	48001000 	.word	0x48001000
 8002000:	200009d0 	.word	0x200009d0

08002004 <SystemClock_Config>:

void SystemClock_Config(void) {
 8002004:	b530      	push	{r4, r5, lr}
 8002006:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002008:	2528      	movs	r5, #40	; 0x28
 800200a:	462a      	mov	r2, r5
 800200c:	2100      	movs	r1, #0
 800200e:	a828      	add	r0, sp, #160	; 0xa0
 8002010:	f002 fb1e 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	2400      	movs	r4, #0
 8002016:	9422      	str	r4, [sp, #136]	; 0x88
 8002018:	9423      	str	r4, [sp, #140]	; 0x8c
 800201a:	9424      	str	r4, [sp, #144]	; 0x90
 800201c:	9425      	str	r4, [sp, #148]	; 0x94
 800201e:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002020:	2288      	movs	r2, #136	; 0x88
 8002022:	4621      	mov	r1, r4
 8002024:	4668      	mov	r0, sp
 8002026:	f002 fb13 	bl	8004650 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800202a:	2310      	movs	r3, #16
 800202c:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800202e:	2301      	movs	r3, #1
 8002030:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002032:	2260      	movs	r2, #96	; 0x60
 8002034:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // CHANGED
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002036:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002038:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800203a:	9534      	str	r5, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800203c:	2307      	movs	r3, #7
 800203e:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002040:	2302      	movs	r3, #2
 8002042:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002044:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002046:	a827      	add	r0, sp, #156	; 0x9c
 8002048:	f001 f866 	bl	8003118 <HAL_RCC_OscConfig>
    Error_Handler();
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204c:	230f      	movs	r3, #15
 800204e:	9322      	str	r3, [sp, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002050:	2303      	movs	r3, #3
 8002052:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002054:	9424      	str	r4, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002056:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002058:	9426      	str	r4, [sp, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800205a:	2104      	movs	r1, #4
 800205c:	a822      	add	r0, sp, #136	; 0x88
 800205e:	f001 fb77 	bl	8003750 <HAL_RCC_ClockConfig>
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002062:	f240 13c3 	movw	r3, #451	; 0x1c3
 8002066:	9300      	str	r3, [sp, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002068:	940e      	str	r4, [sp, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800206a:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800206c:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800206e:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002070:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002072:	4668      	mov	r0, sp
 8002074:	f001 fda0 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8002078:	f44f 7000 	mov.w	r0, #512	; 0x200
 800207c:	f000 ff62 	bl	8002f44 <HAL_PWREx_ControlVoltageScaling>
    Error_Handler();
  }
}
 8002080:	b039      	add	sp, #228	; 0xe4
 8002082:	bd30      	pop	{r4, r5, pc}

08002084 <main>:
int main(void) {
 8002084:	b500      	push	{lr}
 8002086:	b085      	sub	sp, #20
	HAL_Init();
 8002088:	f000 f9f6 	bl	8002478 <HAL_Init>
    SystemClock_Config();
 800208c:	f7ff ffba 	bl	8002004 <SystemClock_Config>
    MX_GPIO_Init();
 8002090:	f7ff fcce 	bl	8001a30 <MX_GPIO_Init>
    	MX_I2C1_Init();
 8002094:	f7ff fdcc 	bl	8001c30 <MX_I2C1_Init>
		MX_I2C2_Init();
 8002098:	f7ff fdec 	bl	8001c74 <MX_I2C2_Init>
		MX_I2C3_Init();
 800209c:	f7ff fe0c 	bl	8001cb8 <MX_I2C3_Init>
		MX_GPIO_Init_USART();
 80020a0:	f000 f930 	bl	8002304 <MX_GPIO_Init_USART>
		MX_USART2_UART_Init();
 80020a4:	f000 f958 	bl	8002358 <MX_USART2_UART_Init>
    	SPI1_Init();
 80020a8:	f7ff fc9e 	bl	80019e8 <SPI1_Init>
    	LoRa_Init();
 80020ac:	f7ff fbbe 	bl	800182c <LoRa_Init>
    	uint8_t pack[] = "Snow-weAR";
 80020b0:	4a13      	ldr	r2, [pc, #76]	; (8002100 <main+0x7c>)
 80020b2:	ab01      	add	r3, sp, #4
 80020b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b6:	c303      	stmia	r3!, {r0, r1}
 80020b8:	801a      	strh	r2, [r3, #0]
    	loraTransmitCopy(pack, 9);
 80020ba:	2109      	movs	r1, #9
 80020bc:	a801      	add	r0, sp, #4
 80020be:	f7ff fc22 	bl	8001906 <loraTransmitCopy>
		state = 1;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <main+0x80>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
		ssd1306_Init();
 80020c8:	f7ff f8d4 	bl	8001274 <ssd1306_Init>
		 HAL_NVIC_SetPriority(RXDone_EXTI_IRQn, 2, 2);
 80020cc:	2202      	movs	r2, #2
 80020ce:	4611      	mov	r1, r2
 80020d0:	2008      	movs	r0, #8
 80020d2:	f000 fa19 	bl	8002508 <HAL_NVIC_SetPriority>
		 HAL_NVIC_EnableIRQ(RXDone_EXTI_IRQn);
 80020d6:	2008      	movs	r0, #8
 80020d8:	f000 fa4a 	bl	8002570 <HAL_NVIC_EnableIRQ>
		loraReceiveModeInit();
 80020dc:	f7ff fc41 	bl	8001962 <loraReceiveModeInit>
 80020e0:	e005      	b.n	80020ee <main+0x6a>
				displayHomeScreen();
 80020e2:	f7ff fe4b 	bl	8001d7c <displayHomeScreen>
				state = -1;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <main+0x80>)
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	601a      	str	r2, [r3, #0]
			if(state == 1) {
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <main+0x80>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d0f5      	beq.n	80020e2 <main+0x5e>
			}else if(state == 2) {
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d1f9      	bne.n	80020ee <main+0x6a>
				session();
 80020fa:	f7ff fe75 	bl	8001de8 <session>
 80020fe:	e7f6      	b.n	80020ee <main+0x6a>
 8002100:	0800b71c 	.word	0x0800b71c
 8002104:	20000cf4 	.word	0x20000cf4

08002108 <Error_Handler>:

void Error_Handler(void) { }
 8002108:	4770      	bx	lr
	...

0800210c <HAL_MspInit>:

/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void) {
 800210c:	b082      	sub	sp, #8

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_MspInit+0x2c>)
 8002110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	661a      	str	r2, [r3, #96]	; 0x60
 8002118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211a:	f002 0201 	and.w	r2, r2, #1
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002124:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002128:	659a      	str	r2, [r3, #88]	; 0x58
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	9b01      	ldr	r3, [sp, #4]

}
 8002134:	b002      	add	sp, #8
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c) {
 800213c:	b510      	push	{r4, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	2300      	movs	r3, #0
 8002142:	9307      	str	r3, [sp, #28]
 8002144:	9308      	str	r3, [sp, #32]
 8002146:	9309      	str	r3, [sp, #36]	; 0x24
 8002148:	930a      	str	r3, [sp, #40]	; 0x28
 800214a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1) {
 800214c:	6803      	ldr	r3, [r0, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_I2C_MspInit+0xf4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_I2C_MspInit+0x28>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
  }
  else if(hi2c->Instance==I2C2) {
 8002154:	4a37      	ldr	r2, [pc, #220]	; (8002234 <HAL_I2C_MspInit+0xf8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d026      	beq.n	80021a8 <HAL_I2C_MspInit+0x6c>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  }
  else if(hi2c->Instance==I2C3) {
 800215a:	4a37      	ldr	r2, [pc, #220]	; (8002238 <HAL_I2C_MspInit+0xfc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d046      	beq.n	80021ee <HAL_I2C_MspInit+0xb2>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    __HAL_RCC_I2C3_CLK_ENABLE();
  }
}
 8002160:	b00c      	add	sp, #48	; 0x30
 8002162:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4c35      	ldr	r4, [pc, #212]	; (800223c <HAL_I2C_MspInit+0x100>)
 8002166:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800216e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217c:	2312      	movs	r3, #18
 800217e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002180:	2301      	movs	r3, #1
 8002182:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002188:	2304      	movs	r3, #4
 800218a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	a907      	add	r1, sp, #28
 800218e:	482c      	ldr	r0, [pc, #176]	; (8002240 <HAL_I2C_MspInit+0x104>)
 8002190:	f000 fa12 	bl	80025b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800219a:	65a3      	str	r3, [r4, #88]	; 0x58
 800219c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800219e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	9b02      	ldr	r3, [sp, #8]
 80021a6:	e7db      	b.n	8002160 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4c24      	ldr	r4, [pc, #144]	; (800223c <HAL_I2C_MspInit+0x100>)
 80021aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80021b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	9303      	str	r3, [sp, #12]
 80021ba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c2:	2312      	movs	r3, #18
 80021c4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021ce:	2304      	movs	r3, #4
 80021d0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	a907      	add	r1, sp, #28
 80021d4:	481a      	ldr	r0, [pc, #104]	; (8002240 <HAL_I2C_MspInit+0x104>)
 80021d6:	f000 f9ef 	bl	80025b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80021e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	9304      	str	r3, [sp, #16]
 80021ea:	9b04      	ldr	r3, [sp, #16]
 80021ec:	e7b8      	b.n	8002160 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	4c13      	ldr	r4, [pc, #76]	; (800223c <HAL_I2C_MspInit+0x100>)
 80021f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80021f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	9305      	str	r3, [sp, #20]
 8002200:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002202:	2303      	movs	r3, #3
 8002204:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002206:	2212      	movs	r2, #18
 8002208:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220a:	2201      	movs	r2, #1
 800220c:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002210:	2304      	movs	r3, #4
 8002212:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	a907      	add	r1, sp, #28
 8002216:	480b      	ldr	r0, [pc, #44]	; (8002244 <HAL_I2C_MspInit+0x108>)
 8002218:	f000 f9ce 	bl	80025b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800221c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800221e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002222:	65a3      	str	r3, [r4, #88]	; 0x58
 8002224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800222a:	9306      	str	r3, [sp, #24]
 800222c:	9b06      	ldr	r3, [sp, #24]
}
 800222e:	e797      	b.n	8002160 <HAL_I2C_MspInit+0x24>
 8002230:	40005400 	.word	0x40005400
 8002234:	40005800 	.word	0x40005800
 8002238:	40005c00 	.word	0x40005c00
 800223c:	40021000 	.word	0x40021000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800

08002248 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002248:	4770      	bx	lr

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	e7fe      	b.n	800224a <HardFault_Handler>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	e7fe      	b.n	800224c <MemManage_Handler>

0800224e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224e:	e7fe      	b.n	800224e <BusFault_Handler>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler>

08002252 <SVC_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

void SVC_Handler(void) { }
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

void DebugMon_Handler(void) { }
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

void PendSV_Handler(void) { }
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

void SysTick_Handler(void) {
 8002258:	b508      	push	{r3, lr}
  HAL_IncTick();
 800225a:	f000 f91d 	bl	8002498 <HAL_IncTick>
}
 800225e:	bd08      	pop	{r3, pc}

08002260 <EXTI1_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void EXTI1_IRQHandler(void) {
 8002260:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002262:	2002      	movs	r0, #2
 8002264:	f000 fa98 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
}
 8002268:	bd08      	pop	{r3, pc}

0800226a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800226a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800226c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002270:	f000 fa92 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
}
 8002274:	bd08      	pop	{r3, pc}

08002276 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002276:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002278:	2004      	movs	r0, #4
 800227a:	f000 fa8d 	bl	8002798 <HAL_GPIO_EXTI_IRQHandler>
}
 800227e:	bd08      	pop	{r3, pc}

08002280 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002280:	b508      	push	{r3, lr}
 8002282:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <_sbrk+0x34>)
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	b142      	cbz	r2, 800229c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <_sbrk+0x34>)
 800228c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800228e:	4403      	add	r3, r0
 8002290:	466a      	mov	r2, sp
 8002292:	4293      	cmp	r3, r2
 8002294:	d806      	bhi.n	80022a4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <_sbrk+0x34>)
 8002298:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800229a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800229c:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x34>)
 800229e:	4906      	ldr	r1, [pc, #24]	; (80022b8 <_sbrk+0x38>)
 80022a0:	6011      	str	r1, [r2, #0]
 80022a2:	e7f2      	b.n	800228a <_sbrk+0xa>
		errno = ENOMEM;
 80022a4:	f002 f986 	bl	80045b4 <__errno>
 80022a8:	230c      	movs	r3, #12
 80022aa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b0:	e7f3      	b.n	800229a <_sbrk+0x1a>
 80022b2:	bf00      	nop
 80022b4:	200009c0 	.word	0x200009c0
 80022b8:	20000d80 	.word	0x20000d80

080022bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022bc:	490f      	ldr	r1, [pc, #60]	; (80022fc <SystemInit+0x40>)
 80022be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <SystemInit+0x44>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022d4:	2000      	movs	r0, #0
 80022d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80022de:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80022e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022f2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022f8:	608b      	str	r3, [r1, #8]
#endif
}
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	40021000 	.word	0x40021000

08002304 <MX_GPIO_Init_USART>:
#include "../Inc/GPS/usart.h"

UART_HandleTypeDef huart2;

void MX_GPIO_Init_USART(void) {
 8002304:	b500      	push	{lr}
 8002306:	b089      	sub	sp, #36	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <MX_GPIO_Init_USART+0x50>)
 800230a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	64da      	str	r2, [r3, #76]	; 0x4c
 8002312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002314:	f002 0201 	and.w	r2, r2, #1
 8002318:	9201      	str	r2, [sp, #4]
 800231a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800231e:	f042 0202 	orr.w	r2, r2, #2
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	9b02      	ldr	r3, [sp, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	2300      	movs	r3, #0
 8002330:	9307      	str	r3, [sp, #28]

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002332:	230c      	movs	r3, #12
 8002334:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002342:	a903      	add	r1, sp, #12
 8002344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002348:	f000 f936 	bl	80025b8 <HAL_GPIO_Init>

}
 800234c:	b009      	add	sp, #36	; 0x24
 800234e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void) {
 8002358:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 800235a:	480f      	ldr	r0, [pc, #60]	; (8002398 <MX_USART2_UART_Init+0x40>)
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_USART2_UART_Init+0x44>)
 800235e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 9600;
 8002360:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002364:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	2300      	movs	r3, #0
 8002368:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800236a:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800236c:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_RX;
 800236e:	2204      	movs	r2, #4
 8002370:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002376:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002378:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800237a:	f002 f8c0 	bl	80044fe <HAL_UART_Init>
 800237e:	b940      	cbnz	r0, 8002392 <MX_USART2_UART_Init+0x3a>
    {
	  Error_Handler();
    }
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	4611      	mov	r1, r2
 8002384:	2026      	movs	r0, #38	; 0x26
 8002386:	f000 f8bf 	bl	8002508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238a:	2026      	movs	r0, #38	; 0x26
 800238c:	f000 f8f0 	bl	8002570 <HAL_NVIC_EnableIRQ>

}
 8002390:	bd08      	pop	{r3, pc}
	  Error_Handler();
 8002392:	f7ff feb9 	bl	8002108 <Error_Handler>
 8002396:	e7f3      	b.n	8002380 <MX_USART2_UART_Init+0x28>
 8002398:	20000cf8 	.word	0x20000cf8
 800239c:	40004400 	.word	0x40004400

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b500      	push	{lr}
 80023a2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	2300      	movs	r3, #0
 80023a6:	9303      	str	r3, [sp, #12]
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	9306      	str	r3, [sp, #24]
 80023ae:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80023b0:	6802      	ldr	r2, [r0, #0]
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_UART_MspInit+0x84>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d002      	beq.n	80023be <HAL_UART_MspInit+0x1e>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }
}
 80023b8:	b009      	add	sp, #36	; 0x24
 80023ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80023be:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80023c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58
 80023ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023d0:	9200      	str	r2, [sp, #0]
 80023d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c
 80023dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023de:	f002 0201 	and.w	r2, r2, #1
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e8:	f042 0202 	orr.w	r2, r2, #2
 80023ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f8:	230c      	movs	r3, #12
 80023fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002400:	2301      	movs	r3, #1
 8002402:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002408:	2307      	movs	r3, #7
 800240a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	a903      	add	r1, sp, #12
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f000 f8d1 	bl	80025b8 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_UART_MspInit+0x88>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6013      	str	r3, [r2, #0]
}
 8002422:	e7c9      	b.n	80023b8 <HAL_UART_MspInit+0x18>
 8002424:	40004400 	.word	0x40004400
 8002428:	20000cf8 	.word	0x20000cf8

0800242c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_InitTick+0x44>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b90b      	cbnz	r3, 8002436 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002432:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002434:	4770      	bx	lr
{
 8002436:	b510      	push	{r4, lr}
 8002438:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800243a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_InitTick+0x48>)
 8002444:	6810      	ldr	r0, [r2, #0]
 8002446:	fbb0 f0f3 	udiv	r0, r0, r3
 800244a:	f000 f89f 	bl	800258c <HAL_SYSTICK_Config>
 800244e:	b968      	cbnz	r0, 800246c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002450:	2c0f      	cmp	r4, #15
 8002452:	d901      	bls.n	8002458 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e00a      	b.n	800246e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	4621      	mov	r1, r4
 800245c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002460:	f000 f852 	bl	8002508 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_InitTick+0x44>)
 8002466:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002468:	2000      	movs	r0, #0
 800246a:	e000      	b.n	800246e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800246c:	2001      	movs	r0, #1
}
 800246e:	bd10      	pop	{r4, pc}
 8002470:	20000024 	.word	0x20000024
 8002474:	20000020 	.word	0x20000020

08002478 <HAL_Init>:
{
 8002478:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247a:	2003      	movs	r0, #3
 800247c:	f000 f832 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff ffd3 	bl	800242c <HAL_InitTick>
 8002486:	b110      	cbz	r0, 800248e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002488:	2401      	movs	r4, #1
}
 800248a:	4620      	mov	r0, r4
 800248c:	bd10      	pop	{r4, pc}
 800248e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002490:	f7ff fe3c 	bl	800210c <HAL_MspInit>
 8002494:	e7f9      	b.n	800248a <HAL_Init+0x12>
	...

08002498 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_IncTick+0x10>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4a03      	ldr	r2, [pc, #12]	; (80024ac <HAL_IncTick+0x14>)
 800249e:	6811      	ldr	r1, [r2, #0]
 80024a0:	440b      	add	r3, r1
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000024 	.word	0x20000024
 80024ac:	20000d78 	.word	0x20000d78

080024b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <HAL_GetTick+0x8>)
 80024b2:	6818      	ldr	r0, [r3, #0]
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000d78 	.word	0x20000d78

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff fff6 	bl	80024b0 <HAL_GetTick>
 80024c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80024ca:	d002      	beq.n	80024d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <HAL_Delay+0x24>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d2:	f7ff ffed 	bl	80024b0 <HAL_GetTick>
 80024d6:	1b40      	subs	r0, r0, r5
 80024d8:	42a0      	cmp	r0, r4
 80024da:	d3fa      	bcc.n	80024d2 <HAL_Delay+0x16>
  {
  }
}
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	20000024 	.word	0x20000024

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80024e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	0200      	lsls	r0, r0, #8
 80024f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80024f8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80024fc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002500:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_NVIC_SetPriority+0x60>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002512:	f1c3 0407 	rsb	r4, r3, #7
 8002516:	2c04      	cmp	r4, #4
 8002518:	bf28      	it	cs
 800251a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251c:	1d1d      	adds	r5, r3, #4
 800251e:	2d06      	cmp	r5, #6
 8002520:	d918      	bls.n	8002554 <HAL_NVIC_SetPriority+0x4c>
 8002522:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002528:	fa05 f404 	lsl.w	r4, r5, r4
 800252c:	ea21 0104 	bic.w	r1, r1, r4
 8002530:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002532:	fa05 f303 	lsl.w	r3, r5, r3
 8002536:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800253c:	2800      	cmp	r0, #0
 800253e:	db0b      	blt.n	8002558 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	0109      	lsls	r1, r1, #4
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002548:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800254c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002550:	bc30      	pop	{r4, r5}
 8002552:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002554:	2300      	movs	r3, #0
 8002556:	e7e5      	b.n	8002524 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	f000 000f 	and.w	r0, r0, #15
 800255c:	0109      	lsls	r1, r1, #4
 800255e:	b2c9      	uxtb	r1, r1
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_NVIC_SetPriority+0x64>)
 8002562:	5419      	strb	r1, [r3, r0]
 8002564:	e7f4      	b.n	8002550 <HAL_NVIC_SetPriority+0x48>
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	e000ed14 	.word	0xe000ed14

08002570 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002570:	2800      	cmp	r0, #0
 8002572:	db07      	blt.n	8002584 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002574:	f000 021f 	and.w	r2, r0, #31
 8002578:	0940      	lsrs	r0, r0, #5
 800257a:	2301      	movs	r3, #1
 800257c:	4093      	lsls	r3, r2
 800257e:	4a02      	ldr	r2, [pc, #8]	; (8002588 <HAL_NVIC_EnableIRQ+0x18>)
 8002580:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	3801      	subs	r0, #1
 800258e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002592:	d20a      	bcs.n	80025aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_SYSTICK_Config+0x24>)
 8002596:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_SYSTICK_Config+0x28>)
 800259a:	21f0      	movs	r1, #240	; 0xf0
 800259c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	2000      	movs	r0, #0
 80025a2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80025bc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e03f      	b.n	8002640 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025c0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025c2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025c6:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 80025ca:	409c      	lsls	r4, r3
 80025cc:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 80025ce:	62c4      	str	r4, [r0, #44]	; 0x2c
 80025d0:	e05f      	b.n	8002692 <HAL_GPIO_Init+0xda>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d2:	2406      	movs	r4, #6
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 80025d6:	2400      	movs	r4, #0
 80025d8:	40b4      	lsls	r4, r6
 80025da:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025dc:	3502      	adds	r5, #2
 80025de:	4e64      	ldr	r6, [pc, #400]	; (8002770 <HAL_GPIO_Init+0x1b8>)
 80025e0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025e4:	4c63      	ldr	r4, [pc, #396]	; (8002774 <HAL_GPIO_Init+0x1bc>)
 80025e6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80025e8:	43d4      	mvns	r4, r2
 80025ea:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	684f      	ldr	r7, [r1, #4]
 80025f0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80025f4:	d001      	beq.n	80025fa <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 80025f6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80025fa:	4d5e      	ldr	r5, [pc, #376]	; (8002774 <HAL_GPIO_Init+0x1bc>)
 80025fc:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80025fe:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002600:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	684f      	ldr	r7, [r1, #4]
 8002606:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800260a:	d001      	beq.n	8002610 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 800260c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002610:	4d58      	ldr	r5, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x1bc>)
 8002612:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002614:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002616:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261a:	684f      	ldr	r7, [r1, #4]
 800261c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002620:	d001      	beq.n	8002626 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8002622:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002626:	4d53      	ldr	r5, [pc, #332]	; (8002774 <HAL_GPIO_Init+0x1bc>)
 8002628:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800262a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800262c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262e:	684e      	ldr	r6, [r1, #4]
 8002630:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002634:	d001      	beq.n	800263a <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8002636:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800263a:	4a4e      	ldr	r2, [pc, #312]	; (8002774 <HAL_GPIO_Init+0x1bc>)
 800263c:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800263e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002640:	680a      	ldr	r2, [r1, #0]
 8002642:	fa32 f403 	lsrs.w	r4, r2, r3
 8002646:	f000 8091 	beq.w	800276c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800264a:	2401      	movs	r4, #1
 800264c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800264e:	4022      	ands	r2, r4
 8002650:	d0f5      	beq.n	800263e <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002652:	684d      	ldr	r5, [r1, #4]
 8002654:	1e6e      	subs	r6, r5, #1
 8002656:	2e01      	cmp	r6, #1
 8002658:	d903      	bls.n	8002662 <HAL_GPIO_Init+0xaa>
 800265a:	2d11      	cmp	r5, #17
 800265c:	d001      	beq.n	8002662 <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265e:	2d12      	cmp	r5, #18
 8002660:	d112      	bne.n	8002688 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8002662:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002664:	005f      	lsls	r7, r3, #1
 8002666:	2503      	movs	r5, #3
 8002668:	40bd      	lsls	r5, r7
 800266a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800266e:	68cd      	ldr	r5, [r1, #12]
 8002670:	40bd      	lsls	r5, r7
 8002672:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002674:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002676:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002678:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800267c:	684d      	ldr	r5, [r1, #4]
 800267e:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8002682:	409d      	lsls	r5, r3
 8002684:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002686:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002688:	684d      	ldr	r5, [r1, #4]
 800268a:	f005 0603 	and.w	r6, r5, #3
 800268e:	2e03      	cmp	r6, #3
 8002690:	d096      	beq.n	80025c0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8002692:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002694:	005f      	lsls	r7, r3, #1
 8002696:	2403      	movs	r4, #3
 8002698:	40bc      	lsls	r4, r7
 800269a:	43e4      	mvns	r4, r4
 800269c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800269e:	688e      	ldr	r6, [r1, #8]
 80026a0:	40be      	lsls	r6, r7
 80026a2:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 80026a4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a6:	684d      	ldr	r5, [r1, #4]
 80026a8:	2d02      	cmp	r5, #2
 80026aa:	d001      	beq.n	80026b0 <HAL_GPIO_Init+0xf8>
 80026ac:	2d12      	cmp	r5, #18
 80026ae:	d113      	bne.n	80026d8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3u];
 80026b0:	08de      	lsrs	r6, r3, #3
 80026b2:	3608      	adds	r6, #8
 80026b4:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	f003 0507 	and.w	r5, r3, #7
 80026bc:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80026c0:	250f      	movs	r5, #15
 80026c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80026c6:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ca:	690d      	ldr	r5, [r1, #16]
 80026cc:	fa05 f50c 	lsl.w	r5, r5, ip
 80026d0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80026d4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80026d8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026da:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026dc:	684d      	ldr	r5, [r1, #4]
 80026de:	f005 0503 	and.w	r5, r5, #3
 80026e2:	40bd      	lsls	r5, r7
 80026e4:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80026e6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e8:	684c      	ldr	r4, [r1, #4]
 80026ea:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80026ee:	d0a6      	beq.n	800263e <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f0:	4c21      	ldr	r4, [pc, #132]	; (8002778 <HAL_GPIO_Init+0x1c0>)
 80026f2:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80026f4:	f045 0501 	orr.w	r5, r5, #1
 80026f8:	6625      	str	r5, [r4, #96]	; 0x60
 80026fa:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80026fc:	f004 0401 	and.w	r4, r4, #1
 8002700:	9401      	str	r4, [sp, #4]
 8002702:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002704:	089d      	lsrs	r5, r3, #2
 8002706:	1cae      	adds	r6, r5, #2
 8002708:	4c19      	ldr	r4, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x1b8>)
 800270a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800270e:	f003 0403 	and.w	r4, r3, #3
 8002712:	00a6      	lsls	r6, r4, #2
 8002714:	240f      	movs	r4, #15
 8002716:	40b4      	lsls	r4, r6
 8002718:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800271c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002720:	f43f af59 	beq.w	80025d6 <HAL_GPIO_Init+0x1e>
 8002724:	4c15      	ldr	r4, [pc, #84]	; (800277c <HAL_GPIO_Init+0x1c4>)
 8002726:	42a0      	cmp	r0, r4
 8002728:	d016      	beq.n	8002758 <HAL_GPIO_Init+0x1a0>
 800272a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800272e:	42a0      	cmp	r0, r4
 8002730:	d014      	beq.n	800275c <HAL_GPIO_Init+0x1a4>
 8002732:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002736:	42a0      	cmp	r0, r4
 8002738:	d012      	beq.n	8002760 <HAL_GPIO_Init+0x1a8>
 800273a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800273e:	42a0      	cmp	r0, r4
 8002740:	d010      	beq.n	8002764 <HAL_GPIO_Init+0x1ac>
 8002742:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002746:	42a0      	cmp	r0, r4
 8002748:	d00e      	beq.n	8002768 <HAL_GPIO_Init+0x1b0>
 800274a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800274e:	42a0      	cmp	r0, r4
 8002750:	f43f af3f 	beq.w	80025d2 <HAL_GPIO_Init+0x1a>
 8002754:	2407      	movs	r4, #7
 8002756:	e73f      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 8002758:	2401      	movs	r4, #1
 800275a:	e73d      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 800275c:	2402      	movs	r4, #2
 800275e:	e73b      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 8002760:	2403      	movs	r4, #3
 8002762:	e739      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 8002764:	2404      	movs	r4, #4
 8002766:	e737      	b.n	80025d8 <HAL_GPIO_Init+0x20>
 8002768:	2405      	movs	r4, #5
 800276a:	e735      	b.n	80025d8 <HAL_GPIO_Init+0x20>
  }
}
 800276c:	b003      	add	sp, #12
 800276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400
 8002778:	40021000 	.word	0x40021000
 800277c:	48000400 	.word	0x48000400

08002780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002780:	6903      	ldr	r3, [r0, #16]
 8002782:	4219      	tst	r1, r3
 8002784:	d101      	bne.n	800278a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002786:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002788:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800278a:	2001      	movs	r0, #1
 800278c:	4770      	bx	lr

0800278e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278e:	b90a      	cbnz	r2, 8002794 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002790:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002792:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002794:	6181      	str	r1, [r0, #24]
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002798:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4203      	tst	r3, r0
 80027a0:	d100      	bne.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80027a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80027a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a8:	f7ff fbda 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
}
 80027ac:	e7f9      	b.n	80027a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80027ae:	bf00      	nop
 80027b0:	40010400 	.word	0x40010400

080027b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027b4:	6803      	ldr	r3, [r0, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	f012 0f02 	tst.w	r2, #2
 80027bc:	d001      	beq.n	80027c2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c2:	6803      	ldr	r3, [r0, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	f012 0f01 	tst.w	r2, #1
 80027ca:	d103      	bne.n	80027d4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	619a      	str	r2, [r3, #24]
  }
}
 80027d4:	4770      	bx	lr

080027d6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027d6:	b470      	push	{r4, r5, r6}
 80027d8:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80027da:	6805      	ldr	r5, [r0, #0]
 80027dc:	6868      	ldr	r0, [r5, #4]
 80027de:	0d74      	lsrs	r4, r6, #21
 80027e0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80027e4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80027e8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80027ec:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80027f0:	f044 0403 	orr.w	r4, r4, #3
 80027f4:	ea20 0004 	bic.w	r0, r0, r4
 80027f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80027fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002800:	4319      	orrs	r1, r3
 8002802:	4331      	orrs	r1, r6
 8002804:	4301      	orrs	r1, r0
 8002806:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002808:	bc70      	pop	{r4, r5, r6}
 800280a:	4770      	bx	lr

0800280c <I2C_IsAcknowledgeFailed>:
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002814:	6803      	ldr	r3, [r0, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f013 0f10 	tst.w	r3, #16
 800281c:	d01c      	beq.n	8002858 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	f012 0f20 	tst.w	r2, #32
 8002826:	d119      	bne.n	800285c <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002828:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800282c:	d0f7      	beq.n	800281e <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff fe3f 	bl	80024b0 <HAL_GetTick>
 8002832:	1b80      	subs	r0, r0, r6
 8002834:	42a8      	cmp	r0, r5
 8002836:	d801      	bhi.n	800283c <I2C_IsAcknowledgeFailed+0x30>
 8002838:	2d00      	cmp	r5, #0
 800283a:	d1f0      	bne.n	800281e <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002844:	2320      	movs	r3, #32
 8002846:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	2300      	movs	r3, #0
 800284c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002850:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002854:	2001      	movs	r0, #1
 8002856:	e020      	b.n	800289a <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	e01e      	b.n	800289a <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	2210      	movs	r2, #16
 800285e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	2520      	movs	r5, #32
 8002864:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ffa4 	bl	80027b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	6853      	ldr	r3, [r2, #4]
 8002870:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002874:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002878:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002882:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002894:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002898:	2001      	movs	r0, #1
}
 800289a:	bd70      	pop	{r4, r5, r6, pc}

0800289c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4604      	mov	r4, r0
 80028a0:	460d      	mov	r5, r1
 80028a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f013 0f02 	tst.w	r3, #2
 80028ac:	d11d      	bne.n	80028ea <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ae:	4632      	mov	r2, r6
 80028b0:	4629      	mov	r1, r5
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff ffaa 	bl	800280c <I2C_IsAcknowledgeFailed>
 80028b8:	b9c8      	cbnz	r0, 80028ee <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80028ba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80028be:	d0f1      	beq.n	80028a4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7ff fdf6 	bl	80024b0 <HAL_GetTick>
 80028c4:	1b80      	subs	r0, r0, r6
 80028c6:	42a8      	cmp	r0, r5
 80028c8:	d801      	bhi.n	80028ce <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80028ca:	2d00      	cmp	r5, #0
 80028cc:	d1ea      	bne.n	80028a4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	2320      	movs	r3, #32
 80028d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80028e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
 80028e8:	e000      	b.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
}
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e7fc      	b.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080028f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80028f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f4:	4605      	mov	r5, r0
 80028f6:	460f      	mov	r7, r1
 80028f8:	4616      	mov	r6, r2
 80028fa:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	ea37 0303 	bics.w	r3, r7, r3
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	42b3      	cmp	r3, r6
 800290c:	d118      	bne.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800290e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002912:	d0f3      	beq.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7ff fdcc 	bl	80024b0 <HAL_GetTick>
 8002918:	9b06      	ldr	r3, [sp, #24]
 800291a:	1ac0      	subs	r0, r0, r3
 800291c:	42a0      	cmp	r0, r4
 800291e:	d801      	bhi.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002920:	2c00      	cmp	r4, #0
 8002922:	d1eb      	bne.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002924:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002926:	f043 0320 	orr.w	r3, r3, #32
 800292a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292c:	2320      	movs	r3, #32
 800292e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002938:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
 800293e:	e000      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002940:	2000      	movs	r0, #0
}
 8002942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002944 <I2C_RequestMemoryWrite>:
{
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	4604      	mov	r4, r0
 800294a:	4616      	mov	r6, r2
 800294c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <I2C_RequestMemoryWrite+0x6c>)
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002956:	b2ea      	uxtb	r2, r5
 8002958:	f7ff ff3d 	bl	80027d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800295c:	9a07      	ldr	r2, [sp, #28]
 800295e:	9906      	ldr	r1, [sp, #24]
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ff9b 	bl	800289c <I2C_WaitOnTXISFlagUntilTimeout>
 8002966:	b9e8      	cbnz	r0, 80029a4 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002968:	2d01      	cmp	r5, #1
 800296a:	d10e      	bne.n	800298a <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	b2f6      	uxtb	r6, r6
 8002970:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002972:	9b07      	ldr	r3, [sp, #28]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	9b06      	ldr	r3, [sp, #24]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ffb8 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	b178      	cbz	r0, 80029a6 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00d      	b.n	80029a6 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	0a32      	lsrs	r2, r6, #8
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002990:	9a07      	ldr	r2, [sp, #28]
 8002992:	9906      	ldr	r1, [sp, #24]
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff ff81 	bl	800289c <I2C_WaitOnTXISFlagUntilTimeout>
 800299a:	b938      	cbnz	r0, 80029ac <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	b2f6      	uxtb	r6, r6
 80029a0:	629e      	str	r6, [r3, #40]	; 0x28
 80029a2:	e7e6      	b.n	8002972 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	b002      	add	sp, #8
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e7fa      	b.n	80029a6 <I2C_RequestMemoryWrite+0x62>
 80029b0:	80002000 	.word	0x80002000

080029b4 <I2C_RequestMemoryRead>:
{
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	4604      	mov	r4, r0
 80029ba:	4616      	mov	r6, r2
 80029bc:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <I2C_RequestMemoryRead+0x6c>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	b2ea      	uxtb	r2, r5
 80029c6:	f7ff ff06 	bl	80027d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	9a07      	ldr	r2, [sp, #28]
 80029cc:	9906      	ldr	r1, [sp, #24]
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7ff ff64 	bl	800289c <I2C_WaitOnTXISFlagUntilTimeout>
 80029d4:	b9e8      	cbnz	r0, 8002a12 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d6:	2d01      	cmp	r5, #1
 80029d8:	d10e      	bne.n	80029f8 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	b2f6      	uxtb	r6, r6
 80029de:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	9b07      	ldr	r3, [sp, #28]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	9b06      	ldr	r3, [sp, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7ff ff81 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b178      	cbz	r0, 8002a14 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e00d      	b.n	8002a14 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	0a32      	lsrs	r2, r6, #8
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	9a07      	ldr	r2, [sp, #28]
 8002a00:	9906      	ldr	r1, [sp, #24]
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff ff4a 	bl	800289c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a08:	b938      	cbnz	r0, 8002a1a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	b2f6      	uxtb	r6, r6
 8002a0e:	629e      	str	r6, [r3, #40]	; 0x28
 8002a10:	e7e6      	b.n	80029e0 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	b002      	add	sp, #8
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e7fa      	b.n	8002a14 <I2C_RequestMemoryRead+0x60>
 8002a1e:	bf00      	nop
 8002a20:	80002000 	.word	0x80002000

08002a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4605      	mov	r5, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f013 0f20 	tst.w	r3, #32
 8002a34:	d11a      	bne.n	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a36:	4632      	mov	r2, r6
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7ff fee6 	bl	800280c <I2C_IsAcknowledgeFailed>
 8002a40:	b9b0      	cbnz	r0, 8002a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff fd35 	bl	80024b0 <HAL_GetTick>
 8002a46:	1b80      	subs	r0, r0, r6
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	d801      	bhi.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002a4c:	2c00      	cmp	r4, #0
 8002a4e:	d1ed      	bne.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002a52:	f043 0320 	orr.w	r3, r3, #32
 8002a56:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a64:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
}
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	e7fc      	b.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002a70:	2001      	movs	r0, #1
 8002a72:	e7fa      	b.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002a74 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d059      	beq.n	8002b2c <HAL_I2C_Init+0xb8>
{
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d043      	beq.n	8002b0c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a84:	2324      	movs	r3, #36	; 0x24
 8002a86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a94:	6863      	ldr	r3, [r4, #4]
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002a9c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	6893      	ldr	r3, [r2, #8]
 8002aa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aa6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa8:	68e3      	ldr	r3, [r4, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d033      	beq.n	8002b16 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aae:	68a3      	ldr	r3, [r4, #8]
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002ab6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab8:	68e3      	ldr	r3, [r4, #12]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d031      	beq.n	8002b22 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	6853      	ldr	r3, [r2, #4]
 8002ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	68d3      	ldr	r3, [r2, #12]
 8002ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ad4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	6962      	ldr	r2, [r4, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	69a1      	ldr	r1, [r4, #24]
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ae4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ae6:	69e3      	ldr	r3, [r4, #28]
 8002ae8:	6a21      	ldr	r1, [r4, #32]
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	6813      	ldr	r3, [r2, #0]
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afa:	2000      	movs	r0, #0
 8002afc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	2320      	movs	r3, #32
 8002b00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b04:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002b0a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002b0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002b10:	f7ff fb14 	bl	800213c <HAL_I2C_MspInit>
 8002b14:	e7b6      	b.n	8002a84 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b16:	68a3      	ldr	r3, [r4, #8]
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	e7ca      	b.n	8002ab8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e7c8      	b.n	8002abe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_I2C_Mem_Write>:
{
 8002b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002b3e:	b2ed      	uxtb	r5, r5
 8002b40:	2d20      	cmp	r5, #32
 8002b42:	f040 80ba 	bne.w	8002cba <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 8002b46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002b48:	b1dc      	cbz	r4, 8002b82 <HAL_I2C_Mem_Write+0x52>
 8002b4a:	b1d7      	cbz	r7, 8002b82 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8002b4c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002b50:	2c01      	cmp	r4, #1
 8002b52:	f000 80b7 	beq.w	8002cc4 <HAL_I2C_Mem_Write+0x194>
 8002b56:	4698      	mov	r8, r3
 8002b58:	4691      	mov	r9, r2
 8002b5a:	460d      	mov	r5, r1
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	f04f 0a01 	mov.w	sl, #1
 8002b62:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002b66:	f7ff fca3 	bl	80024b0 <HAL_GetTick>
 8002b6a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6c:	9000      	str	r0, [sp, #0]
 8002b6e:	2319      	movs	r3, #25
 8002b70:	4652      	mov	r2, sl
 8002b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff febb 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	b130      	cbz	r0, 8002b8c <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e09c      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b86:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e097      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b8c:	2321      	movs	r3, #33	; 0x21
 8002b8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b92:	2340      	movs	r3, #64	; 0x40
 8002b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b9e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ba0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba2:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba4:	9601      	str	r6, [sp, #4]
 8002ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4643      	mov	r3, r8
 8002bac:	464a      	mov	r2, r9
 8002bae:	4629      	mov	r1, r5
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fec7 	bl	8002944 <I2C_RequestMemoryWrite>
 8002bb6:	b970      	cbnz	r0, 8002bd6 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2bff      	cmp	r3, #255	; 0xff
 8002bbe:	d90f      	bls.n	8002be0 <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff fe01 	bl	80027d6 <I2C_TransferConfig>
 8002bd4:	e021      	b.n	8002c1a <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002bdc:	4653      	mov	r3, sl
 8002bde:	e06d      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 8002be0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002be2:	b292      	uxth	r2, r2
 8002be4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002be6:	2300      	movs	r3, #0
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fdef 	bl	80027d6 <I2C_TransferConfig>
 8002bf8:	e00f      	b.n	8002c1a <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8002bfa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c00:	2300      	movs	r3, #0
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff fde2 	bl	80027d6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d032      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1a:	4632      	mov	r2, r6
 8002c1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff fe3c 	bl	800289c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d14f      	bne.n	8002cc8 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c32:	3301      	adds	r3, #1
 8002c34:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d0e1      	beq.n	8002c12 <HAL_I2C_Mem_Write+0xe2>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1df      	bne.n	8002c12 <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c52:	9600      	str	r6, [sp, #0]
 8002c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c56:	2200      	movs	r2, #0
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fe49 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	bba0      	cbnz	r0, 8002ccc <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2bff      	cmp	r3, #255	; 0xff
 8002c68:	d9c7      	bls.n	8002bfa <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c76:	4629      	mov	r1, r5
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fdac 	bl	80027d6 <I2C_TransferConfig>
 8002c7e:	e7c8      	b.n	8002c12 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	4632      	mov	r2, r6
 8002c82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff fecd 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	bb00      	cbnz	r0, 8002cd0 <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	2120      	movs	r1, #32
 8002c92:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	6842      	ldr	r2, [r0, #4]
 8002c98:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c9c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ca0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002cb4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	b002      	add	sp, #8
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e7f9      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e7f7      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e7f5      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e7f3      	b.n	8002cbc <HAL_I2C_Mem_Write+0x18c>

08002cd4 <HAL_I2C_Mem_Read>:
{
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002ce2:	b2ed      	uxtb	r5, r5
 8002ce4:	2d20      	cmp	r5, #32
 8002ce6:	f040 80bc 	bne.w	8002e62 <HAL_I2C_Mem_Read+0x18e>
    if ((pData == NULL) || (Size == 0U))
 8002cea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002cec:	b1dc      	cbz	r4, 8002d26 <HAL_I2C_Mem_Read+0x52>
 8002cee:	b1d7      	cbz	r7, 8002d26 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8002cf0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002cf4:	2c01      	cmp	r4, #1
 8002cf6:	f000 80b9 	beq.w	8002e6c <HAL_I2C_Mem_Read+0x198>
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	460d      	mov	r5, r1
 8002d00:	4604      	mov	r4, r0
 8002d02:	f04f 0a01 	mov.w	sl, #1
 8002d06:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002d0a:	f7ff fbd1 	bl	80024b0 <HAL_GetTick>
 8002d0e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d10:	9000      	str	r0, [sp, #0]
 8002d12:	2319      	movs	r3, #25
 8002d14:	4652      	mov	r2, sl
 8002d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff fde9 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	b130      	cbz	r0, 8002d30 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e09e      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e099      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d30:	2322      	movs	r3, #34	; 0x22
 8002d32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d42:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d44:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d46:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d48:	9601      	str	r6, [sp, #4]
 8002d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4643      	mov	r3, r8
 8002d50:	464a      	mov	r2, r9
 8002d52:	4629      	mov	r1, r5
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff fe2d 	bl	80029b4 <I2C_RequestMemoryRead>
 8002d5a:	b970      	cbnz	r0, 8002d7a <HAL_I2C_Mem_Read+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d90f      	bls.n	8002d84 <HAL_I2C_Mem_Read+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d68:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_I2C_Mem_Read+0x1a8>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d70:	4629      	mov	r1, r5
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff fd2f 	bl	80027d6 <I2C_TransferConfig>
 8002d78:	e021      	b.n	8002dbe <HAL_I2C_Mem_Read+0xea>
      __HAL_UNLOCK(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d80:	4653      	mov	r3, sl
 8002d82:	e06f      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8002d84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d86:	b292      	uxth	r2, r2
 8002d88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <HAL_I2C_Mem_Read+0x1a8>)
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	4629      	mov	r1, r5
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff fd1d 	bl	80027d6 <I2C_TransferConfig>
 8002d9c:	e00f      	b.n	8002dbe <HAL_I2C_Mem_Read+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8002d9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002da0:	b292      	uxth	r2, r2
 8002da2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002da4:	2300      	movs	r3, #0
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4629      	mov	r1, r5
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff fd10 	bl	80027d6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d034      	beq.n	8002e28 <HAL_I2C_Mem_Read+0x154>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	9600      	str	r6, [sp, #0]
 8002dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fd93 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d14f      	bne.n	8002e70 <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dda:	3301      	adds	r3, #1
 8002ddc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002dde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002de6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002de8:	3a01      	subs	r2, #1
 8002dea:	b292      	uxth	r2, r2
 8002dec:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002df0:	b292      	uxth	r2, r2
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d0df      	beq.n	8002db6 <HAL_I2C_Mem_Read+0xe2>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1dd      	bne.n	8002db6 <HAL_I2C_Mem_Read+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	9600      	str	r6, [sp, #0]
 8002dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff fd75 	bl	80028f2 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	bba0      	cbnz	r0, 8002e74 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2bff      	cmp	r3, #255	; 0xff
 8002e10:	d9c5      	bls.n	8002d9e <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4620      	mov	r0, r4
 8002e22:	f7ff fcd8 	bl	80027d6 <I2C_TransferConfig>
 8002e26:	e7c6      	b.n	8002db6 <HAL_I2C_Mem_Read+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	4632      	mov	r2, r6
 8002e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff fdf9 	bl	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	bb00      	cbnz	r0, 8002e78 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	2120      	movs	r1, #32
 8002e3a:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	6842      	ldr	r2, [r0, #4]
 8002e40:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002e44:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002e48:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e56:	2200      	movs	r2, #0
 8002e58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002e5c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	b002      	add	sp, #8
 8002e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e7f9      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e7f7      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e7f5      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e7f3      	b.n	8002e64 <HAL_I2C_Mem_Read+0x190>
 8002e7c:	80002400 	.word	0x80002400

08002e80 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d124      	bne.n	8002ed4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d022      	beq.n	8002ed8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002e92:	2301      	movs	r3, #1
 8002e94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	2324      	movs	r3, #36	; 0x24
 8002e9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e9e:	6802      	ldr	r2, [r0, #0]
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ea8:	6802      	ldr	r2, [r0, #0]
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eb2:	6802      	ldr	r2, [r0, #0]
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	4319      	orrs	r1, r3
 8002eb8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eba:	6802      	ldr	r2, [r0, #0]
 8002ebc:	6813      	ldr	r3, [r2, #0]
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002ed8:	2002      	movs	r0, #2
  }
}
 8002eda:	4770      	bx	lr

08002edc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d122      	bne.n	8002f2c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d020      	beq.n	8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	2324      	movs	r3, #36	; 0x24
 8002ef6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002efa:	6802      	ldr	r2, [r0, #0]
 8002efc:	6813      	ldr	r3, [r2, #0]
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f0c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f10:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f12:	6802      	ldr	r2, [r0, #0]
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002f30:	2002      	movs	r0, #2
  }
}
 8002f32:	4770      	bx	lr

08002f34 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_PWREx_GetVoltageRange+0xc>)
 8002f36:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002f38:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40007000 	.word	0x40007000

08002f44 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002f48:	d00f      	beq.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d034      	beq.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f64:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f66:	2000      	movs	r0, #0
 8002f68:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f76:	d022      	beq.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f84:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2332      	movs	r3, #50	; 0x32
 8002f8c:	fb03 f302 	mul.w	r3, r3, r2
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	e000      	b.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002f9c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002fa0:	6952      	ldr	r2, [r2, #20]
 8002fa2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002fa6:	d001      	beq.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x68>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f7      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002fb4:	d101      	bne.n	8002fba <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002fba:	2003      	movs	r0, #3
 8002fbc:	4770      	bx	lr
  return HAL_OK;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	4770      	bx	lr
 8002fc2:	2000      	movs	r0, #0
}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	20000020 	.word	0x20000020
 8002fd0:	431bde83 	.word	0x431bde83

08002fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fd4:	b530      	push	{r4, r5, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002fe2:	d00b      	beq.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fe4:	f7ff ffa6 	bl	8002f34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002fec:	d017      	beq.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	2d80      	cmp	r5, #128	; 0x80
 8002ff0:	d81f      	bhi.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ff2:	d02d      	beq.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ff4:	2d70      	cmp	r5, #112	; 0x70
 8002ff6:	d02d      	beq.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	e01b      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4c17      	ldr	r4, [pc, #92]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	65a3      	str	r3, [r4, #88]	; 0x58
 8003006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003010:	f7ff ff90 	bl	8002f34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	65a3      	str	r3, [r4, #88]	; 0x58
 800301c:	e7e4      	b.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800301e:	2d80      	cmp	r5, #128	; 0x80
 8003020:	d903      	bls.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8003022:	2da0      	cmp	r5, #160	; 0xa0
 8003024:	d903      	bls.n	800302e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003026:	2102      	movs	r1, #2
 8003028:	e004      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800302a:	2100      	movs	r1, #0
 800302c:	e002      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800302e:	2101      	movs	r1, #1
 8003030:	e000      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003032:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f023 0307 	bic.w	r3, r3, #7
 800303c:	430b      	orrs	r3, r1
 800303e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003040:	6813      	ldr	r3, [r2, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	428b      	cmp	r3, r1
 8003048:	d006      	beq.n	8003058 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 800304a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800304c:	b003      	add	sp, #12
 800304e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003050:	2102      	movs	r1, #2
 8003052:	e7ef      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003054:	2101      	movs	r1, #1
 8003056:	e7ed      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8003058:	2000      	movs	r0, #0
 800305a:	e7f7      	b.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800305c:	40021000 	.word	0x40021000
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003066:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800306e:	f013 030c 	ands.w	r3, r3, #12
 8003072:	d00a      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x26>
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d006      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003078:	2b04      	cmp	r3, #4
 800307a:	d01f      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800307c:	2b08      	cmp	r3, #8
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003080:	2000      	movs	r0, #0
 8003082:	4602      	mov	r2, r0
 8003084:	e010      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003086:	2a01      	cmp	r2, #1
 8003088:	d1f6      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	f012 0f08 	tst.w	r2, #8
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003096:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800309a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_GetSysClockFreq+0xa8>)
 80030a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a4:	b143      	cbz	r3, 80030b8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030a6:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x64>
}
 80030ac:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ae:	4a16      	ldr	r2, [pc, #88]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80030b6:	e7f2      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80030b8:	4610      	mov	r0, r2
 80030ba:	e7f5      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80030bc:	4814      	ldr	r0, [pc, #80]	; (8003110 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030be:	2200      	movs	r2, #0
 80030c0:	e7f2      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80030c2:	4814      	ldr	r0, [pc, #80]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030c4:	2200      	movs	r2, #0
 80030c6:	e7ef      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d015      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x9c>
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d015      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030da:	68d8      	ldr	r0, [r3, #12]
 80030dc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80030e0:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030e2:	68d9      	ldr	r1, [r3, #12]
 80030e4:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80030e8:	fb02 f201 	mul.w	r2, r2, r1
 80030ec:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030f0:	68d8      	ldr	r0, [r3, #12]
 80030f2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80030f6:	3001      	adds	r0, #1
 80030f8:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80030fa:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80030fe:	e7d5      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8003100:	4a03      	ldr	r2, [pc, #12]	; (8003110 <HAL_RCC_GetSysClockFreq+0xac>)
 8003102:	e7e9      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003106:	e7e7      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x74>
 8003108:	40021000 	.word	0x40021000
 800310c:	0800b65c 	.word	0x0800b65c
 8003110:	00f42400 	.word	0x00f42400
 8003114:	007a1200 	.word	0x007a1200

08003118 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003118:	2800      	cmp	r0, #0
 800311a:	f000 8300 	beq.w	800371e <HAL_RCC_OscConfig+0x606>
{
 800311e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003120:	b083      	sub	sp, #12
 8003122:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003124:	4baf      	ldr	r3, [pc, #700]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003126:	689d      	ldr	r5, [r3, #8]
 8003128:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	68de      	ldr	r6, [r3, #12]
 800312e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	f013 0f10 	tst.w	r3, #16
 8003138:	d05b      	beq.n	80031f2 <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800313a:	b1e5      	cbz	r5, 8003176 <HAL_RCC_OscConfig+0x5e>
 800313c:	2d0c      	cmp	r5, #12
 800313e:	d018      	beq.n	8003172 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003140:	69a3      	ldr	r3, [r4, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80bc 	beq.w	80032c0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8003148:	4aa6      	ldr	r2, [pc, #664]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003152:	f7ff f9ad 	bl	80024b0 <HAL_GetTick>
 8003156:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003158:	4ba2      	ldr	r3, [pc, #648]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f013 0f02 	tst.w	r3, #2
 8003160:	f040 809b 	bne.w	800329a <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003164:	f7ff f9a4 	bl	80024b0 <HAL_GetTick>
 8003168:	1bc0      	subs	r0, r0, r7
 800316a:	2802      	cmp	r0, #2
 800316c:	d9f4      	bls.n	8003158 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2e1      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003172:	2e01      	cmp	r6, #1
 8003174:	d1e4      	bne.n	8003140 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f013 0f02 	tst.w	r3, #2
 800317e:	d003      	beq.n	8003188 <HAL_RCC_OscConfig+0x70>
 8003180:	69a3      	ldr	r3, [r4, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 82ce 	beq.w	8003724 <HAL_RCC_OscConfig+0x60c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003188:	6a20      	ldr	r0, [r4, #32]
 800318a:	4b96      	ldr	r3, [pc, #600]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f013 0f08 	tst.w	r3, #8
 8003192:	d05c      	beq.n	800324e <HAL_RCC_OscConfig+0x136>
 8003194:	4b93      	ldr	r3, [pc, #588]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319c:	4298      	cmp	r0, r3
 800319e:	d85d      	bhi.n	800325c <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a0:	4b90      	ldr	r3, [pc, #576]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031b0:	6a21      	ldr	r1, [r4, #32]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031bc:	69e1      	ldr	r1, [r4, #28]
 80031be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031c2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	d061      	beq.n	800328c <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c8:	f7ff ff4c 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 80031cc:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031d4:	4a84      	ldr	r2, [pc, #528]	; (80033e8 <HAL_RCC_OscConfig+0x2d0>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	40d8      	lsrs	r0, r3
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0x2d4>)
 80031e0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80031e2:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <HAL_RCC_OscConfig+0x2d8>)
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f7ff f921 	bl	800242c <HAL_InitTick>
        if(status != HAL_OK)
 80031ea:	4603      	mov	r3, r0
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f040 82a2 	bne.w	8003736 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	f013 0f01 	tst.w	r3, #1
 80031f8:	f000 8081 	beq.w	80032fe <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031fc:	2d08      	cmp	r5, #8
 80031fe:	d075      	beq.n	80032ec <HAL_RCC_OscConfig+0x1d4>
 8003200:	2d0c      	cmp	r5, #12
 8003202:	d071      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	6863      	ldr	r3, [r4, #4]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	f000 8097 	beq.w	800333c <HAL_RCC_OscConfig+0x224>
 800320e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003212:	f000 8099 	beq.w	8003348 <HAL_RCC_OscConfig+0x230>
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003226:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8099 	beq.w	8003362 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8003230:	f7ff f93e 	bl	80024b0 <HAL_GetTick>
 8003234:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800323e:	d15e      	bne.n	80032fe <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7ff f936 	bl	80024b0 <HAL_GetTick>
 8003244:	1bc0      	subs	r0, r0, r7
 8003246:	2864      	cmp	r0, #100	; 0x64
 8003248:	d9f5      	bls.n	8003236 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e273      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800324e:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325a:	e79f      	b.n	800319c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800325c:	f7ff feba 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 8003260:	2800      	cmp	r0, #0
 8003262:	f040 8261 	bne.w	8003728 <HAL_RCC_OscConfig+0x610>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003266:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003276:	6a21      	ldr	r1, [r4, #32]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003282:	69e1      	ldr	r1, [r4, #28]
 8003284:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e79d      	b.n	80031c8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800328c:	6a20      	ldr	r0, [r4, #32]
 800328e:	f7ff fea1 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 8003292:	2800      	cmp	r0, #0
 8003294:	d098      	beq.n	80031c8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e24d      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329a:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032aa:	6a21      	ldr	r1, [r4, #32]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80032b6:	69e1      	ldr	r1, [r4, #28]
 80032b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	e798      	b.n	80031f2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032ca:	f7ff f8f1 	bl	80024b0 <HAL_GetTick>
 80032ce:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d0:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f013 0f02 	tst.w	r3, #2
 80032d8:	d08b      	beq.n	80031f2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032da:	f7ff f8e9 	bl	80024b0 <HAL_GetTick>
 80032de:	1bc0      	subs	r0, r0, r7
 80032e0:	2802      	cmp	r0, #2
 80032e2:	d9f5      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e226      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032e8:	2e03      	cmp	r6, #3
 80032ea:	d18b      	bne.n	8003204 <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_OscConfig+0x1e6>
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8217 	beq.w	800372c <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f013 0f02 	tst.w	r3, #2
 8003304:	d04f      	beq.n	80033a6 <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003306:	2d04      	cmp	r5, #4
 8003308:	d03c      	beq.n	8003384 <HAL_RCC_OscConfig+0x26c>
 800330a:	2d0c      	cmp	r5, #12
 800330c:	d038      	beq.n	8003380 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800330e:	68e3      	ldr	r3, [r4, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d078      	beq.n	8003406 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 8003314:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800331e:	f7ff f8c7 	bl	80024b0 <HAL_GetTick>
 8003322:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800332c:	d162      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7ff f8bf 	bl	80024b0 <HAL_GetTick>
 8003332:	1b80      	subs	r0, r0, r6
 8003334:	2802      	cmp	r0, #2
 8003336:	d9f5      	bls.n	8003324 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1fc      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e76f      	b.n	8003228 <HAL_RCC_OscConfig+0x110>
 8003348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800334c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e762      	b.n	8003228 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003362:	f7ff f8a5 	bl	80024b0 <HAL_GetTick>
 8003366:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003370:	d0c5      	beq.n	80032fe <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003372:	f7ff f89d 	bl	80024b0 <HAL_GetTick>
 8003376:	1bc0      	subs	r0, r0, r7
 8003378:	2864      	cmp	r0, #100	; 0x64
 800337a:	d9f5      	bls.n	8003368 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1da      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003380:	2e02      	cmp	r6, #2
 8003382:	d1c4      	bne.n	800330e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800338c:	d003      	beq.n	8003396 <HAL_RCC_OscConfig+0x27e>
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 81cd 	beq.w	8003730 <HAL_RCC_OscConfig+0x618>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 8003398:	6853      	ldr	r3, [r2, #4]
 800339a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800339e:	6921      	ldr	r1, [r4, #16]
 80033a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80033a4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	f013 0f08 	tst.w	r3, #8
 80033ac:	d056      	beq.n	800345c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ae:	6963      	ldr	r3, [r4, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80033b6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80033c2:	f7ff f875 	bl	80024b0 <HAL_GetTick>
 80033c6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_OscConfig+0x2cc>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ce:	f013 0f02 	tst.w	r3, #2
 80033d2:	d143      	bne.n	800345c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7ff f86c 	bl	80024b0 <HAL_GetTick>
 80033d8:	1b80      	subs	r0, r0, r6
 80033da:	2802      	cmp	r0, #2
 80033dc:	d9f4      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1a9      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800b68c 	.word	0x0800b68c
 80033ec:	20000020 	.word	0x20000020
 80033f0:	20000028 	.word	0x20000028
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4ab8      	ldr	r2, [pc, #736]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80033f6:	6853      	ldr	r3, [r2, #4]
 80033f8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80033fc:	6921      	ldr	r1, [r4, #16]
 80033fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e7cf      	b.n	80033a6 <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 8003406:	4ab4      	ldr	r2, [pc, #720]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003410:	f7ff f84e 	bl	80024b0 <HAL_GetTick>
 8003414:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003416:	4bb0      	ldr	r3, [pc, #704]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800341e:	d0c2      	beq.n	80033a6 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003420:	f7ff f846 	bl	80024b0 <HAL_GetTick>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	2802      	cmp	r0, #2
 8003428:	d9f5      	bls.n	8003416 <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e183      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_LSI_DISABLE();
 800342e:	4aaa      	ldr	r2, [pc, #680]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003430:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800343c:	f7ff f838 	bl	80024b0 <HAL_GetTick>
 8003440:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003442:	4ba5      	ldr	r3, [pc, #660]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003448:	f013 0f02 	tst.w	r3, #2
 800344c:	d006      	beq.n	800345c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344e:	f7ff f82f 	bl	80024b0 <HAL_GetTick>
 8003452:	1b80      	subs	r0, r0, r6
 8003454:	2802      	cmp	r0, #2
 8003456:	d9f4      	bls.n	8003442 <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e16c      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	f013 0f04 	tst.w	r3, #4
 8003462:	d07a      	beq.n	800355a <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003464:	4b9c      	ldr	r3, [pc, #624]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800346c:	d10b      	bne.n	8003486 <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b9a      	ldr	r3, [pc, #616]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003476:	659a      	str	r2, [r3, #88]	; 0x58
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003482:	2601      	movs	r6, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003488:	4b94      	ldr	r3, [pc, #592]	; (80036dc <HAL_RCC_OscConfig+0x5c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003490:	d026      	beq.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003492:	68a3      	ldr	r3, [r4, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d037      	beq.n	8003508 <HAL_RCC_OscConfig+0x3f0>
 8003498:	2b05      	cmp	r3, #5
 800349a:	d03d      	beq.n	8003518 <HAL_RCC_OscConfig+0x400>
 800349c:	4b8e      	ldr	r3, [pc, #568]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800349e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80034aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03b      	beq.n	8003534 <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 80034bc:	f7fe fff8 	bl	80024b0 <HAL_GetTick>
 80034c0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f013 0f02 	tst.w	r3, #2
 80034cc:	d144      	bne.n	8003558 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe ffef 	bl	80024b0 <HAL_GetTick>
 80034d2:	1bc0      	subs	r0, r0, r7
 80034d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80034d8:	4298      	cmp	r0, r3
 80034da:	d9f2      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e12a      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4a7e      	ldr	r2, [pc, #504]	; (80036dc <HAL_RCC_OscConfig+0x5c4>)
 80034e2:	6813      	ldr	r3, [r2, #0]
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80034ea:	f7fe ffe1 	bl	80024b0 <HAL_GetTick>
 80034ee:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f0:	4b7a      	ldr	r3, [pc, #488]	; (80036dc <HAL_RCC_OscConfig+0x5c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034f8:	d1cb      	bne.n	8003492 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe ffd9 	bl	80024b0 <HAL_GetTick>
 80034fe:	1bc0      	subs	r0, r0, r7
 8003500:	2802      	cmp	r0, #2
 8003502:	d9f5      	bls.n	80034f0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e116      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	4a73      	ldr	r2, [pc, #460]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800350a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003516:	e7ce      	b.n	80034b6 <HAL_RCC_OscConfig+0x39e>
 8003518:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800351a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003526:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003532:	e7c0      	b.n	80034b6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8003534:	f7fe ffbc 	bl	80024b0 <HAL_GetTick>
 8003538:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353a:	4b67      	ldr	r3, [pc, #412]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f013 0f02 	tst.w	r3, #2
 8003544:	d008      	beq.n	8003558 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe ffb3 	bl	80024b0 <HAL_GetTick>
 800354a:	1bc0      	subs	r0, r0, r7
 800354c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003550:	4298      	cmp	r0, r3
 8003552:	d9f2      	bls.n	800353a <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0ee      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
    if(pwrclkchanged == SET)
 8003558:	bb6e      	cbnz	r6, 80035b6 <HAL_RCC_OscConfig+0x49e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800355a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80e9 	beq.w	8003734 <HAL_RCC_OscConfig+0x61c>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003562:	2b02      	cmp	r3, #2
 8003564:	d02d      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4aa>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003566:	2d0c      	cmp	r5, #12
 8003568:	f000 80ee 	beq.w	8003748 <HAL_RCC_OscConfig+0x630>
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003574:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800357c:	d104      	bne.n	8003588 <HAL_RCC_OscConfig+0x470>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800357e:	4a56      	ldr	r2, [pc, #344]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003580:	68d3      	ldr	r3, [r2, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003588:	4a53      	ldr	r2, [pc, #332]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800358a:	68d3      	ldr	r3, [r2, #12]
 800358c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003594:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003596:	f7fe ff8b 	bl	80024b0 <HAL_GetTick>
 800359a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	4b4e      	ldr	r3, [pc, #312]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035a4:	f000 80b9 	beq.w	800371a <HAL_RCC_OscConfig+0x602>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe ff82 	bl	80024b0 <HAL_GetTick>
 80035ac:	1b00      	subs	r0, r0, r4
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d9f4      	bls.n	800359c <HAL_RCC_OscConfig+0x484>
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0bf      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4a48      	ldr	r2, [pc, #288]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80035b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
 80035c0:	e7cb      	b.n	800355a <HAL_RCC_OscConfig+0x442>
      pll_config = RCC->PLLCFGR;
 80035c2:	4b45      	ldr	r3, [pc, #276]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	f003 0103 	and.w	r1, r3, #3
 80035ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035cc:	4291      	cmp	r1, r2
 80035ce:	d00f      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d0:	2d0c      	cmp	r5, #12
 80035d2:	f000 80b3 	beq.w	800373c <HAL_RCC_OscConfig+0x624>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035d6:	4b40      	ldr	r3, [pc, #256]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80035de:	f040 80af 	bne.w	8003740 <HAL_RCC_OscConfig+0x628>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80035ea:	d02d      	beq.n	8003648 <HAL_RCC_OscConfig+0x530>
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0a2      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035f6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80035fc:	d1e8      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003602:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003604:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003608:	d1e2      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800360a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800360e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003610:	3a07      	subs	r2, #7
 8003612:	bf18      	it	ne
 8003614:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003616:	4291      	cmp	r1, r2
 8003618:	d1da      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800361e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003620:	0852      	lsrs	r2, r2, #1
 8003622:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003624:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003628:	d1d2      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800362a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800362e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003638:	d1ca      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003642:	d051      	beq.n	80036e8 <HAL_RCC_OscConfig+0x5d0>
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e076      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_DISABLE();
 8003648:	4a23      	ldr	r2, [pc, #140]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003650:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003652:	f7fe ff2d 	bl	80024b0 <HAL_GetTick>
 8003656:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003660:	d006      	beq.n	8003670 <HAL_RCC_OscConfig+0x558>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe ff25 	bl	80024b0 <HAL_GetTick>
 8003666:	1b40      	subs	r0, r0, r5
 8003668:	2802      	cmp	r0, #2
 800366a:	d9f5      	bls.n	8003658 <HAL_RCC_OscConfig+0x540>
                return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e062      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 8003672:	68d3      	ldr	r3, [r2, #12]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x5c8>)
 8003676:	4019      	ands	r1, r3
 8003678:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800367a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800367c:	3801      	subs	r0, #1
 800367e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003682:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003684:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003688:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800368a:	0840      	lsrs	r0, r0, #1
 800368c:	3801      	subs	r0, #1
 800368e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003692:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003694:	0840      	lsrs	r0, r0, #1
 8003696:	3801      	subs	r0, #1
 8003698:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800369c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800369e:	0900      	lsrs	r0, r0, #4
 80036a0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80036a4:	430b      	orrs	r3, r1
 80036a6:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b0:	68d3      	ldr	r3, [r2, #12]
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80036b8:	f7fe fefa 	bl	80024b0 <HAL_GetTick>
 80036bc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x5c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5cc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fef2 	bl	80024b0 <HAL_GetTick>
 80036cc:	1b00      	subs	r0, r0, r4
 80036ce:	2802      	cmp	r0, #2
 80036d0:	d9f5      	bls.n	80036be <HAL_RCC_OscConfig+0x5a6>
                return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e02f      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e026      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
          __HAL_RCC_PLL_ENABLE();
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <HAL_RCC_OscConfig+0x634>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80036f0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80036f8:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80036fa:	f7fe fed9 	bl	80024b0 <HAL_GetTick>
 80036fe:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	e004      	b.n	800370c <HAL_RCC_OscConfig+0x5f4>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fed5 	bl	80024b0 <HAL_GetTick>
 8003706:	1b00      	subs	r0, r0, r4
 8003708:	2802      	cmp	r0, #2
 800370a:	d81b      	bhi.n	8003744 <HAL_RCC_OscConfig+0x62c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_RCC_OscConfig+0x634>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003714:	d0f5      	beq.n	8003702 <HAL_RCC_OscConfig+0x5ea>
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e00d      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
 800371a:	2300      	movs	r3, #0
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	4770      	bx	lr
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e006      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e004      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e002      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	b003      	add	sp, #12
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e7fa      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
            return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e7f8      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
              return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e7f6      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e7f4      	b.n	8003736 <HAL_RCC_OscConfig+0x61e>
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003750:	2800      	cmp	r0, #0
 8003752:	f000 809b 	beq.w	800388c <HAL_RCC_ClockConfig+0x13c>
{
 8003756:	b570      	push	{r4, r5, r6, lr}
 8003758:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375a:	4b4e      	ldr	r3, [pc, #312]	; (8003894 <HAL_RCC_ClockConfig+0x144>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	428b      	cmp	r3, r1
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_RCC_ClockConfig+0x144>)
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	430b      	orrs	r3, r1
 8003770:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	428b      	cmp	r3, r1
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800377c:	2001      	movs	r0, #1
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f013 0f01 	tst.w	r3, #1
 8003788:	d039      	beq.n	80037fe <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d009      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	2b02      	cmp	r3, #2
 8003792:	d026      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003794:	bb63      	cbnz	r3, 80037f0 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	f012 0f02 	tst.w	r2, #2
 800379e:	d106      	bne.n	80037ae <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
 80037a2:	e7ec      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a4:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80037ac:	d070      	beq.n	8003890 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	493a      	ldr	r1, [pc, #232]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 80037b0:	688a      	ldr	r2, [r1, #8]
 80037b2:	f022 0203 	bic.w	r2, r2, #3
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80037ba:	f7fe fe79 	bl	80024b0 <HAL_GetTick>
 80037be:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	6862      	ldr	r2, [r4, #4]
 80037ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037ce:	d016      	beq.n	80037fe <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fe fe6e 	bl	80024b0 <HAL_GetTick>
 80037d4:	1b80      	subs	r0, r0, r6
 80037d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037da:	4298      	cmp	r0, r3
 80037dc:	d9f0      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 80037de:	2003      	movs	r0, #3
 80037e0:	e7cd      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80037ea:	d1e0      	bne.n	80037ae <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
 80037ee:	e7c6      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4a29      	ldr	r2, [pc, #164]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037f8:	d1d9      	bne.n	80037ae <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
 80037fc:	e7bf      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d006      	beq.n	8003814 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003806:	4a24      	ldr	r2, [pc, #144]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 8003808:	6893      	ldr	r3, [r2, #8]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380e:	68a1      	ldr	r1, [r4, #8]
 8003810:	430b      	orrs	r3, r1
 8003812:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_RCC_ClockConfig+0x144>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	42ab      	cmp	r3, r5
 800381e:	d90c      	bls.n	800383a <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <HAL_RCC_ClockConfig+0x144>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	f023 0307 	bic.w	r3, r3, #7
 8003828:	432b      	orrs	r3, r5
 800382a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	42ab      	cmp	r3, r5
 8003834:	d001      	beq.n	800383a <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
 8003838:	e7a1      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	f013 0f04 	tst.w	r3, #4
 8003840:	d006      	beq.n	8003850 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 8003844:	6893      	ldr	r3, [r2, #8]
 8003846:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800384a:	68e1      	ldr	r1, [r4, #12]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	f013 0f08 	tst.w	r3, #8
 8003856:	d007      	beq.n	8003868 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003858:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 800385a:	6893      	ldr	r3, [r2, #8]
 800385c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003860:	6921      	ldr	r1, [r4, #16]
 8003862:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003866:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003868:	f7ff fbfc 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x148>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003874:	4a09      	ldr	r2, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x14c>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	40d8      	lsrs	r0, r3
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_RCC_ClockConfig+0x150>)
 8003880:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_ClockConfig+0x154>)
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	f7fe fdd1 	bl	800242c <HAL_InitTick>
  return status;
 800388a:	e778      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
}
 800388e:	4770      	bx	lr
        return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e774      	b.n	800377e <HAL_RCC_ClockConfig+0x2e>
 8003894:	40022000 	.word	0x40022000
 8003898:	40021000 	.word	0x40021000
 800389c:	0800b68c 	.word	0x0800b68c
 80038a0:	20000020 	.word	0x20000020
 80038a4:	20000028 	.word	0x20000028

080038a8 <HAL_RCC_GetHCLKFreq>:
}
 80038a8:	4b01      	ldr	r3, [pc, #4]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000020 	.word	0x20000020

080038b4 <HAL_RCC_GetPCLK1Freq>:
{
 80038b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b6:	f7ff fff7 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	5cd3      	ldrb	r3, [r2, r3]
 80038c6:	f003 031f 	and.w	r3, r3, #31
}
 80038ca:	40d8      	lsrs	r0, r3
 80038cc:	bd08      	pop	{r3, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800b69c 	.word	0x0800b69c

080038d8 <HAL_RCC_GetPCLK2Freq>:
{
 80038d8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038da:	f7ff ffe5 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80038e6:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	5cd3      	ldrb	r3, [r2, r3]
 80038ea:	f003 031f 	and.w	r3, r3, #31
}
 80038ee:	40d8      	lsrs	r0, r3
 80038f0:	bd08      	pop	{r3, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	0800b69c 	.word	0x0800b69c

080038fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038fe:	4b5a      	ldr	r3, [pc, #360]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f013 0f03 	tst.w	r3, #3
 8003906:	d018      	beq.n	800393a <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003908:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	6802      	ldr	r2, [r0, #0]
 8003912:	4293      	cmp	r3, r2
 8003914:	d002      	beq.n	800391c <RCCEx_PLLSAI1_Config+0x20>
 8003916:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8003918:	4628      	mov	r0, r5
 800391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800391c:	2a00      	cmp	r2, #0
 800391e:	f000 80a0 	beq.w	8003a62 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003922:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800392a:	3301      	adds	r3, #1
 800392c:	6842      	ldr	r2, [r0, #4]
       ||
 800392e:	4293      	cmp	r3, r2
 8003930:	d001      	beq.n	8003936 <RCCEx_PLLSAI1_Config+0x3a>
 8003932:	2501      	movs	r5, #1
 8003934:	e7f0      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2500      	movs	r5, #0
 8003938:	e01a      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 800393a:	6803      	ldr	r3, [r0, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d059      	beq.n	80039f4 <RCCEx_PLLSAI1_Config+0xf8>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d05e      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0x106>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8003948:	2501      	movs	r5, #1
 800394a:	e00f      	b.n	800396c <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394c:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	f012 0f02 	tst.w	r2, #2
 8003954:	d061      	beq.n	8003a1a <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003956:	4d44      	ldr	r5, [pc, #272]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003958:	68ea      	ldr	r2, [r5, #12]
 800395a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800395e:	6844      	ldr	r4, [r0, #4]
 8003960:	3c01      	subs	r4, #1
 8003962:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003966:	4313      	orrs	r3, r2
 8003968:	60eb      	str	r3, [r5, #12]
 800396a:	2500      	movs	r5, #0
  if(status == HAL_OK)
 800396c:	2d00      	cmp	r5, #0
 800396e:	d1d3      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
 8003970:	460f      	mov	r7, r1
 8003972:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8003974:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800397c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800397e:	f7fe fd97 	bl	80024b0 <HAL_GetTick>
 8003982:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800398c:	d005      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398e:	f7fe fd8f 	bl	80024b0 <HAL_GetTick>
 8003992:	1b80      	subs	r0, r0, r6
 8003994:	2802      	cmp	r0, #2
 8003996:	d9f5      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8003998:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800399a:	2d00      	cmp	r5, #0
 800399c:	d1bc      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800399e:	2f00      	cmp	r7, #0
 80039a0:	d13d      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a2:	4931      	ldr	r1, [pc, #196]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 80039a4:	690b      	ldr	r3, [r1, #16]
 80039a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	68a0      	ldr	r0, [r4, #8]
 80039b0:	68e2      	ldr	r2, [r4, #12]
 80039b2:	0912      	lsrs	r2, r2, #4
 80039b4:	0452      	lsls	r2, r2, #17
 80039b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 80039c0:	6813      	ldr	r3, [r2, #0]
 80039c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039c8:	f7fe fd72 	bl	80024b0 <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80039d6:	d105      	bne.n	80039e4 <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d8:	f7fe fd6a 	bl	80024b0 <HAL_GetTick>
 80039dc:	1b80      	subs	r0, r0, r6
 80039de:	2802      	cmp	r0, #2
 80039e0:	d9f5      	bls.n	80039ce <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 80039e2:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	d197      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 80039ea:	6913      	ldr	r3, [r2, #16]
 80039ec:	69a1      	ldr	r1, [r4, #24]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6113      	str	r3, [r2, #16]
 80039f2:	e791      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f4:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80039fc:	d1ab      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 80039fe:	2501      	movs	r5, #1
 8003a00:	e7b4      	b.n	800396c <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003a0a:	d1a4      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003a14:	d19f      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8003a16:	2501      	movs	r5, #1
 8003a18:	e7a8      	b.n	800396c <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 8003a1a:	2501      	movs	r5, #1
 8003a1c:	e7a6      	b.n	800396c <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a1e:	2f01      	cmp	r7, #1
 8003a20:	d00f      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003a24:	6902      	ldr	r2, [r0, #16]
 8003a26:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003a2a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003a2e:	68a1      	ldr	r1, [r4, #8]
 8003a30:	6963      	ldr	r3, [r4, #20]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	065b      	lsls	r3, r3, #25
 8003a38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	6103      	str	r3, [r0, #16]
 8003a40:	e7bd      	b.n	80039be <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a42:	4809      	ldr	r0, [pc, #36]	; (8003a68 <RCCEx_PLLSAI1_Config+0x16c>)
 8003a44:	6902      	ldr	r2, [r0, #16]
 8003a46:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003a4a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003a4e:	68a1      	ldr	r1, [r4, #8]
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	055b      	lsls	r3, r3, #21
 8003a58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	6103      	str	r3, [r0, #16]
 8003a60:	e7ad      	b.n	80039be <RCCEx_PLLSAI1_Config+0xc2>
 8003a62:	2501      	movs	r5, #1
 8003a64:	e758      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x1c>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6e:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f013 0f03 	tst.w	r3, #3
 8003a76:	d018      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a78:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	6802      	ldr	r2, [r0, #0]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d002      	beq.n	8003a8c <RCCEx_PLLSAI2_Config+0x20>
 8003a86:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8003a88:	4628      	mov	r0, r5
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003a8c:	2a00      	cmp	r2, #0
 8003a8e:	f000 808e 	beq.w	8003bae <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a92:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	6842      	ldr	r2, [r0, #4]
       ||
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d001      	beq.n	8003aa6 <RCCEx_PLLSAI2_Config+0x3a>
 8003aa2:	2501      	movs	r5, #1
 8003aa4:	e7f0      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	e01a      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 8003aaa:	6803      	ldr	r3, [r0, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d059      	beq.n	8003b64 <RCCEx_PLLSAI2_Config+0xf8>
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d05e      	beq.n	8003b72 <RCCEx_PLLSAI2_Config+0x106>
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <RCCEx_PLLSAI2_Config+0x50>
      status = HAL_ERROR;
 8003ab8:	2501      	movs	r5, #1
 8003aba:	e00f      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003abc:	4a3d      	ldr	r2, [pc, #244]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f012 0f02 	tst.w	r2, #2
 8003ac4:	d061      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac6:	4d3b      	ldr	r5, [pc, #236]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003ac8:	68ea      	ldr	r2, [r5, #12]
 8003aca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003ace:	6844      	ldr	r4, [r0, #4]
 8003ad0:	3c01      	subs	r4, #1
 8003ad2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60eb      	str	r3, [r5, #12]
 8003ada:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	d1d3      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
 8003ae0:	460f      	mov	r7, r1
 8003ae2:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ae4:	4a33      	ldr	r2, [pc, #204]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003aee:	f7fe fcdf 	bl	80024b0 <HAL_GetTick>
 8003af2:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003af4:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003afc:	d005      	beq.n	8003b0a <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003afe:	f7fe fcd7 	bl	80024b0 <HAL_GetTick>
 8003b02:	1b80      	subs	r0, r0, r6
 8003b04:	2802      	cmp	r0, #2
 8003b06:	d9f5      	bls.n	8003af4 <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 8003b08:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d1bc      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8003b0e:	2f00      	cmp	r7, #0
 8003b10:	d13d      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b12:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b14:	694b      	ldr	r3, [r1, #20]
 8003b16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	68a0      	ldr	r0, [r4, #8]
 8003b20:	68e2      	ldr	r2, [r4, #12]
 8003b22:	0912      	lsrs	r2, r2, #4
 8003b24:	0452      	lsls	r2, r2, #17
 8003b26:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b30:	6813      	ldr	r3, [r2, #0]
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b38:	f7fe fcba 	bl	80024b0 <HAL_GetTick>
 8003b3c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003b46:	d105      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b48:	f7fe fcb2 	bl	80024b0 <HAL_GetTick>
 8003b4c:	1b80      	subs	r0, r0, r6
 8003b4e:	2802      	cmp	r0, #2
 8003b50:	d9f5      	bls.n	8003b3e <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 8003b52:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	d197      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b58:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b5a:	6953      	ldr	r3, [r2, #20]
 8003b5c:	6961      	ldr	r1, [r4, #20]
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6153      	str	r3, [r2, #20]
 8003b62:	e791      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003b6c:	d1ab      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0x5a>
        status = HAL_ERROR;
 8003b6e:	2501      	movs	r5, #1
 8003b70:	e7b4      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b7a:	d1a4      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003b84:	d19f      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0x5a>
          status = HAL_ERROR;
 8003b86:	2501      	movs	r5, #1
 8003b88:	e7a8      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x70>
        status = HAL_ERROR;
 8003b8a:	2501      	movs	r5, #1
 8003b8c:	e7a6      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x148>)
 8003b90:	6942      	ldr	r2, [r0, #20]
 8003b92:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003b96:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	065b      	lsls	r3, r3, #25
 8003ba4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	6143      	str	r3, [r0, #20]
 8003bac:	e7bf      	b.n	8003b2e <RCCEx_PLLSAI2_Config+0xc2>
 8003bae:	2501      	movs	r5, #1
 8003bb0:	e76a      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x1c>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bc0:	6803      	ldr	r3, [r0, #0]
 8003bc2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003bc6:	d02f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003bc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d025      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bd0:	d908      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8003bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bdc:	f040 8099 	bne.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003be0:	2600      	movs	r6, #0
 8003be2:	e010      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8094 	bne.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bea:	2100      	movs	r1, #0
 8003bec:	3004      	adds	r0, #4
 8003bee:	f7ff fe85 	bl	80038fc <RCCEx_PLLSAI1_Config>
 8003bf2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003bf4:	b13e      	cbz	r6, 8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003bf6:	4637      	mov	r7, r6
 8003bf8:	e018      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bfa:	4a5e      	ldr	r2, [pc, #376]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bfc:	68d3      	ldr	r3, [r2, #12]
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c04:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c06:	4a5b      	ldr	r2, [pc, #364]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c0c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c10:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c12:	430b      	orrs	r3, r1
 8003c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c18:	2700      	movs	r7, #0
 8003c1a:	e007      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	3020      	adds	r0, #32
 8003c20:	f7ff ff24 	bl	8003a6c <RCCEx_PLLSAI2_Config>
 8003c24:	4606      	mov	r6, r0
      break;
 8003c26:	e7e5      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c28:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c2a:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003c32:	d015      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003c34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3a:	d07a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003c3c:	d96c      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c42:	d070      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c48:	d17a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d17b      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c4e:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c50:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003c58:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c66:	f000 808e 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c6a:	4b42      	ldr	r3, [pc, #264]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c72:	d16a      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c7c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c88:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c96:	f7fe fc0b 	bl	80024b0 <HAL_GetTick>
 8003c9a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca6:	f7fe fc03 	bl	80024b0 <HAL_GetTick>
 8003caa:	1b40      	subs	r0, r0, r5
 8003cac:	2802      	cmp	r0, #2
 8003cae:	d9f5      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
        ret = HAL_TIMEOUT;
 8003cb0:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d162      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cbc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003cc2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d012      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cca:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ccc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003cd8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003cdc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003ce4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003ce8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cf0:	f013 0f01 	tst.w	r3, #1
 8003cf4:	d12c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      if(ret == HAL_OK)
 8003cf6:	2e00      	cmp	r6, #0
 8003cf8:	f040 8143 	bne.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d10:	e035      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      ret = HAL_ERROR;
 8003d12:	2701      	movs	r7, #1
 8003d14:	463e      	mov	r6, r7
 8003d16:	e789      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003d18:	b993      	cbnz	r3, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	1d20      	adds	r0, r4, #4
 8003d1e:	f7ff fded 	bl	80038fc <RCCEx_PLLSAI1_Config>
 8003d22:	4606      	mov	r6, r0
      break;
 8003d24:	e791      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d28:	68d3      	ldr	r3, [r2, #12]
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2e:	60d3      	str	r3, [r2, #12]
      break;
 8003d30:	e78b      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d32:	2100      	movs	r1, #0
 8003d34:	f104 0020 	add.w	r0, r4, #32
 8003d38:	f7ff fe98 	bl	8003a6c <RCCEx_PLLSAI2_Config>
 8003d3c:	4606      	mov	r6, r0
      break;
 8003d3e:	e784      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = HAL_ERROR;
 8003d40:	2701      	movs	r7, #1
 8003d42:	463e      	mov	r6, r7
 8003d44:	e78c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8003d46:	4637      	mov	r7, r6
 8003d48:	e78a      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	f04f 0800 	mov.w	r8, #0
 8003d4e:	e79d      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8003d50:	f7fe fbae 	bl	80024b0 <HAL_GetTick>
 8003d54:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f013 0f02 	tst.w	r3, #2
 8003d60:	d1c9      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe fba5 	bl	80024b0 <HAL_GetTick>
 8003d66:	1b40      	subs	r0, r0, r5
 8003d68:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d6c:	4298      	cmp	r0, r3
 8003d6e:	d9f2      	bls.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
            ret = HAL_TIMEOUT;
 8003d70:	2603      	movs	r6, #3
 8003d72:	e7c0      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40007000 	.word	0x40007000
      status = ret;
 8003d7c:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8003d7e:	f1b8 0f00 	cmp.w	r8, #0
 8003d82:	f040 8100 	bne.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f013 0f01 	tst.w	r3, #1
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8e:	4a9d      	ldr	r2, [pc, #628]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003d90:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	f013 0f02 	tst.w	r3, #2
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da8:	4a96      	ldr	r2, [pc, #600]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003daa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003dae:	f023 030c 	bic.w	r3, r3, #12
 8003db2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003db4:	430b      	orrs	r3, r1
 8003db6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f013 0f04 	tst.w	r3, #4
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc2:	4a90      	ldr	r2, [pc, #576]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003dc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003dc8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f013 0f08 	tst.w	r3, #8
 8003dda:	d008      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ddc:	4a89      	ldr	r2, [pc, #548]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003dde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003de2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003de6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003de8:	430b      	orrs	r3, r1
 8003dea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	f013 0f10 	tst.w	r3, #16
 8003df4:	d008      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df6:	4a83      	ldr	r2, [pc, #524]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003df8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003e02:	430b      	orrs	r3, r1
 8003e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f013 0f20 	tst.w	r3, #32
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e10:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e16:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e1a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e28:	d008      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2a:	4a76      	ldr	r2, [pc, #472]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e30:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003e34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e36:	430b      	orrs	r3, r1
 8003e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e44:	4a6f      	ldr	r2, [pc, #444]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e4e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003e50:	430b      	orrs	r3, r1
 8003e52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5e:	4a69      	ldr	r2, [pc, #420]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e68:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e78:	4a62      	ldr	r2, [pc, #392]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e92:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e98:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e9c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003eaa:	d00f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eac:	4a55      	ldr	r2, [pc, #340]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003eae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003eb2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003eb6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ebe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec4:	d065      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eca:	d067      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ed2:	d00f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed4:	4a4b      	ldr	r2, [pc, #300]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003ed6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003eda:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003ede:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ee6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eec:	d05e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef2:	d060      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003efa:	d00f      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003efc:	4a41      	ldr	r2, [pc, #260]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003efe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003f02:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003f06:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f14:	d057      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1a:	d059      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x418>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003f22:	d00f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f24:	4a37      	ldr	r2, [pc, #220]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003f26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003f2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003f2e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003f30:	430b      	orrs	r3, r1
 8003f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3c:	d050      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x428>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f42:	d055      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003f4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003f52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f56:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f64:	d009      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f66:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003f68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003f74:	430b      	orrs	r3, r1
 8003f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8003f82:	4637      	mov	r7, r6
 8003f84:	e6fb      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f86:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003f88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f90:	e6f9      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f92:	68d3      	ldr	r3, [r2, #12]
 8003f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f98:	60d3      	str	r3, [r2, #12]
 8003f9a:	e797      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x314>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	1d20      	adds	r0, r4, #4
 8003fa0:	f7ff fcac 	bl	80038fc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d091      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x314>
          status = ret;
 8003fa8:	4607      	mov	r7, r0
 8003faa:	e78f      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	68d3      	ldr	r3, [r2, #12]
 8003fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb2:	60d3      	str	r3, [r2, #12]
 8003fb4:	e79e      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	1d20      	adds	r0, r4, #4
 8003fba:	f7ff fc9f 	bl	80038fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d098      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        status = ret;
 8003fc2:	4607      	mov	r7, r0
 8003fc4:	e796      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc6:	68d3      	ldr	r3, [r2, #12]
 8003fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fcc:	60d3      	str	r3, [r2, #12]
 8003fce:	e7a5      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	1d20      	adds	r0, r4, #4
 8003fd4:	f7ff fc92 	bl	80038fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d09f      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
        status = ret;
 8003fdc:	4607      	mov	r7, r0
 8003fde:	e79d      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	1d20      	adds	r0, r4, #4
 8003fe4:	f7ff fc8a 	bl	80038fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d0ab      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 8003fec:	4607      	mov	r7, r0
 8003fee:	e7a9      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	f104 0020 	add.w	r0, r4, #32
 8003ff6:	f7ff fd39 	bl	8003a6c <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0a2      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        status = ret;
 8003ffe:	4607      	mov	r7, r0
 8004000:	e7a0      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800400c:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800400e:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004010:	6883      	ldr	r3, [r0, #8]
 8004012:	6902      	ldr	r2, [r0, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	6942      	ldr	r2, [r0, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	69c2      	ldr	r2, [r0, #28]
 800401c:	4313      	orrs	r3, r2
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800401e:	6808      	ldr	r0, [r1, #0]
 8004020:	4a9b      	ldr	r2, [pc, #620]	; (8004290 <UART_SetConfig+0x288>)
 8004022:	4002      	ands	r2, r0
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6853      	ldr	r3, [r2, #4]
 800402c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004030:	68e1      	ldr	r1, [r4, #12]
 8004032:	430b      	orrs	r3, r1
 8004034:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004036:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	4b96      	ldr	r3, [pc, #600]	; (8004294 <UART_SetConfig+0x28c>)
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004040:	6a23      	ldr	r3, [r4, #32]
 8004042:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004044:	6893      	ldr	r3, [r2, #8]
 8004046:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800404a:	430b      	orrs	r3, r1
 800404c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	4a91      	ldr	r2, [pc, #580]	; (8004298 <UART_SetConfig+0x290>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d027      	beq.n	80040a6 <UART_SetConfig+0x9e>
 8004056:	4a91      	ldr	r2, [pc, #580]	; (800429c <UART_SetConfig+0x294>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d038      	beq.n	80040ce <UART_SetConfig+0xc6>
 800405c:	4a90      	ldr	r2, [pc, #576]	; (80042a0 <UART_SetConfig+0x298>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d04e      	beq.n	8004100 <UART_SetConfig+0xf8>
 8004062:	4a90      	ldr	r2, [pc, #576]	; (80042a4 <UART_SetConfig+0x29c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d061      	beq.n	800412c <UART_SetConfig+0x124>
 8004068:	4a8f      	ldr	r2, [pc, #572]	; (80042a8 <UART_SetConfig+0x2a0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d074      	beq.n	8004158 <UART_SetConfig+0x150>
 800406e:	4a89      	ldr	r2, [pc, #548]	; (8004294 <UART_SetConfig+0x28c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	f000 808a 	beq.w	800418a <UART_SetConfig+0x182>
 8004076:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004078:	4986      	ldr	r1, [pc, #536]	; (8004294 <UART_SetConfig+0x28c>)
 800407a:	428b      	cmp	r3, r1
 800407c:	f000 80aa 	beq.w	80041d4 <UART_SetConfig+0x1cc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004080:	69e3      	ldr	r3, [r4, #28]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	f000 80d8 	beq.w	800423a <UART_SetConfig+0x232>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408a:	2a08      	cmp	r2, #8
 800408c:	f200 8145 	bhi.w	800431a <UART_SetConfig+0x312>
 8004090:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004094:	012c0115 	.word	0x012c0115
 8004098:	01430113 	.word	0x01430113
 800409c:	0143012f 	.word	0x0143012f
 80040a0:	01430143 	.word	0x01430143
 80040a4:	0132      	.short	0x0132
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a6:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80040aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	2a03      	cmp	r2, #3
 80040b4:	d809      	bhi.n	80040ca <UART_SetConfig+0xc2>
 80040b6:	e8df f002 	tbb	[pc, r2]
 80040ba:	0402      	.short	0x0402
 80040bc:	0681      	.short	0x0681
 80040be:	2201      	movs	r2, #1
 80040c0:	e7da      	b.n	8004078 <UART_SetConfig+0x70>
 80040c2:	2204      	movs	r2, #4
 80040c4:	e7d8      	b.n	8004078 <UART_SetConfig+0x70>
 80040c6:	2208      	movs	r2, #8
 80040c8:	e7d6      	b.n	8004078 <UART_SetConfig+0x70>
 80040ca:	2210      	movs	r2, #16
 80040cc:	e7d4      	b.n	8004078 <UART_SetConfig+0x70>
 80040ce:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80040d2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80040d6:	f002 020c 	and.w	r2, r2, #12
 80040da:	2a0c      	cmp	r2, #12
 80040dc:	d80e      	bhi.n	80040fc <UART_SetConfig+0xf4>
 80040de:	e8df f002 	tbb	[pc, r2]
 80040e2:	0d07      	.short	0x0d07
 80040e4:	0d090d0d 	.word	0x0d090d0d
 80040e8:	0d6f0d0d 	.word	0x0d6f0d0d
 80040ec:	0d0d      	.short	0x0d0d
 80040ee:	0b          	.byte	0x0b
 80040ef:	00          	.byte	0x00
 80040f0:	2200      	movs	r2, #0
 80040f2:	e7c1      	b.n	8004078 <UART_SetConfig+0x70>
 80040f4:	2204      	movs	r2, #4
 80040f6:	e7bf      	b.n	8004078 <UART_SetConfig+0x70>
 80040f8:	2208      	movs	r2, #8
 80040fa:	e7bd      	b.n	8004078 <UART_SetConfig+0x70>
 80040fc:	2210      	movs	r2, #16
 80040fe:	e7bb      	b.n	8004078 <UART_SetConfig+0x70>
 8004100:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004104:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004108:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800410c:	2a10      	cmp	r2, #16
 800410e:	d009      	beq.n	8004124 <UART_SetConfig+0x11c>
 8004110:	d905      	bls.n	800411e <UART_SetConfig+0x116>
 8004112:	2a20      	cmp	r2, #32
 8004114:	d056      	beq.n	80041c4 <UART_SetConfig+0x1bc>
 8004116:	2a30      	cmp	r2, #48	; 0x30
 8004118:	d106      	bne.n	8004128 <UART_SetConfig+0x120>
 800411a:	2208      	movs	r2, #8
 800411c:	e7ac      	b.n	8004078 <UART_SetConfig+0x70>
 800411e:	b91a      	cbnz	r2, 8004128 <UART_SetConfig+0x120>
 8004120:	2200      	movs	r2, #0
 8004122:	e7a9      	b.n	8004078 <UART_SetConfig+0x70>
 8004124:	2204      	movs	r2, #4
 8004126:	e7a7      	b.n	8004078 <UART_SetConfig+0x70>
 8004128:	2210      	movs	r2, #16
 800412a:	e7a5      	b.n	8004078 <UART_SetConfig+0x70>
 800412c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004130:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004134:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004138:	2a40      	cmp	r2, #64	; 0x40
 800413a:	d009      	beq.n	8004150 <UART_SetConfig+0x148>
 800413c:	d905      	bls.n	800414a <UART_SetConfig+0x142>
 800413e:	2a80      	cmp	r2, #128	; 0x80
 8004140:	d042      	beq.n	80041c8 <UART_SetConfig+0x1c0>
 8004142:	2ac0      	cmp	r2, #192	; 0xc0
 8004144:	d106      	bne.n	8004154 <UART_SetConfig+0x14c>
 8004146:	2208      	movs	r2, #8
 8004148:	e796      	b.n	8004078 <UART_SetConfig+0x70>
 800414a:	b91a      	cbnz	r2, 8004154 <UART_SetConfig+0x14c>
 800414c:	2200      	movs	r2, #0
 800414e:	e793      	b.n	8004078 <UART_SetConfig+0x70>
 8004150:	2204      	movs	r2, #4
 8004152:	e791      	b.n	8004078 <UART_SetConfig+0x70>
 8004154:	2210      	movs	r2, #16
 8004156:	e78f      	b.n	8004078 <UART_SetConfig+0x70>
 8004158:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800415c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004160:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004164:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004168:	d00b      	beq.n	8004182 <UART_SetConfig+0x17a>
 800416a:	d907      	bls.n	800417c <UART_SetConfig+0x174>
 800416c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004170:	d02c      	beq.n	80041cc <UART_SetConfig+0x1c4>
 8004172:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004176:	d106      	bne.n	8004186 <UART_SetConfig+0x17e>
 8004178:	2208      	movs	r2, #8
 800417a:	e77d      	b.n	8004078 <UART_SetConfig+0x70>
 800417c:	b91a      	cbnz	r2, 8004186 <UART_SetConfig+0x17e>
 800417e:	2200      	movs	r2, #0
 8004180:	e77a      	b.n	8004078 <UART_SetConfig+0x70>
 8004182:	2204      	movs	r2, #4
 8004184:	e778      	b.n	8004078 <UART_SetConfig+0x70>
 8004186:	2210      	movs	r2, #16
 8004188:	e776      	b.n	8004078 <UART_SetConfig+0x70>
 800418a:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800418e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004192:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004196:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800419a:	d00b      	beq.n	80041b4 <UART_SetConfig+0x1ac>
 800419c:	d907      	bls.n	80041ae <UART_SetConfig+0x1a6>
 800419e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80041a2:	d015      	beq.n	80041d0 <UART_SetConfig+0x1c8>
 80041a4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80041a8:	d106      	bne.n	80041b8 <UART_SetConfig+0x1b0>
 80041aa:	2208      	movs	r2, #8
 80041ac:	e764      	b.n	8004078 <UART_SetConfig+0x70>
 80041ae:	b91a      	cbnz	r2, 80041b8 <UART_SetConfig+0x1b0>
 80041b0:	2200      	movs	r2, #0
 80041b2:	e761      	b.n	8004078 <UART_SetConfig+0x70>
 80041b4:	2204      	movs	r2, #4
 80041b6:	e75f      	b.n	8004078 <UART_SetConfig+0x70>
 80041b8:	2210      	movs	r2, #16
 80041ba:	e75d      	b.n	8004078 <UART_SetConfig+0x70>
 80041bc:	2202      	movs	r2, #2
 80041be:	e75b      	b.n	8004078 <UART_SetConfig+0x70>
 80041c0:	2202      	movs	r2, #2
 80041c2:	e759      	b.n	8004078 <UART_SetConfig+0x70>
 80041c4:	2202      	movs	r2, #2
 80041c6:	e757      	b.n	8004078 <UART_SetConfig+0x70>
 80041c8:	2202      	movs	r2, #2
 80041ca:	e755      	b.n	8004078 <UART_SetConfig+0x70>
 80041cc:	2202      	movs	r2, #2
 80041ce:	e753      	b.n	8004078 <UART_SetConfig+0x70>
 80041d0:	2202      	movs	r2, #2
 80041d2:	e751      	b.n	8004078 <UART_SetConfig+0x70>
    switch (clocksource)
 80041d4:	2a08      	cmp	r2, #8
 80041d6:	f200 8092 	bhi.w	80042fe <UART_SetConfig+0x2f6>
 80041da:	e8df f002 	tbb	[pc, r2]
 80041de:	9008      	.short	0x9008
 80041e0:	900d9010 	.word	0x900d9010
 80041e4:	9090      	.short	0x9090
 80041e6:	05          	.byte	0x05
 80041e7:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 80041e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041ec:	e008      	b.n	8004200 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff fb61 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80041f2:	b928      	cbnz	r0, 8004200 <UART_SetConfig+0x1f8>
 80041f4:	2000      	movs	r0, #0
 80041f6:	e074      	b.n	80042e2 <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetSysClockFreq();
 80041f8:	f7fe ff34 	bl	8003064 <HAL_RCC_GetSysClockFreq>
        break;
 80041fc:	e7f9      	b.n	80041f2 <UART_SetConfig+0x1ea>
        pclk = (uint32_t) HSI_VALUE;
 80041fe:	482b      	ldr	r0, [pc, #172]	; (80042ac <UART_SetConfig+0x2a4>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004200:	6862      	ldr	r2, [r4, #4]
 8004202:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004206:	4283      	cmp	r3, r0
 8004208:	d87b      	bhi.n	8004302 <UART_SetConfig+0x2fa>
 800420a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800420e:	d87a      	bhi.n	8004306 <UART_SetConfig+0x2fe>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004210:	2300      	movs	r3, #0
 8004212:	0e07      	lsrs	r7, r0, #24
 8004214:	0206      	lsls	r6, r0, #8
 8004216:	0850      	lsrs	r0, r2, #1
 8004218:	eb16 0b00 	adds.w	fp, r6, r0
 800421c:	f147 0c00 	adc.w	ip, r7, #0
 8004220:	4658      	mov	r0, fp
 8004222:	4661      	mov	r1, ip
 8004224:	f7fc fd30 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004228:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <UART_SetConfig+0x2a8>)
 800422e:	429a      	cmp	r2, r3
 8004230:	d86b      	bhi.n	800430a <UART_SetConfig+0x302>
          huart->Instance->BRR = usartdiv;
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	60d8      	str	r0, [r3, #12]
 8004236:	2000      	movs	r0, #0
 8004238:	e053      	b.n	80042e2 <UART_SetConfig+0x2da>
    switch (clocksource)
 800423a:	2a08      	cmp	r2, #8
 800423c:	d867      	bhi.n	800430e <UART_SetConfig+0x306>
 800423e:	e8df f002 	tbb	[pc, r2]
 8004242:	2107      	.short	0x2107
 8004244:	66246605 	.word	0x66246605
 8004248:	6666      	.short	0x6666
 800424a:	39          	.byte	0x39
 800424b:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 800424c:	4817      	ldr	r0, [pc, #92]	; (80042ac <UART_SetConfig+0x2a4>)
 800424e:	e003      	b.n	8004258 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7ff fb30 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004254:	2800      	cmp	r0, #0
 8004256:	d05c      	beq.n	8004312 <UART_SetConfig+0x30a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004258:	6862      	ldr	r2, [r4, #4]
 800425a:	0853      	lsrs	r3, r2, #1
 800425c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004260:	fbb3 f3f2 	udiv	r3, r3, r2
 8004264:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004266:	f1a3 0110 	sub.w	r1, r3, #16
 800426a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800426e:	4291      	cmp	r1, r2
 8004270:	d851      	bhi.n	8004316 <UART_SetConfig+0x30e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004272:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004276:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800427a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	60d3      	str	r3, [r2, #12]
 8004280:	2000      	movs	r0, #0
 8004282:	e02e      	b.n	80042e2 <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7ff fb28 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004288:	e7e4      	b.n	8004254 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetSysClockFreq();
 800428a:	f7fe feeb 	bl	8003064 <HAL_RCC_GetSysClockFreq>
        break;
 800428e:	e7e1      	b.n	8004254 <UART_SetConfig+0x24c>
 8004290:	efff69f3 	.word	0xefff69f3
 8004294:	40008000 	.word	0x40008000
 8004298:	40013800 	.word	0x40013800
 800429c:	40004400 	.word	0x40004400
 80042a0:	40004800 	.word	0x40004800
 80042a4:	40004c00 	.word	0x40004c00
 80042a8:	40005000 	.word	0x40005000
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	000ffcff 	.word	0x000ffcff
        pclk = (uint32_t) LSE_VALUE;
 80042b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042b8:	e7ce      	b.n	8004258 <UART_SetConfig+0x250>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ba:	481b      	ldr	r0, [pc, #108]	; (8004328 <UART_SetConfig+0x320>)
 80042bc:	e002      	b.n	80042c4 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80042be:	f7ff faf9 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80042c2:	b360      	cbz	r0, 800431e <UART_SetConfig+0x316>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80042ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80042ce:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d0:	f1a0 0210 	sub.w	r2, r0, #16
 80042d4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80042d8:	429a      	cmp	r2, r3
 80042da:	d822      	bhi.n	8004322 <UART_SetConfig+0x31a>
      {
        huart->Instance->BRR = usartdiv;
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	60d8      	str	r0, [r3, #12]
 80042e0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80042e6:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80042e8:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7ff faf4 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
        break;
 80042f0:	e7e7      	b.n	80042c2 <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetSysClockFreq();
 80042f2:	f7fe feb7 	bl	8003064 <HAL_RCC_GetSysClockFreq>
        break;
 80042f6:	e7e4      	b.n	80042c2 <UART_SetConfig+0x2ba>
        pclk = (uint32_t) LSE_VALUE;
 80042f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042fc:	e7e2      	b.n	80042c4 <UART_SetConfig+0x2bc>
        ret = HAL_ERROR;
 80042fe:	2001      	movs	r0, #1
 8004300:	e7ef      	b.n	80042e2 <UART_SetConfig+0x2da>
        ret = HAL_ERROR;
 8004302:	2001      	movs	r0, #1
 8004304:	e7ed      	b.n	80042e2 <UART_SetConfig+0x2da>
 8004306:	2001      	movs	r0, #1
 8004308:	e7eb      	b.n	80042e2 <UART_SetConfig+0x2da>
          ret = HAL_ERROR;
 800430a:	2001      	movs	r0, #1
 800430c:	e7e9      	b.n	80042e2 <UART_SetConfig+0x2da>
        ret = HAL_ERROR;
 800430e:	2001      	movs	r0, #1
 8004310:	e7e7      	b.n	80042e2 <UART_SetConfig+0x2da>
 8004312:	2000      	movs	r0, #0
 8004314:	e7e5      	b.n	80042e2 <UART_SetConfig+0x2da>
        ret = HAL_ERROR;
 8004316:	2001      	movs	r0, #1
 8004318:	e7e3      	b.n	80042e2 <UART_SetConfig+0x2da>
        ret = HAL_ERROR;
 800431a:	2001      	movs	r0, #1
 800431c:	e7e1      	b.n	80042e2 <UART_SetConfig+0x2da>
 800431e:	2000      	movs	r0, #0
 8004320:	e7df      	b.n	80042e2 <UART_SetConfig+0x2da>
        ret = HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	e7dd      	b.n	80042e2 <UART_SetConfig+0x2da>
 8004326:	bf00      	nop
 8004328:	00f42400 	.word	0x00f42400

0800432c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800432c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800432e:	f013 0f01 	tst.w	r3, #1
 8004332:	d006      	beq.n	8004342 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	6853      	ldr	r3, [r2, #4]
 8004338:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800433c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800433e:	430b      	orrs	r3, r1
 8004340:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004342:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004344:	f013 0f02 	tst.w	r3, #2
 8004348:	d006      	beq.n	8004358 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434a:	6802      	ldr	r2, [r0, #0]
 800434c:	6853      	ldr	r3, [r2, #4]
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004354:	430b      	orrs	r3, r1
 8004356:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800435a:	f013 0f04 	tst.w	r3, #4
 800435e:	d006      	beq.n	800436e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004360:	6802      	ldr	r2, [r0, #0]
 8004362:	6853      	ldr	r3, [r2, #4]
 8004364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004368:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800436a:	430b      	orrs	r3, r1
 800436c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800436e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004370:	f013 0f08 	tst.w	r3, #8
 8004374:	d006      	beq.n	8004384 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004376:	6802      	ldr	r2, [r0, #0]
 8004378:	6853      	ldr	r3, [r2, #4]
 800437a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800437e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004380:	430b      	orrs	r3, r1
 8004382:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004386:	f013 0f10 	tst.w	r3, #16
 800438a:	d006      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800438c:	6802      	ldr	r2, [r0, #0]
 800438e:	6893      	ldr	r3, [r2, #8]
 8004390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004394:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004396:	430b      	orrs	r3, r1
 8004398:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800439c:	f013 0f20 	tst.w	r3, #32
 80043a0:	d006      	beq.n	80043b0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043a2:	6802      	ldr	r2, [r0, #0]
 80043a4:	6893      	ldr	r3, [r2, #8]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043b6:	d00a      	beq.n	80043ce <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b8:	6802      	ldr	r2, [r0, #0]
 80043ba:	6853      	ldr	r3, [r2, #4]
 80043bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043cc:	d00b      	beq.n	80043e6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043d4:	d006      	beq.n	80043e4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d6:	6802      	ldr	r2, [r0, #0]
 80043d8:	6853      	ldr	r3, [r2, #4]
 80043da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6053      	str	r3, [r2, #4]
  }
}
 80043e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e6:	6802      	ldr	r2, [r0, #0]
 80043e8:	6853      	ldr	r3, [r2, #4]
 80043ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e7eb      	b.n	80043ce <UART_AdvFeatureConfig+0xa2>

080043f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	460f      	mov	r7, r1
 80043fe:	4616      	mov	r6, r2
 8004400:	4698      	mov	r8, r3
 8004402:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	ea37 0303 	bics.w	r3, r7, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	42b3      	cmp	r3, r6
 8004414:	d13a      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800441a:	d0f3      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe f848 	bl	80024b0 <HAL_GetTick>
 8004420:	eba0 0008 	sub.w	r0, r0, r8
 8004424:	42a8      	cmp	r0, r5
 8004426:	d81f      	bhi.n	8004468 <UART_WaitOnFlagUntilTimeout+0x72>
 8004428:	b1f5      	cbz	r5, 8004468 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f012 0f04 	tst.w	r2, #4
 8004432:	d0e7      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800443a:	d0e3      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004440:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	6813      	ldr	r3, [r2, #0]
 8004446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800444a:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	6893      	ldr	r3, [r2, #8]
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004456:	2320      	movs	r3, #32
 8004458:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800445a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445c:	67e3      	str	r3, [r4, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445e:	2300      	movs	r3, #0
 8004460:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

          return HAL_TIMEOUT;
 8004464:	2003      	movs	r0, #3
 8004466:	e012      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004470:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	6893      	ldr	r3, [r2, #8]
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800447c:	2320      	movs	r3, #32
 800447e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004480:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8004488:	2003      	movs	r0, #3
 800448a:	e000      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2000      	movs	r0, #0
}
 800448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004492 <UART_CheckIdleState>:
{
 8004492:	b530      	push	{r4, r5, lr}
 8004494:	b083      	sub	sp, #12
 8004496:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	2300      	movs	r3, #0
 800449a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800449c:	f7fe f808 	bl	80024b0 <HAL_GetTick>
 80044a0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f013 0f08 	tst.w	r3, #8
 80044aa:	d10c      	bne.n	80044c6 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f013 0f04 	tst.w	r3, #4
 80044b4:	d115      	bne.n	80044e2 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80044b6:	2320      	movs	r3, #32
 80044b8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80044bc:	2000      	movs	r0, #0
 80044be:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80044c2:	b003      	add	sp, #12
 80044c4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4603      	mov	r3, r0
 80044ce:	2200      	movs	r2, #0
 80044d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff ff8e 	bl	80043f6 <UART_WaitOnFlagUntilTimeout>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d0e6      	beq.n	80044ac <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80044de:	2003      	movs	r0, #3
 80044e0:	e7ef      	b.n	80044c2 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	462b      	mov	r3, r5
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff ff80 	bl	80043f6 <UART_WaitOnFlagUntilTimeout>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d0dd      	beq.n	80044b6 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80044fa:	2003      	movs	r0, #3
 80044fc:	e7e1      	b.n	80044c2 <UART_CheckIdleState+0x30>

080044fe <HAL_UART_Init>:
  if (huart == NULL)
 80044fe:	b368      	cbz	r0, 800455c <HAL_UART_Init+0x5e>
{
 8004500:	b510      	push	{r4, lr}
 8004502:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004504:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004506:	b303      	cbz	r3, 800454a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	2324      	movs	r3, #36	; 0x24
 800450a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	6813      	ldr	r3, [r2, #0]
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fd76 	bl	8004008 <UART_SetConfig>
 800451c:	2801      	cmp	r0, #1
 800451e:	d013      	beq.n	8004548 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004522:	b9bb      	cbnz	r3, 8004554 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	6853      	ldr	r3, [r2, #4]
 8004528:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800452c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	6893      	ldr	r3, [r2, #8]
 8004532:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004536:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004542:	4620      	mov	r0, r4
 8004544:	f7ff ffa5 	bl	8004492 <UART_CheckIdleState>
}
 8004548:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800454a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800454e:	f7fd ff27 	bl	80023a0 <HAL_UART_MspInit>
 8004552:	e7d9      	b.n	8004508 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fee9 	bl	800432c <UART_AdvFeatureConfig>
 800455a:	e7e3      	b.n	8004524 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800455c:	2001      	movs	r0, #1
}
 800455e:	4770      	bx	lr

08004560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004564:	f7fd feaa 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004568:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800456a:	e003      	b.n	8004574 <LoopCopyDataInit>

0800456c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800456e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004570:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004572:	3104      	adds	r1, #4

08004574 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004574:	480a      	ldr	r0, [pc, #40]	; (80045a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004578:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800457a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800457c:	d3f6      	bcc.n	800456c <CopyDataInit>
	ldr	r2, =_sbss
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004580:	e002      	b.n	8004588 <LoopFillZerobss>

08004582 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004582:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004584:	f842 3b04 	str.w	r3, [r2], #4

08004588 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <LoopForever+0x16>)
	cmp	r2, r3
 800458a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800458c:	d3f9      	bcc.n	8004582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800458e:	f000 f817 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004592:	f7fd fd77 	bl	8002084 <main>

08004596 <LoopForever>:

LoopForever:
    b LoopForever
 8004596:	e7fe      	b.n	8004596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004598:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800459c:	0800ba00 	.word	0x0800ba00
	ldr	r0, =_sdata
 80045a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80045a4:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 80045a8:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 80045ac:	20000d80 	.word	0x20000d80

080045b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <ADC1_2_IRQHandler>
	...

080045b4 <__errno>:
 80045b4:	4b01      	ldr	r3, [pc, #4]	; (80045bc <__errno+0x8>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000002c 	.word	0x2000002c

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0d      	ldr	r6, [pc, #52]	; (80045f8 <__libc_init_array+0x38>)
 80045c4:	4c0d      	ldr	r4, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c6:	1ba4      	subs	r4, r4, r6
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	2500      	movs	r5, #0
 80045cc:	42a5      	cmp	r5, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	4e0b      	ldr	r6, [pc, #44]	; (8004600 <__libc_init_array+0x40>)
 80045d2:	4c0c      	ldr	r4, [pc, #48]	; (8004604 <__libc_init_array+0x44>)
 80045d4:	f002 fda6 	bl	8007124 <_init>
 80045d8:	1ba4      	subs	r4, r4, r6
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	2500      	movs	r5, #0
 80045de:	42a5      	cmp	r5, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e8:	4798      	blx	r3
 80045ea:	3501      	adds	r5, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f2:	4798      	blx	r3
 80045f4:	3501      	adds	r5, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	0800b9f0 	.word	0x0800b9f0
 80045fc:	0800b9f0 	.word	0x0800b9f0
 8004600:	0800b9f0 	.word	0x0800b9f0
 8004604:	0800b9f4 	.word	0x0800b9f4

08004608 <memcpy>:
 8004608:	b510      	push	{r4, lr}
 800460a:	1e43      	subs	r3, r0, #1
 800460c:	440a      	add	r2, r1
 800460e:	4291      	cmp	r1, r2
 8004610:	d100      	bne.n	8004614 <memcpy+0xc>
 8004612:	bd10      	pop	{r4, pc}
 8004614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800461c:	e7f7      	b.n	800460e <memcpy+0x6>

0800461e <memmove>:
 800461e:	4288      	cmp	r0, r1
 8004620:	b510      	push	{r4, lr}
 8004622:	eb01 0302 	add.w	r3, r1, r2
 8004626:	d807      	bhi.n	8004638 <memmove+0x1a>
 8004628:	1e42      	subs	r2, r0, #1
 800462a:	4299      	cmp	r1, r3
 800462c:	d00a      	beq.n	8004644 <memmove+0x26>
 800462e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004632:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004636:	e7f8      	b.n	800462a <memmove+0xc>
 8004638:	4283      	cmp	r3, r0
 800463a:	d9f5      	bls.n	8004628 <memmove+0xa>
 800463c:	1881      	adds	r1, r0, r2
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	42d3      	cmn	r3, r2
 8004642:	d100      	bne.n	8004646 <memmove+0x28>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800464a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800464e:	e7f7      	b.n	8004640 <memmove+0x22>

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <_scanf_float>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	469a      	mov	sl, r3
 8004666:	688b      	ldr	r3, [r1, #8]
 8004668:	4616      	mov	r6, r2
 800466a:	1e5a      	subs	r2, r3, #1
 800466c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004670:	b087      	sub	sp, #28
 8004672:	bf83      	ittte	hi
 8004674:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004678:	189b      	addhi	r3, r3, r2
 800467a:	9301      	strhi	r3, [sp, #4]
 800467c:	2300      	movls	r3, #0
 800467e:	bf86      	itte	hi
 8004680:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004684:	608b      	strhi	r3, [r1, #8]
 8004686:	9301      	strls	r3, [sp, #4]
 8004688:	680b      	ldr	r3, [r1, #0]
 800468a:	4688      	mov	r8, r1
 800468c:	f04f 0b00 	mov.w	fp, #0
 8004690:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004694:	f848 3b1c 	str.w	r3, [r8], #28
 8004698:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800469c:	4607      	mov	r7, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	4645      	mov	r5, r8
 80046a2:	465a      	mov	r2, fp
 80046a4:	46d9      	mov	r9, fp
 80046a6:	f8cd b008 	str.w	fp, [sp, #8]
 80046aa:	68a1      	ldr	r1, [r4, #8]
 80046ac:	b181      	cbz	r1, 80046d0 <_scanf_float+0x70>
 80046ae:	6833      	ldr	r3, [r6, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b49      	cmp	r3, #73	; 0x49
 80046b4:	d071      	beq.n	800479a <_scanf_float+0x13a>
 80046b6:	d84d      	bhi.n	8004754 <_scanf_float+0xf4>
 80046b8:	2b39      	cmp	r3, #57	; 0x39
 80046ba:	d840      	bhi.n	800473e <_scanf_float+0xde>
 80046bc:	2b31      	cmp	r3, #49	; 0x31
 80046be:	f080 8088 	bcs.w	80047d2 <_scanf_float+0x172>
 80046c2:	2b2d      	cmp	r3, #45	; 0x2d
 80046c4:	f000 8090 	beq.w	80047e8 <_scanf_float+0x188>
 80046c8:	d815      	bhi.n	80046f6 <_scanf_float+0x96>
 80046ca:	2b2b      	cmp	r3, #43	; 0x2b
 80046cc:	f000 808c 	beq.w	80047e8 <_scanf_float+0x188>
 80046d0:	f1b9 0f00 	cmp.w	r9, #0
 80046d4:	d003      	beq.n	80046de <_scanf_float+0x7e>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	3a01      	subs	r2, #1
 80046e0:	2a01      	cmp	r2, #1
 80046e2:	f200 80ea 	bhi.w	80048ba <_scanf_float+0x25a>
 80046e6:	4545      	cmp	r5, r8
 80046e8:	f200 80dc 	bhi.w	80048a4 <_scanf_float+0x244>
 80046ec:	2601      	movs	r6, #1
 80046ee:	4630      	mov	r0, r6
 80046f0:	b007      	add	sp, #28
 80046f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f6:	2b2e      	cmp	r3, #46	; 0x2e
 80046f8:	f000 809f 	beq.w	800483a <_scanf_float+0x1da>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d1e7      	bne.n	80046d0 <_scanf_float+0x70>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004706:	d064      	beq.n	80047d2 <_scanf_float+0x172>
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	f109 0901 	add.w	r9, r9, #1
 8004714:	b11b      	cbz	r3, 800471e <_scanf_float+0xbe>
 8004716:	3b01      	subs	r3, #1
 8004718:	3101      	adds	r1, #1
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	60a1      	str	r1, [r4, #8]
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	3301      	adds	r3, #1
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	6873      	ldr	r3, [r6, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	6073      	str	r3, [r6, #4]
 8004732:	f340 80ac 	ble.w	800488e <_scanf_float+0x22e>
 8004736:	6833      	ldr	r3, [r6, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	6033      	str	r3, [r6, #0]
 800473c:	e7b5      	b.n	80046aa <_scanf_float+0x4a>
 800473e:	2b45      	cmp	r3, #69	; 0x45
 8004740:	f000 8085 	beq.w	800484e <_scanf_float+0x1ee>
 8004744:	2b46      	cmp	r3, #70	; 0x46
 8004746:	d06a      	beq.n	800481e <_scanf_float+0x1be>
 8004748:	2b41      	cmp	r3, #65	; 0x41
 800474a:	d1c1      	bne.n	80046d0 <_scanf_float+0x70>
 800474c:	2a01      	cmp	r2, #1
 800474e:	d1bf      	bne.n	80046d0 <_scanf_float+0x70>
 8004750:	2202      	movs	r2, #2
 8004752:	e046      	b.n	80047e2 <_scanf_float+0x182>
 8004754:	2b65      	cmp	r3, #101	; 0x65
 8004756:	d07a      	beq.n	800484e <_scanf_float+0x1ee>
 8004758:	d818      	bhi.n	800478c <_scanf_float+0x12c>
 800475a:	2b54      	cmp	r3, #84	; 0x54
 800475c:	d066      	beq.n	800482c <_scanf_float+0x1cc>
 800475e:	d811      	bhi.n	8004784 <_scanf_float+0x124>
 8004760:	2b4e      	cmp	r3, #78	; 0x4e
 8004762:	d1b5      	bne.n	80046d0 <_scanf_float+0x70>
 8004764:	2a00      	cmp	r2, #0
 8004766:	d146      	bne.n	80047f6 <_scanf_float+0x196>
 8004768:	f1b9 0f00 	cmp.w	r9, #0
 800476c:	d145      	bne.n	80047fa <_scanf_float+0x19a>
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004774:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004778:	d13f      	bne.n	80047fa <_scanf_float+0x19a>
 800477a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800477e:	6021      	str	r1, [r4, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	e02e      	b.n	80047e2 <_scanf_float+0x182>
 8004784:	2b59      	cmp	r3, #89	; 0x59
 8004786:	d01e      	beq.n	80047c6 <_scanf_float+0x166>
 8004788:	2b61      	cmp	r3, #97	; 0x61
 800478a:	e7de      	b.n	800474a <_scanf_float+0xea>
 800478c:	2b6e      	cmp	r3, #110	; 0x6e
 800478e:	d0e9      	beq.n	8004764 <_scanf_float+0x104>
 8004790:	d815      	bhi.n	80047be <_scanf_float+0x15e>
 8004792:	2b66      	cmp	r3, #102	; 0x66
 8004794:	d043      	beq.n	800481e <_scanf_float+0x1be>
 8004796:	2b69      	cmp	r3, #105	; 0x69
 8004798:	d19a      	bne.n	80046d0 <_scanf_float+0x70>
 800479a:	f1bb 0f00 	cmp.w	fp, #0
 800479e:	d138      	bne.n	8004812 <_scanf_float+0x1b2>
 80047a0:	f1b9 0f00 	cmp.w	r9, #0
 80047a4:	d197      	bne.n	80046d6 <_scanf_float+0x76>
 80047a6:	6821      	ldr	r1, [r4, #0]
 80047a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80047ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80047b0:	d195      	bne.n	80046de <_scanf_float+0x7e>
 80047b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80047b6:	6021      	str	r1, [r4, #0]
 80047b8:	f04f 0b01 	mov.w	fp, #1
 80047bc:	e011      	b.n	80047e2 <_scanf_float+0x182>
 80047be:	2b74      	cmp	r3, #116	; 0x74
 80047c0:	d034      	beq.n	800482c <_scanf_float+0x1cc>
 80047c2:	2b79      	cmp	r3, #121	; 0x79
 80047c4:	d184      	bne.n	80046d0 <_scanf_float+0x70>
 80047c6:	f1bb 0f07 	cmp.w	fp, #7
 80047ca:	d181      	bne.n	80046d0 <_scanf_float+0x70>
 80047cc:	f04f 0b08 	mov.w	fp, #8
 80047d0:	e007      	b.n	80047e2 <_scanf_float+0x182>
 80047d2:	eb12 0f0b 	cmn.w	r2, fp
 80047d6:	f47f af7b 	bne.w	80046d0 <_scanf_float+0x70>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80047e0:	6021      	str	r1, [r4, #0]
 80047e2:	702b      	strb	r3, [r5, #0]
 80047e4:	3501      	adds	r5, #1
 80047e6:	e79a      	b.n	800471e <_scanf_float+0xbe>
 80047e8:	6821      	ldr	r1, [r4, #0]
 80047ea:	0608      	lsls	r0, r1, #24
 80047ec:	f57f af70 	bpl.w	80046d0 <_scanf_float+0x70>
 80047f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047f4:	e7f4      	b.n	80047e0 <_scanf_float+0x180>
 80047f6:	2a02      	cmp	r2, #2
 80047f8:	d047      	beq.n	800488a <_scanf_float+0x22a>
 80047fa:	f1bb 0f01 	cmp.w	fp, #1
 80047fe:	d003      	beq.n	8004808 <_scanf_float+0x1a8>
 8004800:	f1bb 0f04 	cmp.w	fp, #4
 8004804:	f47f af64 	bne.w	80046d0 <_scanf_float+0x70>
 8004808:	f10b 0b01 	add.w	fp, fp, #1
 800480c:	fa5f fb8b 	uxtb.w	fp, fp
 8004810:	e7e7      	b.n	80047e2 <_scanf_float+0x182>
 8004812:	f1bb 0f03 	cmp.w	fp, #3
 8004816:	d0f7      	beq.n	8004808 <_scanf_float+0x1a8>
 8004818:	f1bb 0f05 	cmp.w	fp, #5
 800481c:	e7f2      	b.n	8004804 <_scanf_float+0x1a4>
 800481e:	f1bb 0f02 	cmp.w	fp, #2
 8004822:	f47f af55 	bne.w	80046d0 <_scanf_float+0x70>
 8004826:	f04f 0b03 	mov.w	fp, #3
 800482a:	e7da      	b.n	80047e2 <_scanf_float+0x182>
 800482c:	f1bb 0f06 	cmp.w	fp, #6
 8004830:	f47f af4e 	bne.w	80046d0 <_scanf_float+0x70>
 8004834:	f04f 0b07 	mov.w	fp, #7
 8004838:	e7d3      	b.n	80047e2 <_scanf_float+0x182>
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	0588      	lsls	r0, r1, #22
 800483e:	f57f af47 	bpl.w	80046d0 <_scanf_float+0x70>
 8004842:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004846:	6021      	str	r1, [r4, #0]
 8004848:	f8cd 9008 	str.w	r9, [sp, #8]
 800484c:	e7c9      	b.n	80047e2 <_scanf_float+0x182>
 800484e:	6821      	ldr	r1, [r4, #0]
 8004850:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004854:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004858:	d006      	beq.n	8004868 <_scanf_float+0x208>
 800485a:	0548      	lsls	r0, r1, #21
 800485c:	f57f af38 	bpl.w	80046d0 <_scanf_float+0x70>
 8004860:	f1b9 0f00 	cmp.w	r9, #0
 8004864:	f43f af3b 	beq.w	80046de <_scanf_float+0x7e>
 8004868:	0588      	lsls	r0, r1, #22
 800486a:	bf58      	it	pl
 800486c:	9802      	ldrpl	r0, [sp, #8]
 800486e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004872:	bf58      	it	pl
 8004874:	eba9 0000 	subpl.w	r0, r9, r0
 8004878:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800487c:	bf58      	it	pl
 800487e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004882:	6021      	str	r1, [r4, #0]
 8004884:	f04f 0900 	mov.w	r9, #0
 8004888:	e7ab      	b.n	80047e2 <_scanf_float+0x182>
 800488a:	2203      	movs	r2, #3
 800488c:	e7a9      	b.n	80047e2 <_scanf_float+0x182>
 800488e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004892:	9205      	str	r2, [sp, #20]
 8004894:	4631      	mov	r1, r6
 8004896:	4638      	mov	r0, r7
 8004898:	4798      	blx	r3
 800489a:	9a05      	ldr	r2, [sp, #20]
 800489c:	2800      	cmp	r0, #0
 800489e:	f43f af04 	beq.w	80046aa <_scanf_float+0x4a>
 80048a2:	e715      	b.n	80046d0 <_scanf_float+0x70>
 80048a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80048ac:	4632      	mov	r2, r6
 80048ae:	4638      	mov	r0, r7
 80048b0:	4798      	blx	r3
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	e715      	b.n	80046e6 <_scanf_float+0x86>
 80048ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d80a      	bhi.n	80048d8 <_scanf_float+0x278>
 80048c2:	f1bb 0f02 	cmp.w	fp, #2
 80048c6:	d968      	bls.n	800499a <_scanf_float+0x33a>
 80048c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80048cc:	fa5f fb8b 	uxtb.w	fp, fp
 80048d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80048d4:	455d      	cmp	r5, fp
 80048d6:	d14b      	bne.n	8004970 <_scanf_float+0x310>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	05da      	lsls	r2, r3, #23
 80048dc:	d51f      	bpl.n	800491e <_scanf_float+0x2be>
 80048de:	055b      	lsls	r3, r3, #21
 80048e0:	d468      	bmi.n	80049b4 <_scanf_float+0x354>
 80048e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	2965      	cmp	r1, #101	; 0x65
 80048ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80048ee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	d00d      	beq.n	8004912 <_scanf_float+0x2b2>
 80048f6:	2945      	cmp	r1, #69	; 0x45
 80048f8:	d00b      	beq.n	8004912 <_scanf_float+0x2b2>
 80048fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048fe:	4632      	mov	r2, r6
 8004900:	4638      	mov	r0, r7
 8004902:	4798      	blx	r3
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800490a:	3b01      	subs	r3, #1
 800490c:	f1a5 0b02 	sub.w	fp, r5, #2
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004916:	4632      	mov	r2, r6
 8004918:	4638      	mov	r0, r7
 800491a:	4798      	blx	r3
 800491c:	465d      	mov	r5, fp
 800491e:	6826      	ldr	r6, [r4, #0]
 8004920:	f016 0610 	ands.w	r6, r6, #16
 8004924:	d17a      	bne.n	8004a1c <_scanf_float+0x3bc>
 8004926:	702e      	strb	r6, [r5, #0]
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d142      	bne.n	80049ba <_scanf_float+0x35a>
 8004934:	9b02      	ldr	r3, [sp, #8]
 8004936:	eba9 0303 	sub.w	r3, r9, r3
 800493a:	425a      	negs	r2, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d149      	bne.n	80049d4 <_scanf_float+0x374>
 8004940:	2200      	movs	r2, #0
 8004942:	4641      	mov	r1, r8
 8004944:	4638      	mov	r0, r7
 8004946:	f000 fea3 	bl	8005690 <_strtod_r>
 800494a:	6825      	ldr	r5, [r4, #0]
 800494c:	f8da 3000 	ldr.w	r3, [sl]
 8004950:	f015 0f02 	tst.w	r5, #2
 8004954:	f103 0204 	add.w	r2, r3, #4
 8004958:	ec59 8b10 	vmov	r8, r9, d0
 800495c:	f8ca 2000 	str.w	r2, [sl]
 8004960:	d043      	beq.n	80049ea <_scanf_float+0x38a>
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	e9c3 8900 	strd	r8, r9, [r3]
 8004968:	68e3      	ldr	r3, [r4, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60e3      	str	r3, [r4, #12]
 800496e:	e6be      	b.n	80046ee <_scanf_float+0x8e>
 8004970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004974:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004978:	4632      	mov	r2, r6
 800497a:	4638      	mov	r0, r7
 800497c:	4798      	blx	r3
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	3b01      	subs	r3, #1
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	e7a6      	b.n	80048d4 <_scanf_float+0x274>
 8004986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800498a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800498e:	4632      	mov	r2, r6
 8004990:	4638      	mov	r0, r7
 8004992:	4798      	blx	r3
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	3b01      	subs	r3, #1
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	4545      	cmp	r5, r8
 800499c:	d8f3      	bhi.n	8004986 <_scanf_float+0x326>
 800499e:	e6a5      	b.n	80046ec <_scanf_float+0x8c>
 80049a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80049a8:	4632      	mov	r2, r6
 80049aa:	4638      	mov	r0, r7
 80049ac:	4798      	blx	r3
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	4545      	cmp	r5, r8
 80049b6:	d8f3      	bhi.n	80049a0 <_scanf_float+0x340>
 80049b8:	e698      	b.n	80046ec <_scanf_float+0x8c>
 80049ba:	9b03      	ldr	r3, [sp, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0bf      	beq.n	8004940 <_scanf_float+0x2e0>
 80049c0:	9904      	ldr	r1, [sp, #16]
 80049c2:	230a      	movs	r3, #10
 80049c4:	4632      	mov	r2, r6
 80049c6:	3101      	adds	r1, #1
 80049c8:	4638      	mov	r0, r7
 80049ca:	f000 feed 	bl	80057a8 <_strtol_r>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	9d04      	ldr	r5, [sp, #16]
 80049d2:	1ac2      	subs	r2, r0, r3
 80049d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80049d8:	429d      	cmp	r5, r3
 80049da:	bf28      	it	cs
 80049dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80049e0:	490f      	ldr	r1, [pc, #60]	; (8004a20 <_scanf_float+0x3c0>)
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f824 	bl	8004a30 <siprintf>
 80049e8:	e7aa      	b.n	8004940 <_scanf_float+0x2e0>
 80049ea:	f015 0504 	ands.w	r5, r5, #4
 80049ee:	d1b8      	bne.n	8004962 <_scanf_float+0x302>
 80049f0:	681f      	ldr	r7, [r3, #0]
 80049f2:	ee10 2a10 	vmov	r2, s0
 80049f6:	464b      	mov	r3, r9
 80049f8:	ee10 0a10 	vmov	r0, s0
 80049fc:	4649      	mov	r1, r9
 80049fe:	f7fc f895 	bl	8000b2c <__aeabi_dcmpun>
 8004a02:	b128      	cbz	r0, 8004a10 <_scanf_float+0x3b0>
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f80d 	bl	8004a24 <nanf>
 8004a0a:	ed87 0a00 	vstr	s0, [r7]
 8004a0e:	e7ab      	b.n	8004968 <_scanf_float+0x308>
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	f7fc f8e8 	bl	8000be8 <__aeabi_d2f>
 8004a18:	6038      	str	r0, [r7, #0]
 8004a1a:	e7a5      	b.n	8004968 <_scanf_float+0x308>
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	e666      	b.n	80046ee <_scanf_float+0x8e>
 8004a20:	0800b728 	.word	0x0800b728

08004a24 <nanf>:
 8004a24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004a2c <nanf+0x8>
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	7fc00000 	.word	0x7fc00000

08004a30 <siprintf>:
 8004a30:	b40e      	push	{r1, r2, r3}
 8004a32:	b500      	push	{lr}
 8004a34:	b09c      	sub	sp, #112	; 0x70
 8004a36:	ab1d      	add	r3, sp, #116	; 0x74
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9006      	str	r0, [sp, #24]
 8004a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a40:	4809      	ldr	r0, [pc, #36]	; (8004a68 <siprintf+0x38>)
 8004a42:	9107      	str	r1, [sp, #28]
 8004a44:	9104      	str	r1, [sp, #16]
 8004a46:	4909      	ldr	r1, [pc, #36]	; (8004a6c <siprintf+0x3c>)
 8004a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a4c:	9105      	str	r1, [sp, #20]
 8004a4e:	6800      	ldr	r0, [r0, #0]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	a902      	add	r1, sp, #8
 8004a54:	f001 feb8 	bl	80067c8 <_svfiprintf_r>
 8004a58:	9b02      	ldr	r3, [sp, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	b01c      	add	sp, #112	; 0x70
 8004a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a64:	b003      	add	sp, #12
 8004a66:	4770      	bx	lr
 8004a68:	2000002c 	.word	0x2000002c
 8004a6c:	ffff0208 	.word	0xffff0208

08004a70 <sulp>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	460d      	mov	r5, r1
 8004a76:	ec45 4b10 	vmov	d0, r4, r5
 8004a7a:	4616      	mov	r6, r2
 8004a7c:	f001 fcae 	bl	80063dc <__ulp>
 8004a80:	ec51 0b10 	vmov	r0, r1, d0
 8004a84:	b17e      	cbz	r6, 8004aa6 <sulp+0x36>
 8004a86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dd09      	ble.n	8004aa6 <sulp+0x36>
 8004a92:	051b      	lsls	r3, r3, #20
 8004a94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a98:	2400      	movs	r4, #0
 8004a9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	f7fb fda9 	bl	80005f8 <__aeabi_dmul>
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}

08004aa8 <_strtod_l>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	461f      	mov	r7, r3
 8004aae:	b0a1      	sub	sp, #132	; 0x84
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4681      	mov	r9, r0
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	460e      	mov	r6, r1
 8004ab8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004aba:	931c      	str	r3, [sp, #112]	; 0x70
 8004abc:	f001 f9af 	bl	8005e1e <__localeconv_l>
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	f7fb fb84 	bl	80001d0 <strlen>
 8004ac8:	f04f 0a00 	mov.w	sl, #0
 8004acc:	4604      	mov	r4, r0
 8004ace:	f04f 0b00 	mov.w	fp, #0
 8004ad2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ad6:	781a      	ldrb	r2, [r3, #0]
 8004ad8:	2a0d      	cmp	r2, #13
 8004ada:	d832      	bhi.n	8004b42 <_strtod_l+0x9a>
 8004adc:	2a09      	cmp	r2, #9
 8004ade:	d236      	bcs.n	8004b4e <_strtod_l+0xa6>
 8004ae0:	2a00      	cmp	r2, #0
 8004ae2:	d03e      	beq.n	8004b62 <_strtod_l+0xba>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ae8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004aea:	782b      	ldrb	r3, [r5, #0]
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	f040 80ac 	bne.w	8004c4a <_strtod_l+0x1a2>
 8004af2:	786b      	ldrb	r3, [r5, #1]
 8004af4:	2b58      	cmp	r3, #88	; 0x58
 8004af6:	d001      	beq.n	8004afc <_strtod_l+0x54>
 8004af8:	2b78      	cmp	r3, #120	; 0x78
 8004afa:	d167      	bne.n	8004bcc <_strtod_l+0x124>
 8004afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	ab1c      	add	r3, sp, #112	; 0x70
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	9702      	str	r7, [sp, #8]
 8004b06:	ab1d      	add	r3, sp, #116	; 0x74
 8004b08:	4a88      	ldr	r2, [pc, #544]	; (8004d2c <_strtod_l+0x284>)
 8004b0a:	a91b      	add	r1, sp, #108	; 0x6c
 8004b0c:	4648      	mov	r0, r9
 8004b0e:	f000 feac 	bl	800586a <__gethex>
 8004b12:	f010 0407 	ands.w	r4, r0, #7
 8004b16:	4606      	mov	r6, r0
 8004b18:	d005      	beq.n	8004b26 <_strtod_l+0x7e>
 8004b1a:	2c06      	cmp	r4, #6
 8004b1c:	d12b      	bne.n	8004b76 <_strtod_l+0xce>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	2300      	movs	r3, #0
 8004b22:	951b      	str	r5, [sp, #108]	; 0x6c
 8004b24:	930d      	str	r3, [sp, #52]	; 0x34
 8004b26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 859a 	bne.w	8005662 <_strtod_l+0xbba>
 8004b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b30:	b1e3      	cbz	r3, 8004b6c <_strtod_l+0xc4>
 8004b32:	4652      	mov	r2, sl
 8004b34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b38:	ec43 2b10 	vmov	d0, r2, r3
 8004b3c:	b021      	add	sp, #132	; 0x84
 8004b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b42:	2a2b      	cmp	r2, #43	; 0x2b
 8004b44:	d015      	beq.n	8004b72 <_strtod_l+0xca>
 8004b46:	2a2d      	cmp	r2, #45	; 0x2d
 8004b48:	d004      	beq.n	8004b54 <_strtod_l+0xac>
 8004b4a:	2a20      	cmp	r2, #32
 8004b4c:	d1ca      	bne.n	8004ae4 <_strtod_l+0x3c>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b52:	e7bf      	b.n	8004ad4 <_strtod_l+0x2c>
 8004b54:	2201      	movs	r2, #1
 8004b56:	920d      	str	r2, [sp, #52]	; 0x34
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1c2      	bne.n	8004ae8 <_strtod_l+0x40>
 8004b62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b64:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 8579 	bne.w	800565e <_strtod_l+0xbb6>
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	465b      	mov	r3, fp
 8004b70:	e7e2      	b.n	8004b38 <_strtod_l+0x90>
 8004b72:	2200      	movs	r2, #0
 8004b74:	e7ef      	b.n	8004b56 <_strtod_l+0xae>
 8004b76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b78:	b13a      	cbz	r2, 8004b8a <_strtod_l+0xe2>
 8004b7a:	2135      	movs	r1, #53	; 0x35
 8004b7c:	a81e      	add	r0, sp, #120	; 0x78
 8004b7e:	f001 fd25 	bl	80065cc <__copybits>
 8004b82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b84:	4648      	mov	r0, r9
 8004b86:	f001 f992 	bl	8005eae <_Bfree>
 8004b8a:	3c01      	subs	r4, #1
 8004b8c:	2c04      	cmp	r4, #4
 8004b8e:	d806      	bhi.n	8004b9e <_strtod_l+0xf6>
 8004b90:	e8df f004 	tbb	[pc, r4]
 8004b94:	1714030a 	.word	0x1714030a
 8004b98:	0a          	.byte	0x0a
 8004b99:	00          	.byte	0x00
 8004b9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004b9e:	0730      	lsls	r0, r6, #28
 8004ba0:	d5c1      	bpl.n	8004b26 <_strtod_l+0x7e>
 8004ba2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004ba6:	e7be      	b.n	8004b26 <_strtod_l+0x7e>
 8004ba8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004bac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004bae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004bb6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004bba:	e7f0      	b.n	8004b9e <_strtod_l+0xf6>
 8004bbc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004d30 <_strtod_l+0x288>
 8004bc0:	e7ed      	b.n	8004b9e <_strtod_l+0xf6>
 8004bc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004bc6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004bca:	e7e8      	b.n	8004b9e <_strtod_l+0xf6>
 8004bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d0f9      	beq.n	8004bcc <_strtod_l+0x124>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0a4      	beq.n	8004b26 <_strtod_l+0x7e>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	2500      	movs	r5, #0
 8004be0:	9306      	str	r3, [sp, #24]
 8004be2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004be4:	9308      	str	r3, [sp, #32]
 8004be6:	9507      	str	r5, [sp, #28]
 8004be8:	9505      	str	r5, [sp, #20]
 8004bea:	220a      	movs	r2, #10
 8004bec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004bee:	7807      	ldrb	r7, [r0, #0]
 8004bf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	2909      	cmp	r1, #9
 8004bf8:	d929      	bls.n	8004c4e <_strtod_l+0x1a6>
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	f8d8 1000 	ldr.w	r1, [r8]
 8004c00:	f002 f872 	bl	8006ce8 <strncmp>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d031      	beq.n	8004c6c <_strtod_l+0x1c4>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	9c05      	ldr	r4, [sp, #20]
 8004c0c:	9004      	str	r0, [sp, #16]
 8004c0e:	463b      	mov	r3, r7
 8004c10:	4602      	mov	r2, r0
 8004c12:	2b65      	cmp	r3, #101	; 0x65
 8004c14:	d001      	beq.n	8004c1a <_strtod_l+0x172>
 8004c16:	2b45      	cmp	r3, #69	; 0x45
 8004c18:	d114      	bne.n	8004c44 <_strtod_l+0x19c>
 8004c1a:	b924      	cbnz	r4, 8004c26 <_strtod_l+0x17e>
 8004c1c:	b910      	cbnz	r0, 8004c24 <_strtod_l+0x17c>
 8004c1e:	9b06      	ldr	r3, [sp, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d09e      	beq.n	8004b62 <_strtod_l+0xba>
 8004c24:	2400      	movs	r4, #0
 8004c26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004c28:	1c73      	adds	r3, r6, #1
 8004c2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c2c:	7873      	ldrb	r3, [r6, #1]
 8004c2e:	2b2b      	cmp	r3, #43	; 0x2b
 8004c30:	d078      	beq.n	8004d24 <_strtod_l+0x27c>
 8004c32:	2b2d      	cmp	r3, #45	; 0x2d
 8004c34:	d070      	beq.n	8004d18 <_strtod_l+0x270>
 8004c36:	f04f 0c00 	mov.w	ip, #0
 8004c3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004c3e:	2f09      	cmp	r7, #9
 8004c40:	d97c      	bls.n	8004d3c <_strtod_l+0x294>
 8004c42:	961b      	str	r6, [sp, #108]	; 0x6c
 8004c44:	f04f 0e00 	mov.w	lr, #0
 8004c48:	e09a      	b.n	8004d80 <_strtod_l+0x2d8>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e7c7      	b.n	8004bde <_strtod_l+0x136>
 8004c4e:	9905      	ldr	r1, [sp, #20]
 8004c50:	2908      	cmp	r1, #8
 8004c52:	bfdd      	ittte	le
 8004c54:	9907      	ldrle	r1, [sp, #28]
 8004c56:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c5a:	9307      	strle	r3, [sp, #28]
 8004c5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004c60:	9b05      	ldr	r3, [sp, #20]
 8004c62:	3001      	adds	r0, #1
 8004c64:	3301      	adds	r3, #1
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c6a:	e7bf      	b.n	8004bec <_strtod_l+0x144>
 8004c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c6e:	191a      	adds	r2, r3, r4
 8004c70:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c72:	9a05      	ldr	r2, [sp, #20]
 8004c74:	5d1b      	ldrb	r3, [r3, r4]
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	d037      	beq.n	8004cea <_strtod_l+0x242>
 8004c7a:	9c05      	ldr	r4, [sp, #20]
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004c82:	2909      	cmp	r1, #9
 8004c84:	d913      	bls.n	8004cae <_strtod_l+0x206>
 8004c86:	2101      	movs	r1, #1
 8004c88:	9104      	str	r1, [sp, #16]
 8004c8a:	e7c2      	b.n	8004c12 <_strtod_l+0x16a>
 8004c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	3001      	adds	r0, #1
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d0f8      	beq.n	8004c8c <_strtod_l+0x1e4>
 8004c9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004c9e:	2a08      	cmp	r2, #8
 8004ca0:	f200 84e4 	bhi.w	800566c <_strtod_l+0xbc4>
 8004ca4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004ca6:	9208      	str	r2, [sp, #32]
 8004ca8:	4602      	mov	r2, r0
 8004caa:	2000      	movs	r0, #0
 8004cac:	4604      	mov	r4, r0
 8004cae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004cb2:	f100 0101 	add.w	r1, r0, #1
 8004cb6:	d012      	beq.n	8004cde <_strtod_l+0x236>
 8004cb8:	440a      	add	r2, r1
 8004cba:	eb00 0c04 	add.w	ip, r0, r4
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	270a      	movs	r7, #10
 8004cc2:	458c      	cmp	ip, r1
 8004cc4:	d113      	bne.n	8004cee <_strtod_l+0x246>
 8004cc6:	1821      	adds	r1, r4, r0
 8004cc8:	2908      	cmp	r1, #8
 8004cca:	f104 0401 	add.w	r4, r4, #1
 8004cce:	4404      	add	r4, r0
 8004cd0:	dc19      	bgt.n	8004d06 <_strtod_l+0x25e>
 8004cd2:	9b07      	ldr	r3, [sp, #28]
 8004cd4:	210a      	movs	r1, #10
 8004cd6:	fb01 e303 	mla	r3, r1, r3, lr
 8004cda:	9307      	str	r3, [sp, #28]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ce0:	1c58      	adds	r0, r3, #1
 8004ce2:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	e7c9      	b.n	8004c7e <_strtod_l+0x1d6>
 8004cea:	9805      	ldr	r0, [sp, #20]
 8004cec:	e7d3      	b.n	8004c96 <_strtod_l+0x1ee>
 8004cee:	2908      	cmp	r1, #8
 8004cf0:	f101 0101 	add.w	r1, r1, #1
 8004cf4:	dc03      	bgt.n	8004cfe <_strtod_l+0x256>
 8004cf6:	9b07      	ldr	r3, [sp, #28]
 8004cf8:	437b      	muls	r3, r7
 8004cfa:	9307      	str	r3, [sp, #28]
 8004cfc:	e7e1      	b.n	8004cc2 <_strtod_l+0x21a>
 8004cfe:	2910      	cmp	r1, #16
 8004d00:	bfd8      	it	le
 8004d02:	437d      	mulle	r5, r7
 8004d04:	e7dd      	b.n	8004cc2 <_strtod_l+0x21a>
 8004d06:	2c10      	cmp	r4, #16
 8004d08:	bfdc      	itt	le
 8004d0a:	210a      	movle	r1, #10
 8004d0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8004d10:	e7e4      	b.n	8004cdc <_strtod_l+0x234>
 8004d12:	2301      	movs	r3, #1
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	e781      	b.n	8004c1c <_strtod_l+0x174>
 8004d18:	f04f 0c01 	mov.w	ip, #1
 8004d1c:	1cb3      	adds	r3, r6, #2
 8004d1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d20:	78b3      	ldrb	r3, [r6, #2]
 8004d22:	e78a      	b.n	8004c3a <_strtod_l+0x192>
 8004d24:	f04f 0c00 	mov.w	ip, #0
 8004d28:	e7f8      	b.n	8004d1c <_strtod_l+0x274>
 8004d2a:	bf00      	nop
 8004d2c:	0800b73c 	.word	0x0800b73c
 8004d30:	7ff00000 	.word	0x7ff00000
 8004d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d36:	1c5f      	adds	r7, r3, #1
 8004d38:	971b      	str	r7, [sp, #108]	; 0x6c
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d0f9      	beq.n	8004d34 <_strtod_l+0x28c>
 8004d40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004d44:	2f08      	cmp	r7, #8
 8004d46:	f63f af7d 	bhi.w	8004c44 <_strtod_l+0x19c>
 8004d4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004d4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d50:	930a      	str	r3, [sp, #40]	; 0x28
 8004d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d54:	1c5f      	adds	r7, r3, #1
 8004d56:	971b      	str	r7, [sp, #108]	; 0x6c
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004d5e:	f1b8 0f09 	cmp.w	r8, #9
 8004d62:	d937      	bls.n	8004dd4 <_strtod_l+0x32c>
 8004d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d66:	1a7f      	subs	r7, r7, r1
 8004d68:	2f08      	cmp	r7, #8
 8004d6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004d6e:	dc37      	bgt.n	8004de0 <_strtod_l+0x338>
 8004d70:	45be      	cmp	lr, r7
 8004d72:	bfa8      	it	ge
 8004d74:	46be      	movge	lr, r7
 8004d76:	f1bc 0f00 	cmp.w	ip, #0
 8004d7a:	d001      	beq.n	8004d80 <_strtod_l+0x2d8>
 8004d7c:	f1ce 0e00 	rsb	lr, lr, #0
 8004d80:	2c00      	cmp	r4, #0
 8004d82:	d151      	bne.n	8004e28 <_strtod_l+0x380>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f47f aece 	bne.w	8004b26 <_strtod_l+0x7e>
 8004d8a:	9a06      	ldr	r2, [sp, #24]
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	f47f aeca 	bne.w	8004b26 <_strtod_l+0x7e>
 8004d92:	9a04      	ldr	r2, [sp, #16]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	f47f aee4 	bne.w	8004b62 <_strtod_l+0xba>
 8004d9a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d9c:	d027      	beq.n	8004dee <_strtod_l+0x346>
 8004d9e:	dc21      	bgt.n	8004de4 <_strtod_l+0x33c>
 8004da0:	2b49      	cmp	r3, #73	; 0x49
 8004da2:	f47f aede 	bne.w	8004b62 <_strtod_l+0xba>
 8004da6:	49a0      	ldr	r1, [pc, #640]	; (8005028 <_strtod_l+0x580>)
 8004da8:	a81b      	add	r0, sp, #108	; 0x6c
 8004daa:	f000 ff91 	bl	8005cd0 <__match>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f43f aed7 	beq.w	8004b62 <_strtod_l+0xba>
 8004db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004db6:	499d      	ldr	r1, [pc, #628]	; (800502c <_strtod_l+0x584>)
 8004db8:	3b01      	subs	r3, #1
 8004dba:	a81b      	add	r0, sp, #108	; 0x6c
 8004dbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8004dbe:	f000 ff87 	bl	8005cd0 <__match>
 8004dc2:	b910      	cbnz	r0, 8004dca <_strtod_l+0x322>
 8004dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004dca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005040 <_strtod_l+0x598>
 8004dce:	f04f 0a00 	mov.w	sl, #0
 8004dd2:	e6a8      	b.n	8004b26 <_strtod_l+0x7e>
 8004dd4:	210a      	movs	r1, #10
 8004dd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004dda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004dde:	e7b8      	b.n	8004d52 <_strtod_l+0x2aa>
 8004de0:	46be      	mov	lr, r7
 8004de2:	e7c8      	b.n	8004d76 <_strtod_l+0x2ce>
 8004de4:	2b69      	cmp	r3, #105	; 0x69
 8004de6:	d0de      	beq.n	8004da6 <_strtod_l+0x2fe>
 8004de8:	2b6e      	cmp	r3, #110	; 0x6e
 8004dea:	f47f aeba 	bne.w	8004b62 <_strtod_l+0xba>
 8004dee:	4990      	ldr	r1, [pc, #576]	; (8005030 <_strtod_l+0x588>)
 8004df0:	a81b      	add	r0, sp, #108	; 0x6c
 8004df2:	f000 ff6d 	bl	8005cd0 <__match>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f43f aeb3 	beq.w	8004b62 <_strtod_l+0xba>
 8004dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b28      	cmp	r3, #40	; 0x28
 8004e02:	d10e      	bne.n	8004e22 <_strtod_l+0x37a>
 8004e04:	aa1e      	add	r2, sp, #120	; 0x78
 8004e06:	498b      	ldr	r1, [pc, #556]	; (8005034 <_strtod_l+0x58c>)
 8004e08:	a81b      	add	r0, sp, #108	; 0x6c
 8004e0a:	f000 ff75 	bl	8005cf8 <__hexnan>
 8004e0e:	2805      	cmp	r0, #5
 8004e10:	d107      	bne.n	8004e22 <_strtod_l+0x37a>
 8004e12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004e18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004e1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004e20:	e681      	b.n	8004b26 <_strtod_l+0x7e>
 8004e22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005048 <_strtod_l+0x5a0>
 8004e26:	e7d2      	b.n	8004dce <_strtod_l+0x326>
 8004e28:	ebae 0302 	sub.w	r3, lr, r2
 8004e2c:	9306      	str	r3, [sp, #24]
 8004e2e:	9b05      	ldr	r3, [sp, #20]
 8004e30:	9807      	ldr	r0, [sp, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf08      	it	eq
 8004e36:	4623      	moveq	r3, r4
 8004e38:	2c10      	cmp	r4, #16
 8004e3a:	9305      	str	r3, [sp, #20]
 8004e3c:	46a0      	mov	r8, r4
 8004e3e:	bfa8      	it	ge
 8004e40:	f04f 0810 	movge.w	r8, #16
 8004e44:	f7fb fb5e 	bl	8000504 <__aeabi_ui2d>
 8004e48:	2c09      	cmp	r4, #9
 8004e4a:	4682      	mov	sl, r0
 8004e4c:	468b      	mov	fp, r1
 8004e4e:	dc13      	bgt.n	8004e78 <_strtod_l+0x3d0>
 8004e50:	9b06      	ldr	r3, [sp, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f43f ae67 	beq.w	8004b26 <_strtod_l+0x7e>
 8004e58:	9b06      	ldr	r3, [sp, #24]
 8004e5a:	dd7a      	ble.n	8004f52 <_strtod_l+0x4aa>
 8004e5c:	2b16      	cmp	r3, #22
 8004e5e:	dc61      	bgt.n	8004f24 <_strtod_l+0x47c>
 8004e60:	4a75      	ldr	r2, [pc, #468]	; (8005038 <_strtod_l+0x590>)
 8004e62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004e66:	e9de 0100 	ldrd	r0, r1, [lr]
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	465b      	mov	r3, fp
 8004e6e:	f7fb fbc3 	bl	80005f8 <__aeabi_dmul>
 8004e72:	4682      	mov	sl, r0
 8004e74:	468b      	mov	fp, r1
 8004e76:	e656      	b.n	8004b26 <_strtod_l+0x7e>
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <_strtod_l+0x590>)
 8004e7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e82:	f7fb fbb9 	bl	80005f8 <__aeabi_dmul>
 8004e86:	4606      	mov	r6, r0
 8004e88:	4628      	mov	r0, r5
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	f7fb fb3a 	bl	8000504 <__aeabi_ui2d>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb f9f8 	bl	800028c <__adddf3>
 8004e9c:	2c0f      	cmp	r4, #15
 8004e9e:	4682      	mov	sl, r0
 8004ea0:	468b      	mov	fp, r1
 8004ea2:	ddd5      	ble.n	8004e50 <_strtod_l+0x3a8>
 8004ea4:	9b06      	ldr	r3, [sp, #24]
 8004ea6:	eba4 0808 	sub.w	r8, r4, r8
 8004eaa:	4498      	add	r8, r3
 8004eac:	f1b8 0f00 	cmp.w	r8, #0
 8004eb0:	f340 8096 	ble.w	8004fe0 <_strtod_l+0x538>
 8004eb4:	f018 030f 	ands.w	r3, r8, #15
 8004eb8:	d00a      	beq.n	8004ed0 <_strtod_l+0x428>
 8004eba:	495f      	ldr	r1, [pc, #380]	; (8005038 <_strtod_l+0x590>)
 8004ebc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec8:	f7fb fb96 	bl	80005f8 <__aeabi_dmul>
 8004ecc:	4682      	mov	sl, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	f038 080f 	bics.w	r8, r8, #15
 8004ed4:	d073      	beq.n	8004fbe <_strtod_l+0x516>
 8004ed6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004eda:	dd47      	ble.n	8004f6c <_strtod_l+0x4c4>
 8004edc:	2400      	movs	r4, #0
 8004ede:	46a0      	mov	r8, r4
 8004ee0:	9407      	str	r4, [sp, #28]
 8004ee2:	9405      	str	r4, [sp, #20]
 8004ee4:	2322      	movs	r3, #34	; 0x22
 8004ee6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005040 <_strtod_l+0x598>
 8004eea:	f8c9 3000 	str.w	r3, [r9]
 8004eee:	f04f 0a00 	mov.w	sl, #0
 8004ef2:	9b07      	ldr	r3, [sp, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f43f ae16 	beq.w	8004b26 <_strtod_l+0x7e>
 8004efa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004efc:	4648      	mov	r0, r9
 8004efe:	f000 ffd6 	bl	8005eae <_Bfree>
 8004f02:	9905      	ldr	r1, [sp, #20]
 8004f04:	4648      	mov	r0, r9
 8004f06:	f000 ffd2 	bl	8005eae <_Bfree>
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	4648      	mov	r0, r9
 8004f0e:	f000 ffce 	bl	8005eae <_Bfree>
 8004f12:	9907      	ldr	r1, [sp, #28]
 8004f14:	4648      	mov	r0, r9
 8004f16:	f000 ffca 	bl	8005eae <_Bfree>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	f000 ffc6 	bl	8005eae <_Bfree>
 8004f22:	e600      	b.n	8004b26 <_strtod_l+0x7e>
 8004f24:	9a06      	ldr	r2, [sp, #24]
 8004f26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	dbba      	blt.n	8004ea4 <_strtod_l+0x3fc>
 8004f2e:	4d42      	ldr	r5, [pc, #264]	; (8005038 <_strtod_l+0x590>)
 8004f30:	f1c4 040f 	rsb	r4, r4, #15
 8004f34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004f38:	4652      	mov	r2, sl
 8004f3a:	465b      	mov	r3, fp
 8004f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f40:	f7fb fb5a 	bl	80005f8 <__aeabi_dmul>
 8004f44:	9b06      	ldr	r3, [sp, #24]
 8004f46:	1b1c      	subs	r4, r3, r4
 8004f48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004f4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f50:	e78d      	b.n	8004e6e <_strtod_l+0x3c6>
 8004f52:	f113 0f16 	cmn.w	r3, #22
 8004f56:	dba5      	blt.n	8004ea4 <_strtod_l+0x3fc>
 8004f58:	4a37      	ldr	r2, [pc, #220]	; (8005038 <_strtod_l+0x590>)
 8004f5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004f5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004f62:	4650      	mov	r0, sl
 8004f64:	4659      	mov	r1, fp
 8004f66:	f7fb fc71 	bl	800084c <__aeabi_ddiv>
 8004f6a:	e782      	b.n	8004e72 <_strtod_l+0x3ca>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4e33      	ldr	r6, [pc, #204]	; (800503c <_strtod_l+0x594>)
 8004f70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004f74:	4650      	mov	r0, sl
 8004f76:	4659      	mov	r1, fp
 8004f78:	461d      	mov	r5, r3
 8004f7a:	f1b8 0f01 	cmp.w	r8, #1
 8004f7e:	dc21      	bgt.n	8004fc4 <_strtod_l+0x51c>
 8004f80:	b10b      	cbz	r3, 8004f86 <_strtod_l+0x4de>
 8004f82:	4682      	mov	sl, r0
 8004f84:	468b      	mov	fp, r1
 8004f86:	4b2d      	ldr	r3, [pc, #180]	; (800503c <_strtod_l+0x594>)
 8004f88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004f8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f90:	4652      	mov	r2, sl
 8004f92:	465b      	mov	r3, fp
 8004f94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004f98:	f7fb fb2e 	bl	80005f8 <__aeabi_dmul>
 8004f9c:	4b28      	ldr	r3, [pc, #160]	; (8005040 <_strtod_l+0x598>)
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	4928      	ldr	r1, [pc, #160]	; (8005044 <_strtod_l+0x59c>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	4682      	mov	sl, r0
 8004fa8:	d898      	bhi.n	8004edc <_strtod_l+0x434>
 8004faa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004fae:	428b      	cmp	r3, r1
 8004fb0:	bf86      	itte	hi
 8004fb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800504c <_strtod_l+0x5a4>
 8004fb6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004fba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	e077      	b.n	80050b4 <_strtod_l+0x60c>
 8004fc4:	f018 0f01 	tst.w	r8, #1
 8004fc8:	d006      	beq.n	8004fd8 <_strtod_l+0x530>
 8004fca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb fb11 	bl	80005f8 <__aeabi_dmul>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	3501      	adds	r5, #1
 8004fda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004fde:	e7cc      	b.n	8004f7a <_strtod_l+0x4d2>
 8004fe0:	d0ed      	beq.n	8004fbe <_strtod_l+0x516>
 8004fe2:	f1c8 0800 	rsb	r8, r8, #0
 8004fe6:	f018 020f 	ands.w	r2, r8, #15
 8004fea:	d00a      	beq.n	8005002 <_strtod_l+0x55a>
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <_strtod_l+0x590>)
 8004fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fc27 	bl	800084c <__aeabi_ddiv>
 8004ffe:	4682      	mov	sl, r0
 8005000:	468b      	mov	fp, r1
 8005002:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005006:	d0da      	beq.n	8004fbe <_strtod_l+0x516>
 8005008:	f1b8 0f1f 	cmp.w	r8, #31
 800500c:	dd20      	ble.n	8005050 <_strtod_l+0x5a8>
 800500e:	2400      	movs	r4, #0
 8005010:	46a0      	mov	r8, r4
 8005012:	9407      	str	r4, [sp, #28]
 8005014:	9405      	str	r4, [sp, #20]
 8005016:	2322      	movs	r3, #34	; 0x22
 8005018:	f04f 0a00 	mov.w	sl, #0
 800501c:	f04f 0b00 	mov.w	fp, #0
 8005020:	f8c9 3000 	str.w	r3, [r9]
 8005024:	e765      	b.n	8004ef2 <_strtod_l+0x44a>
 8005026:	bf00      	nop
 8005028:	0800b72d 	.word	0x0800b72d
 800502c:	0800b730 	.word	0x0800b730
 8005030:	0800b736 	.word	0x0800b736
 8005034:	0800b750 	.word	0x0800b750
 8005038:	0800b7c8 	.word	0x0800b7c8
 800503c:	0800b7a0 	.word	0x0800b7a0
 8005040:	7ff00000 	.word	0x7ff00000
 8005044:	7ca00000 	.word	0x7ca00000
 8005048:	fff80000 	.word	0xfff80000
 800504c:	7fefffff 	.word	0x7fefffff
 8005050:	f018 0310 	ands.w	r3, r8, #16
 8005054:	bf18      	it	ne
 8005056:	236a      	movne	r3, #106	; 0x6a
 8005058:	4da0      	ldr	r5, [pc, #640]	; (80052dc <_strtod_l+0x834>)
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	4650      	mov	r0, sl
 800505e:	4659      	mov	r1, fp
 8005060:	2300      	movs	r3, #0
 8005062:	f1b8 0f00 	cmp.w	r8, #0
 8005066:	f300 810a 	bgt.w	800527e <_strtod_l+0x7d6>
 800506a:	b10b      	cbz	r3, 8005070 <_strtod_l+0x5c8>
 800506c:	4682      	mov	sl, r0
 800506e:	468b      	mov	fp, r1
 8005070:	9b04      	ldr	r3, [sp, #16]
 8005072:	b1bb      	cbz	r3, 80050a4 <_strtod_l+0x5fc>
 8005074:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800507c:	2b00      	cmp	r3, #0
 800507e:	4659      	mov	r1, fp
 8005080:	dd10      	ble.n	80050a4 <_strtod_l+0x5fc>
 8005082:	2b1f      	cmp	r3, #31
 8005084:	f340 8107 	ble.w	8005296 <_strtod_l+0x7ee>
 8005088:	2b34      	cmp	r3, #52	; 0x34
 800508a:	bfde      	ittt	le
 800508c:	3b20      	suble	r3, #32
 800508e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005092:	fa02 f303 	lslle.w	r3, r2, r3
 8005096:	f04f 0a00 	mov.w	sl, #0
 800509a:	bfcc      	ite	gt
 800509c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80050a0:	ea03 0b01 	andle.w	fp, r3, r1
 80050a4:	2200      	movs	r2, #0
 80050a6:	2300      	movs	r3, #0
 80050a8:	4650      	mov	r0, sl
 80050aa:	4659      	mov	r1, fp
 80050ac:	f7fb fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1ac      	bne.n	800500e <_strtod_l+0x566>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	9a05      	ldr	r2, [sp, #20]
 80050ba:	9908      	ldr	r1, [sp, #32]
 80050bc:	4623      	mov	r3, r4
 80050be:	4648      	mov	r0, r9
 80050c0:	f000 ff47 	bl	8005f52 <__s2b>
 80050c4:	9007      	str	r0, [sp, #28]
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f43f af08 	beq.w	8004edc <_strtod_l+0x434>
 80050cc:	9a06      	ldr	r2, [sp, #24]
 80050ce:	9b06      	ldr	r3, [sp, #24]
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	f1c3 0300 	rsb	r3, r3, #0
 80050d6:	bfa8      	it	ge
 80050d8:	2300      	movge	r3, #0
 80050da:	930e      	str	r3, [sp, #56]	; 0x38
 80050dc:	2400      	movs	r4, #0
 80050de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80050e2:	9316      	str	r3, [sp, #88]	; 0x58
 80050e4:	46a0      	mov	r8, r4
 80050e6:	9b07      	ldr	r3, [sp, #28]
 80050e8:	4648      	mov	r0, r9
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	f000 feab 	bl	8005e46 <_Balloc>
 80050f0:	9005      	str	r0, [sp, #20]
 80050f2:	2800      	cmp	r0, #0
 80050f4:	f43f aef6 	beq.w	8004ee4 <_strtod_l+0x43c>
 80050f8:	9b07      	ldr	r3, [sp, #28]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	3202      	adds	r2, #2
 80050fe:	f103 010c 	add.w	r1, r3, #12
 8005102:	0092      	lsls	r2, r2, #2
 8005104:	300c      	adds	r0, #12
 8005106:	f7ff fa7f 	bl	8004608 <memcpy>
 800510a:	aa1e      	add	r2, sp, #120	; 0x78
 800510c:	a91d      	add	r1, sp, #116	; 0x74
 800510e:	ec4b ab10 	vmov	d0, sl, fp
 8005112:	4648      	mov	r0, r9
 8005114:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005118:	f001 f9d6 	bl	80064c8 <__d2b>
 800511c:	901c      	str	r0, [sp, #112]	; 0x70
 800511e:	2800      	cmp	r0, #0
 8005120:	f43f aee0 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005124:	2101      	movs	r1, #1
 8005126:	4648      	mov	r0, r9
 8005128:	f000 ff9f 	bl	800606a <__i2b>
 800512c:	4680      	mov	r8, r0
 800512e:	2800      	cmp	r0, #0
 8005130:	f43f aed8 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005134:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005136:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005138:	2e00      	cmp	r6, #0
 800513a:	bfab      	itete	ge
 800513c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800513e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005140:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005142:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005144:	bfac      	ite	ge
 8005146:	18f7      	addge	r7, r6, r3
 8005148:	1b9d      	sublt	r5, r3, r6
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	1af6      	subs	r6, r6, r3
 800514e:	4416      	add	r6, r2
 8005150:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <_strtod_l+0x838>)
 8005152:	3e01      	subs	r6, #1
 8005154:	429e      	cmp	r6, r3
 8005156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800515a:	f280 80af 	bge.w	80052bc <_strtod_l+0x814>
 800515e:	1b9b      	subs	r3, r3, r6
 8005160:	2b1f      	cmp	r3, #31
 8005162:	eba2 0203 	sub.w	r2, r2, r3
 8005166:	f04f 0101 	mov.w	r1, #1
 800516a:	f300 809b 	bgt.w	80052a4 <_strtod_l+0x7fc>
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	930f      	str	r3, [sp, #60]	; 0x3c
 8005174:	2300      	movs	r3, #0
 8005176:	930a      	str	r3, [sp, #40]	; 0x28
 8005178:	18be      	adds	r6, r7, r2
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	42b7      	cmp	r7, r6
 800517e:	4415      	add	r5, r2
 8005180:	441d      	add	r5, r3
 8005182:	463b      	mov	r3, r7
 8005184:	bfa8      	it	ge
 8005186:	4633      	movge	r3, r6
 8005188:	42ab      	cmp	r3, r5
 800518a:	bfa8      	it	ge
 800518c:	462b      	movge	r3, r5
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfc2      	ittt	gt
 8005192:	1af6      	subgt	r6, r6, r3
 8005194:	1aed      	subgt	r5, r5, r3
 8005196:	1aff      	subgt	r7, r7, r3
 8005198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519a:	b1bb      	cbz	r3, 80051cc <_strtod_l+0x724>
 800519c:	4641      	mov	r1, r8
 800519e:	461a      	mov	r2, r3
 80051a0:	4648      	mov	r0, r9
 80051a2:	f001 f801 	bl	80061a8 <__pow5mult>
 80051a6:	4680      	mov	r8, r0
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f43f ae9b 	beq.w	8004ee4 <_strtod_l+0x43c>
 80051ae:	4601      	mov	r1, r0
 80051b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051b2:	4648      	mov	r0, r9
 80051b4:	f000 ff62 	bl	800607c <__multiply>
 80051b8:	900c      	str	r0, [sp, #48]	; 0x30
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f43f ae92 	beq.w	8004ee4 <_strtod_l+0x43c>
 80051c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051c2:	4648      	mov	r0, r9
 80051c4:	f000 fe73 	bl	8005eae <_Bfree>
 80051c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ca:	931c      	str	r3, [sp, #112]	; 0x70
 80051cc:	2e00      	cmp	r6, #0
 80051ce:	dc7a      	bgt.n	80052c6 <_strtod_l+0x81e>
 80051d0:	9b06      	ldr	r3, [sp, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dd08      	ble.n	80051e8 <_strtod_l+0x740>
 80051d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80051d8:	9905      	ldr	r1, [sp, #20]
 80051da:	4648      	mov	r0, r9
 80051dc:	f000 ffe4 	bl	80061a8 <__pow5mult>
 80051e0:	9005      	str	r0, [sp, #20]
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f43f ae7e 	beq.w	8004ee4 <_strtod_l+0x43c>
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	dd08      	ble.n	80051fe <_strtod_l+0x756>
 80051ec:	462a      	mov	r2, r5
 80051ee:	9905      	ldr	r1, [sp, #20]
 80051f0:	4648      	mov	r0, r9
 80051f2:	f001 f827 	bl	8006244 <__lshift>
 80051f6:	9005      	str	r0, [sp, #20]
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f43f ae73 	beq.w	8004ee4 <_strtod_l+0x43c>
 80051fe:	2f00      	cmp	r7, #0
 8005200:	dd08      	ble.n	8005214 <_strtod_l+0x76c>
 8005202:	4641      	mov	r1, r8
 8005204:	463a      	mov	r2, r7
 8005206:	4648      	mov	r0, r9
 8005208:	f001 f81c 	bl	8006244 <__lshift>
 800520c:	4680      	mov	r8, r0
 800520e:	2800      	cmp	r0, #0
 8005210:	f43f ae68 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005214:	9a05      	ldr	r2, [sp, #20]
 8005216:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005218:	4648      	mov	r0, r9
 800521a:	f001 f881 	bl	8006320 <__mdiff>
 800521e:	4604      	mov	r4, r0
 8005220:	2800      	cmp	r0, #0
 8005222:	f43f ae5f 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005226:	68c3      	ldr	r3, [r0, #12]
 8005228:	930c      	str	r3, [sp, #48]	; 0x30
 800522a:	2300      	movs	r3, #0
 800522c:	60c3      	str	r3, [r0, #12]
 800522e:	4641      	mov	r1, r8
 8005230:	f001 f85c 	bl	80062ec <__mcmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	da55      	bge.n	80052e4 <_strtod_l+0x83c>
 8005238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800523a:	b9e3      	cbnz	r3, 8005276 <_strtod_l+0x7ce>
 800523c:	f1ba 0f00 	cmp.w	sl, #0
 8005240:	d119      	bne.n	8005276 <_strtod_l+0x7ce>
 8005242:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005246:	b9b3      	cbnz	r3, 8005276 <_strtod_l+0x7ce>
 8005248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005254:	d90f      	bls.n	8005276 <_strtod_l+0x7ce>
 8005256:	6963      	ldr	r3, [r4, #20]
 8005258:	b913      	cbnz	r3, 8005260 <_strtod_l+0x7b8>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	2b01      	cmp	r3, #1
 800525e:	dd0a      	ble.n	8005276 <_strtod_l+0x7ce>
 8005260:	4621      	mov	r1, r4
 8005262:	2201      	movs	r2, #1
 8005264:	4648      	mov	r0, r9
 8005266:	f000 ffed 	bl	8006244 <__lshift>
 800526a:	4641      	mov	r1, r8
 800526c:	4604      	mov	r4, r0
 800526e:	f001 f83d 	bl	80062ec <__mcmp>
 8005272:	2800      	cmp	r0, #0
 8005274:	dc67      	bgt.n	8005346 <_strtod_l+0x89e>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d171      	bne.n	8005360 <_strtod_l+0x8b8>
 800527c:	e63d      	b.n	8004efa <_strtod_l+0x452>
 800527e:	f018 0f01 	tst.w	r8, #1
 8005282:	d004      	beq.n	800528e <_strtod_l+0x7e6>
 8005284:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005288:	f7fb f9b6 	bl	80005f8 <__aeabi_dmul>
 800528c:	2301      	movs	r3, #1
 800528e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005292:	3508      	adds	r5, #8
 8005294:	e6e5      	b.n	8005062 <_strtod_l+0x5ba>
 8005296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	ea03 0a0a 	and.w	sl, r3, sl
 80052a2:	e6ff      	b.n	80050a4 <_strtod_l+0x5fc>
 80052a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80052a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80052ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80052b0:	36e2      	adds	r6, #226	; 0xe2
 80052b2:	fa01 f306 	lsl.w	r3, r1, r6
 80052b6:	930a      	str	r3, [sp, #40]	; 0x28
 80052b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80052ba:	e75d      	b.n	8005178 <_strtod_l+0x6d0>
 80052bc:	2300      	movs	r3, #0
 80052be:	930a      	str	r3, [sp, #40]	; 0x28
 80052c0:	2301      	movs	r3, #1
 80052c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80052c4:	e758      	b.n	8005178 <_strtod_l+0x6d0>
 80052c6:	4632      	mov	r2, r6
 80052c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052ca:	4648      	mov	r0, r9
 80052cc:	f000 ffba 	bl	8006244 <__lshift>
 80052d0:	901c      	str	r0, [sp, #112]	; 0x70
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f47f af7c 	bne.w	80051d0 <_strtod_l+0x728>
 80052d8:	e604      	b.n	8004ee4 <_strtod_l+0x43c>
 80052da:	bf00      	nop
 80052dc:	0800b768 	.word	0x0800b768
 80052e0:	fffffc02 	.word	0xfffffc02
 80052e4:	465d      	mov	r5, fp
 80052e6:	f040 8086 	bne.w	80053f6 <_strtod_l+0x94e>
 80052ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052f0:	b32a      	cbz	r2, 800533e <_strtod_l+0x896>
 80052f2:	4aaf      	ldr	r2, [pc, #700]	; (80055b0 <_strtod_l+0xb08>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d153      	bne.n	80053a0 <_strtod_l+0x8f8>
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	4650      	mov	r0, sl
 80052fc:	b1d3      	cbz	r3, 8005334 <_strtod_l+0x88c>
 80052fe:	4aad      	ldr	r2, [pc, #692]	; (80055b4 <_strtod_l+0xb0c>)
 8005300:	402a      	ands	r2, r5
 8005302:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800530a:	d816      	bhi.n	800533a <_strtod_l+0x892>
 800530c:	0d12      	lsrs	r2, r2, #20
 800530e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	4298      	cmp	r0, r3
 8005318:	d142      	bne.n	80053a0 <_strtod_l+0x8f8>
 800531a:	4ba7      	ldr	r3, [pc, #668]	; (80055b8 <_strtod_l+0xb10>)
 800531c:	429d      	cmp	r5, r3
 800531e:	d102      	bne.n	8005326 <_strtod_l+0x87e>
 8005320:	3001      	adds	r0, #1
 8005322:	f43f addf 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005326:	4ba3      	ldr	r3, [pc, #652]	; (80055b4 <_strtod_l+0xb0c>)
 8005328:	402b      	ands	r3, r5
 800532a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800532e:	f04f 0a00 	mov.w	sl, #0
 8005332:	e7a0      	b.n	8005276 <_strtod_l+0x7ce>
 8005334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005338:	e7ed      	b.n	8005316 <_strtod_l+0x86e>
 800533a:	460b      	mov	r3, r1
 800533c:	e7eb      	b.n	8005316 <_strtod_l+0x86e>
 800533e:	bb7b      	cbnz	r3, 80053a0 <_strtod_l+0x8f8>
 8005340:	f1ba 0f00 	cmp.w	sl, #0
 8005344:	d12c      	bne.n	80053a0 <_strtod_l+0x8f8>
 8005346:	9904      	ldr	r1, [sp, #16]
 8005348:	4a9a      	ldr	r2, [pc, #616]	; (80055b4 <_strtod_l+0xb0c>)
 800534a:	465b      	mov	r3, fp
 800534c:	b1f1      	cbz	r1, 800538c <_strtod_l+0x8e4>
 800534e:	ea02 010b 	and.w	r1, r2, fp
 8005352:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005356:	dc19      	bgt.n	800538c <_strtod_l+0x8e4>
 8005358:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800535c:	f77f ae5b 	ble.w	8005016 <_strtod_l+0x56e>
 8005360:	4a96      	ldr	r2, [pc, #600]	; (80055bc <_strtod_l+0xb14>)
 8005362:	2300      	movs	r3, #0
 8005364:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005370:	f7fb f942 	bl	80005f8 <__aeabi_dmul>
 8005374:	4682      	mov	sl, r0
 8005376:	468b      	mov	fp, r1
 8005378:	2900      	cmp	r1, #0
 800537a:	f47f adbe 	bne.w	8004efa <_strtod_l+0x452>
 800537e:	2800      	cmp	r0, #0
 8005380:	f47f adbb 	bne.w	8004efa <_strtod_l+0x452>
 8005384:	2322      	movs	r3, #34	; 0x22
 8005386:	f8c9 3000 	str.w	r3, [r9]
 800538a:	e5b6      	b.n	8004efa <_strtod_l+0x452>
 800538c:	4013      	ands	r3, r2
 800538e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005392:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005396:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800539a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800539e:	e76a      	b.n	8005276 <_strtod_l+0x7ce>
 80053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a2:	b193      	cbz	r3, 80053ca <_strtod_l+0x922>
 80053a4:	422b      	tst	r3, r5
 80053a6:	f43f af66 	beq.w	8005276 <_strtod_l+0x7ce>
 80053aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	4650      	mov	r0, sl
 80053b0:	4659      	mov	r1, fp
 80053b2:	b173      	cbz	r3, 80053d2 <_strtod_l+0x92a>
 80053b4:	f7ff fb5c 	bl	8004a70 <sulp>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053c0:	f7fa ff64 	bl	800028c <__adddf3>
 80053c4:	4682      	mov	sl, r0
 80053c6:	468b      	mov	fp, r1
 80053c8:	e755      	b.n	8005276 <_strtod_l+0x7ce>
 80053ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053cc:	ea13 0f0a 	tst.w	r3, sl
 80053d0:	e7e9      	b.n	80053a6 <_strtod_l+0x8fe>
 80053d2:	f7ff fb4d 	bl	8004a70 <sulp>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053de:	f7fa ff53 	bl	8000288 <__aeabi_dsub>
 80053e2:	2200      	movs	r2, #0
 80053e4:	2300      	movs	r3, #0
 80053e6:	4682      	mov	sl, r0
 80053e8:	468b      	mov	fp, r1
 80053ea:	f7fb fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f47f ae11 	bne.w	8005016 <_strtod_l+0x56e>
 80053f4:	e73f      	b.n	8005276 <_strtod_l+0x7ce>
 80053f6:	4641      	mov	r1, r8
 80053f8:	4620      	mov	r0, r4
 80053fa:	f001 f8b4 	bl	8006566 <__ratio>
 80053fe:	ec57 6b10 	vmov	r6, r7, d0
 8005402:	2200      	movs	r2, #0
 8005404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005408:	ee10 0a10 	vmov	r0, s0
 800540c:	4639      	mov	r1, r7
 800540e:	f7fb fb6f 	bl	8000af0 <__aeabi_dcmple>
 8005412:	2800      	cmp	r0, #0
 8005414:	d077      	beq.n	8005506 <_strtod_l+0xa5e>
 8005416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005418:	2b00      	cmp	r3, #0
 800541a:	d04a      	beq.n	80054b2 <_strtod_l+0xa0a>
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <_strtod_l+0xb18>)
 800541e:	2200      	movs	r2, #0
 8005420:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005424:	4f66      	ldr	r7, [pc, #408]	; (80055c0 <_strtod_l+0xb18>)
 8005426:	2600      	movs	r6, #0
 8005428:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <_strtod_l+0xb0c>)
 800542a:	402b      	ands	r3, r5
 800542c:	930f      	str	r3, [sp, #60]	; 0x3c
 800542e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005430:	4b64      	ldr	r3, [pc, #400]	; (80055c4 <_strtod_l+0xb1c>)
 8005432:	429a      	cmp	r2, r3
 8005434:	f040 80ce 	bne.w	80055d4 <_strtod_l+0xb2c>
 8005438:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800543c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005440:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005444:	ec4b ab10 	vmov	d0, sl, fp
 8005448:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800544c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005450:	f000 ffc4 	bl	80063dc <__ulp>
 8005454:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005458:	ec53 2b10 	vmov	r2, r3, d0
 800545c:	f7fb f8cc 	bl	80005f8 <__aeabi_dmul>
 8005460:	4652      	mov	r2, sl
 8005462:	465b      	mov	r3, fp
 8005464:	f7fa ff12 	bl	800028c <__adddf3>
 8005468:	460b      	mov	r3, r1
 800546a:	4952      	ldr	r1, [pc, #328]	; (80055b4 <_strtod_l+0xb0c>)
 800546c:	4a56      	ldr	r2, [pc, #344]	; (80055c8 <_strtod_l+0xb20>)
 800546e:	4019      	ands	r1, r3
 8005470:	4291      	cmp	r1, r2
 8005472:	4682      	mov	sl, r0
 8005474:	d95b      	bls.n	800552e <_strtod_l+0xa86>
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <_strtod_l+0x9e0>
 8005480:	9b08      	ldr	r3, [sp, #32]
 8005482:	3301      	adds	r3, #1
 8005484:	f43f ad2e 	beq.w	8004ee4 <_strtod_l+0x43c>
 8005488:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80055b8 <_strtod_l+0xb10>
 800548c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005490:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005492:	4648      	mov	r0, r9
 8005494:	f000 fd0b 	bl	8005eae <_Bfree>
 8005498:	9905      	ldr	r1, [sp, #20]
 800549a:	4648      	mov	r0, r9
 800549c:	f000 fd07 	bl	8005eae <_Bfree>
 80054a0:	4641      	mov	r1, r8
 80054a2:	4648      	mov	r0, r9
 80054a4:	f000 fd03 	bl	8005eae <_Bfree>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4648      	mov	r0, r9
 80054ac:	f000 fcff 	bl	8005eae <_Bfree>
 80054b0:	e619      	b.n	80050e6 <_strtod_l+0x63e>
 80054b2:	f1ba 0f00 	cmp.w	sl, #0
 80054b6:	d11a      	bne.n	80054ee <_strtod_l+0xa46>
 80054b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054bc:	b9eb      	cbnz	r3, 80054fa <_strtod_l+0xa52>
 80054be:	2200      	movs	r2, #0
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <_strtod_l+0xb18>)
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fb fb09 	bl	8000adc <__aeabi_dcmplt>
 80054ca:	b9c8      	cbnz	r0, 8005500 <_strtod_l+0xa58>
 80054cc:	4630      	mov	r0, r6
 80054ce:	4639      	mov	r1, r7
 80054d0:	2200      	movs	r2, #0
 80054d2:	4b3e      	ldr	r3, [pc, #248]	; (80055cc <_strtod_l+0xb24>)
 80054d4:	f7fb f890 	bl	80005f8 <__aeabi_dmul>
 80054d8:	4606      	mov	r6, r0
 80054da:	460f      	mov	r7, r1
 80054dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80054e0:	9618      	str	r6, [sp, #96]	; 0x60
 80054e2:	9319      	str	r3, [sp, #100]	; 0x64
 80054e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80054e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054ec:	e79c      	b.n	8005428 <_strtod_l+0x980>
 80054ee:	f1ba 0f01 	cmp.w	sl, #1
 80054f2:	d102      	bne.n	80054fa <_strtod_l+0xa52>
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	f43f ad8e 	beq.w	8005016 <_strtod_l+0x56e>
 80054fa:	2200      	movs	r2, #0
 80054fc:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <_strtod_l+0xb28>)
 80054fe:	e78f      	b.n	8005420 <_strtod_l+0x978>
 8005500:	2600      	movs	r6, #0
 8005502:	4f32      	ldr	r7, [pc, #200]	; (80055cc <_strtod_l+0xb24>)
 8005504:	e7ea      	b.n	80054dc <_strtod_l+0xa34>
 8005506:	4b31      	ldr	r3, [pc, #196]	; (80055cc <_strtod_l+0xb24>)
 8005508:	4630      	mov	r0, r6
 800550a:	4639      	mov	r1, r7
 800550c:	2200      	movs	r2, #0
 800550e:	f7fb f873 	bl	80005f8 <__aeabi_dmul>
 8005512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	b933      	cbnz	r3, 8005528 <_strtod_l+0xa80>
 800551a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800551e:	9010      	str	r0, [sp, #64]	; 0x40
 8005520:	9311      	str	r3, [sp, #68]	; 0x44
 8005522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005526:	e7df      	b.n	80054e8 <_strtod_l+0xa40>
 8005528:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800552c:	e7f9      	b.n	8005522 <_strtod_l+0xa7a>
 800552e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ab      	bne.n	8005490 <_strtod_l+0x9e8>
 8005538:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800553c:	0d1b      	lsrs	r3, r3, #20
 800553e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005540:	051b      	lsls	r3, r3, #20
 8005542:	429a      	cmp	r2, r3
 8005544:	465d      	mov	r5, fp
 8005546:	d1a3      	bne.n	8005490 <_strtod_l+0x9e8>
 8005548:	4639      	mov	r1, r7
 800554a:	4630      	mov	r0, r6
 800554c:	f7fb fb04 	bl	8000b58 <__aeabi_d2iz>
 8005550:	f7fa ffe8 	bl	8000524 <__aeabi_i2d>
 8005554:	460b      	mov	r3, r1
 8005556:	4602      	mov	r2, r0
 8005558:	4639      	mov	r1, r7
 800555a:	4630      	mov	r0, r6
 800555c:	f7fa fe94 	bl	8000288 <__aeabi_dsub>
 8005560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	b933      	cbnz	r3, 8005576 <_strtod_l+0xace>
 8005568:	f1ba 0f00 	cmp.w	sl, #0
 800556c:	d103      	bne.n	8005576 <_strtod_l+0xace>
 800556e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005572:	2d00      	cmp	r5, #0
 8005574:	d06d      	beq.n	8005652 <_strtod_l+0xbaa>
 8005576:	a30a      	add	r3, pc, #40	; (adr r3, 80055a0 <_strtod_l+0xaf8>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	4630      	mov	r0, r6
 800557e:	4639      	mov	r1, r7
 8005580:	f7fb faac 	bl	8000adc <__aeabi_dcmplt>
 8005584:	2800      	cmp	r0, #0
 8005586:	f47f acb8 	bne.w	8004efa <_strtod_l+0x452>
 800558a:	a307      	add	r3, pc, #28	; (adr r3, 80055a8 <_strtod_l+0xb00>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8005598:	2800      	cmp	r0, #0
 800559a:	f43f af79 	beq.w	8005490 <_strtod_l+0x9e8>
 800559e:	e4ac      	b.n	8004efa <_strtod_l+0x452>
 80055a0:	94a03595 	.word	0x94a03595
 80055a4:	3fdfffff 	.word	0x3fdfffff
 80055a8:	35afe535 	.word	0x35afe535
 80055ac:	3fe00000 	.word	0x3fe00000
 80055b0:	000fffff 	.word	0x000fffff
 80055b4:	7ff00000 	.word	0x7ff00000
 80055b8:	7fefffff 	.word	0x7fefffff
 80055bc:	39500000 	.word	0x39500000
 80055c0:	3ff00000 	.word	0x3ff00000
 80055c4:	7fe00000 	.word	0x7fe00000
 80055c8:	7c9fffff 	.word	0x7c9fffff
 80055cc:	3fe00000 	.word	0x3fe00000
 80055d0:	bff00000 	.word	0xbff00000
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	b333      	cbz	r3, 8005626 <_strtod_l+0xb7e>
 80055d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055de:	d822      	bhi.n	8005626 <_strtod_l+0xb7e>
 80055e0:	a327      	add	r3, pc, #156	; (adr r3, 8005680 <_strtod_l+0xbd8>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fb fa81 	bl	8000af0 <__aeabi_dcmple>
 80055ee:	b1a0      	cbz	r0, 800561a <_strtod_l+0xb72>
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7fb fad8 	bl	8000ba8 <__aeabi_d2uiz>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	bf08      	it	eq
 80055fc:	2001      	moveq	r0, #1
 80055fe:	f7fa ff81 	bl	8000504 <__aeabi_ui2d>
 8005602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	bb03      	cbnz	r3, 800564c <_strtod_l+0xba4>
 800560a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800560e:	9012      	str	r0, [sp, #72]	; 0x48
 8005610:	9313      	str	r3, [sp, #76]	; 0x4c
 8005612:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005616:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800561a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800561e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	930b      	str	r3, [sp, #44]	; 0x2c
 8005626:	ed9d 0b08 	vldr	d0, [sp, #32]
 800562a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800562e:	f000 fed5 	bl	80063dc <__ulp>
 8005632:	4650      	mov	r0, sl
 8005634:	ec53 2b10 	vmov	r2, r3, d0
 8005638:	4659      	mov	r1, fp
 800563a:	f7fa ffdd 	bl	80005f8 <__aeabi_dmul>
 800563e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005642:	f7fa fe23 	bl	800028c <__adddf3>
 8005646:	4682      	mov	sl, r0
 8005648:	468b      	mov	fp, r1
 800564a:	e772      	b.n	8005532 <_strtod_l+0xa8a>
 800564c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005650:	e7df      	b.n	8005612 <_strtod_l+0xb6a>
 8005652:	a30d      	add	r3, pc, #52	; (adr r3, 8005688 <_strtod_l+0xbe0>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fb fa40 	bl	8000adc <__aeabi_dcmplt>
 800565c:	e79c      	b.n	8005598 <_strtod_l+0xaf0>
 800565e:	2300      	movs	r3, #0
 8005660:	930d      	str	r3, [sp, #52]	; 0x34
 8005662:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	f7ff ba61 	b.w	8004b2e <_strtod_l+0x86>
 800566c:	2b65      	cmp	r3, #101	; 0x65
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f43f ab4e 	beq.w	8004d12 <_strtod_l+0x26a>
 8005676:	2101      	movs	r1, #1
 8005678:	4614      	mov	r4, r2
 800567a:	9104      	str	r1, [sp, #16]
 800567c:	f7ff bacb 	b.w	8004c16 <_strtod_l+0x16e>
 8005680:	ffc00000 	.word	0xffc00000
 8005684:	41dfffff 	.word	0x41dfffff
 8005688:	94a03595 	.word	0x94a03595
 800568c:	3fcfffff 	.word	0x3fcfffff

08005690 <_strtod_r>:
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <_strtod_r+0x18>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b410      	push	{r4}
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	4c04      	ldr	r4, [pc, #16]	; (80056ac <_strtod_r+0x1c>)
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf08      	it	eq
 800569e:	4623      	moveq	r3, r4
 80056a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056a4:	f7ff ba00 	b.w	8004aa8 <_strtod_l>
 80056a8:	2000002c 	.word	0x2000002c
 80056ac:	20000090 	.word	0x20000090

080056b0 <_strtol_l.isra.0>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4680      	mov	r8, r0
 80056b6:	4689      	mov	r9, r1
 80056b8:	4692      	mov	sl, r2
 80056ba:	461e      	mov	r6, r3
 80056bc:	460f      	mov	r7, r1
 80056be:	463d      	mov	r5, r7
 80056c0:	9808      	ldr	r0, [sp, #32]
 80056c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c6:	f000 fba7 	bl	8005e18 <__locale_ctype_ptr_l>
 80056ca:	4420      	add	r0, r4
 80056cc:	7843      	ldrb	r3, [r0, #1]
 80056ce:	f013 0308 	ands.w	r3, r3, #8
 80056d2:	d132      	bne.n	800573a <_strtol_l.isra.0+0x8a>
 80056d4:	2c2d      	cmp	r4, #45	; 0x2d
 80056d6:	d132      	bne.n	800573e <_strtol_l.isra.0+0x8e>
 80056d8:	787c      	ldrb	r4, [r7, #1]
 80056da:	1cbd      	adds	r5, r7, #2
 80056dc:	2201      	movs	r2, #1
 80056de:	2e00      	cmp	r6, #0
 80056e0:	d05d      	beq.n	800579e <_strtol_l.isra.0+0xee>
 80056e2:	2e10      	cmp	r6, #16
 80056e4:	d109      	bne.n	80056fa <_strtol_l.isra.0+0x4a>
 80056e6:	2c30      	cmp	r4, #48	; 0x30
 80056e8:	d107      	bne.n	80056fa <_strtol_l.isra.0+0x4a>
 80056ea:	782b      	ldrb	r3, [r5, #0]
 80056ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056f0:	2b58      	cmp	r3, #88	; 0x58
 80056f2:	d14f      	bne.n	8005794 <_strtol_l.isra.0+0xe4>
 80056f4:	786c      	ldrb	r4, [r5, #1]
 80056f6:	2610      	movs	r6, #16
 80056f8:	3502      	adds	r5, #2
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	bf14      	ite	ne
 80056fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005702:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005706:	2700      	movs	r7, #0
 8005708:	fbb1 fcf6 	udiv	ip, r1, r6
 800570c:	4638      	mov	r0, r7
 800570e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005712:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005716:	2b09      	cmp	r3, #9
 8005718:	d817      	bhi.n	800574a <_strtol_l.isra.0+0x9a>
 800571a:	461c      	mov	r4, r3
 800571c:	42a6      	cmp	r6, r4
 800571e:	dd23      	ble.n	8005768 <_strtol_l.isra.0+0xb8>
 8005720:	1c7b      	adds	r3, r7, #1
 8005722:	d007      	beq.n	8005734 <_strtol_l.isra.0+0x84>
 8005724:	4584      	cmp	ip, r0
 8005726:	d31c      	bcc.n	8005762 <_strtol_l.isra.0+0xb2>
 8005728:	d101      	bne.n	800572e <_strtol_l.isra.0+0x7e>
 800572a:	45a6      	cmp	lr, r4
 800572c:	db19      	blt.n	8005762 <_strtol_l.isra.0+0xb2>
 800572e:	fb00 4006 	mla	r0, r0, r6, r4
 8005732:	2701      	movs	r7, #1
 8005734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005738:	e7eb      	b.n	8005712 <_strtol_l.isra.0+0x62>
 800573a:	462f      	mov	r7, r5
 800573c:	e7bf      	b.n	80056be <_strtol_l.isra.0+0xe>
 800573e:	2c2b      	cmp	r4, #43	; 0x2b
 8005740:	bf04      	itt	eq
 8005742:	1cbd      	addeq	r5, r7, #2
 8005744:	787c      	ldrbeq	r4, [r7, #1]
 8005746:	461a      	mov	r2, r3
 8005748:	e7c9      	b.n	80056de <_strtol_l.isra.0+0x2e>
 800574a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800574e:	2b19      	cmp	r3, #25
 8005750:	d801      	bhi.n	8005756 <_strtol_l.isra.0+0xa6>
 8005752:	3c37      	subs	r4, #55	; 0x37
 8005754:	e7e2      	b.n	800571c <_strtol_l.isra.0+0x6c>
 8005756:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800575a:	2b19      	cmp	r3, #25
 800575c:	d804      	bhi.n	8005768 <_strtol_l.isra.0+0xb8>
 800575e:	3c57      	subs	r4, #87	; 0x57
 8005760:	e7dc      	b.n	800571c <_strtol_l.isra.0+0x6c>
 8005762:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005766:	e7e5      	b.n	8005734 <_strtol_l.isra.0+0x84>
 8005768:	1c7b      	adds	r3, r7, #1
 800576a:	d108      	bne.n	800577e <_strtol_l.isra.0+0xce>
 800576c:	2322      	movs	r3, #34	; 0x22
 800576e:	f8c8 3000 	str.w	r3, [r8]
 8005772:	4608      	mov	r0, r1
 8005774:	f1ba 0f00 	cmp.w	sl, #0
 8005778:	d107      	bne.n	800578a <_strtol_l.isra.0+0xda>
 800577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577e:	b102      	cbz	r2, 8005782 <_strtol_l.isra.0+0xd2>
 8005780:	4240      	negs	r0, r0
 8005782:	f1ba 0f00 	cmp.w	sl, #0
 8005786:	d0f8      	beq.n	800577a <_strtol_l.isra.0+0xca>
 8005788:	b10f      	cbz	r7, 800578e <_strtol_l.isra.0+0xde>
 800578a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800578e:	f8ca 9000 	str.w	r9, [sl]
 8005792:	e7f2      	b.n	800577a <_strtol_l.isra.0+0xca>
 8005794:	2430      	movs	r4, #48	; 0x30
 8005796:	2e00      	cmp	r6, #0
 8005798:	d1af      	bne.n	80056fa <_strtol_l.isra.0+0x4a>
 800579a:	2608      	movs	r6, #8
 800579c:	e7ad      	b.n	80056fa <_strtol_l.isra.0+0x4a>
 800579e:	2c30      	cmp	r4, #48	; 0x30
 80057a0:	d0a3      	beq.n	80056ea <_strtol_l.isra.0+0x3a>
 80057a2:	260a      	movs	r6, #10
 80057a4:	e7a9      	b.n	80056fa <_strtol_l.isra.0+0x4a>
	...

080057a8 <_strtol_r>:
 80057a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057aa:	4c06      	ldr	r4, [pc, #24]	; (80057c4 <_strtol_r+0x1c>)
 80057ac:	4d06      	ldr	r5, [pc, #24]	; (80057c8 <_strtol_r+0x20>)
 80057ae:	6824      	ldr	r4, [r4, #0]
 80057b0:	6a24      	ldr	r4, [r4, #32]
 80057b2:	2c00      	cmp	r4, #0
 80057b4:	bf08      	it	eq
 80057b6:	462c      	moveq	r4, r5
 80057b8:	9400      	str	r4, [sp, #0]
 80057ba:	f7ff ff79 	bl	80056b0 <_strtol_l.isra.0>
 80057be:	b003      	add	sp, #12
 80057c0:	bd30      	pop	{r4, r5, pc}
 80057c2:	bf00      	nop
 80057c4:	2000002c 	.word	0x2000002c
 80057c8:	20000090 	.word	0x20000090

080057cc <rshift>:
 80057cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ce:	6906      	ldr	r6, [r0, #16]
 80057d0:	114b      	asrs	r3, r1, #5
 80057d2:	429e      	cmp	r6, r3
 80057d4:	f100 0414 	add.w	r4, r0, #20
 80057d8:	dd30      	ble.n	800583c <rshift+0x70>
 80057da:	f011 011f 	ands.w	r1, r1, #31
 80057de:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80057e2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80057e6:	d108      	bne.n	80057fa <rshift+0x2e>
 80057e8:	4621      	mov	r1, r4
 80057ea:	42b2      	cmp	r2, r6
 80057ec:	460b      	mov	r3, r1
 80057ee:	d211      	bcs.n	8005814 <rshift+0x48>
 80057f0:	f852 3b04 	ldr.w	r3, [r2], #4
 80057f4:	f841 3b04 	str.w	r3, [r1], #4
 80057f8:	e7f7      	b.n	80057ea <rshift+0x1e>
 80057fa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80057fe:	f1c1 0c20 	rsb	ip, r1, #32
 8005802:	40cd      	lsrs	r5, r1
 8005804:	3204      	adds	r2, #4
 8005806:	4623      	mov	r3, r4
 8005808:	42b2      	cmp	r2, r6
 800580a:	4617      	mov	r7, r2
 800580c:	d30c      	bcc.n	8005828 <rshift+0x5c>
 800580e:	601d      	str	r5, [r3, #0]
 8005810:	b105      	cbz	r5, 8005814 <rshift+0x48>
 8005812:	3304      	adds	r3, #4
 8005814:	1b1a      	subs	r2, r3, r4
 8005816:	42a3      	cmp	r3, r4
 8005818:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800581c:	bf08      	it	eq
 800581e:	2300      	moveq	r3, #0
 8005820:	6102      	str	r2, [r0, #16]
 8005822:	bf08      	it	eq
 8005824:	6143      	streq	r3, [r0, #20]
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	683f      	ldr	r7, [r7, #0]
 800582a:	fa07 f70c 	lsl.w	r7, r7, ip
 800582e:	433d      	orrs	r5, r7
 8005830:	f843 5b04 	str.w	r5, [r3], #4
 8005834:	f852 5b04 	ldr.w	r5, [r2], #4
 8005838:	40cd      	lsrs	r5, r1
 800583a:	e7e5      	b.n	8005808 <rshift+0x3c>
 800583c:	4623      	mov	r3, r4
 800583e:	e7e9      	b.n	8005814 <rshift+0x48>

08005840 <__hexdig_fun>:
 8005840:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005844:	2b09      	cmp	r3, #9
 8005846:	d802      	bhi.n	800584e <__hexdig_fun+0xe>
 8005848:	3820      	subs	r0, #32
 800584a:	b2c0      	uxtb	r0, r0
 800584c:	4770      	bx	lr
 800584e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005852:	2b05      	cmp	r3, #5
 8005854:	d801      	bhi.n	800585a <__hexdig_fun+0x1a>
 8005856:	3847      	subs	r0, #71	; 0x47
 8005858:	e7f7      	b.n	800584a <__hexdig_fun+0xa>
 800585a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800585e:	2b05      	cmp	r3, #5
 8005860:	d801      	bhi.n	8005866 <__hexdig_fun+0x26>
 8005862:	3827      	subs	r0, #39	; 0x27
 8005864:	e7f1      	b.n	800584a <__hexdig_fun+0xa>
 8005866:	2000      	movs	r0, #0
 8005868:	4770      	bx	lr

0800586a <__gethex>:
 800586a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586e:	b08b      	sub	sp, #44	; 0x2c
 8005870:	468a      	mov	sl, r1
 8005872:	9002      	str	r0, [sp, #8]
 8005874:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005876:	9306      	str	r3, [sp, #24]
 8005878:	4690      	mov	r8, r2
 800587a:	f000 fad0 	bl	8005e1e <__localeconv_l>
 800587e:	6803      	ldr	r3, [r0, #0]
 8005880:	9303      	str	r3, [sp, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fa fca4 	bl	80001d0 <strlen>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	9001      	str	r0, [sp, #4]
 800588c:	4403      	add	r3, r0
 800588e:	f04f 0b00 	mov.w	fp, #0
 8005892:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	f8da 3000 	ldr.w	r3, [sl]
 800589c:	3302      	adds	r3, #2
 800589e:	461f      	mov	r7, r3
 80058a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80058a4:	2830      	cmp	r0, #48	; 0x30
 80058a6:	d06c      	beq.n	8005982 <__gethex+0x118>
 80058a8:	f7ff ffca 	bl	8005840 <__hexdig_fun>
 80058ac:	4604      	mov	r4, r0
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d16a      	bne.n	8005988 <__gethex+0x11e>
 80058b2:	9a01      	ldr	r2, [sp, #4]
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	4638      	mov	r0, r7
 80058b8:	f001 fa16 	bl	8006ce8 <strncmp>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d166      	bne.n	800598e <__gethex+0x124>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	5cf8      	ldrb	r0, [r7, r3]
 80058c4:	18fe      	adds	r6, r7, r3
 80058c6:	f7ff ffbb 	bl	8005840 <__hexdig_fun>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d062      	beq.n	8005994 <__gethex+0x12a>
 80058ce:	4633      	mov	r3, r6
 80058d0:	7818      	ldrb	r0, [r3, #0]
 80058d2:	2830      	cmp	r0, #48	; 0x30
 80058d4:	461f      	mov	r7, r3
 80058d6:	f103 0301 	add.w	r3, r3, #1
 80058da:	d0f9      	beq.n	80058d0 <__gethex+0x66>
 80058dc:	f7ff ffb0 	bl	8005840 <__hexdig_fun>
 80058e0:	fab0 f580 	clz	r5, r0
 80058e4:	096d      	lsrs	r5, r5, #5
 80058e6:	4634      	mov	r4, r6
 80058e8:	f04f 0b01 	mov.w	fp, #1
 80058ec:	463a      	mov	r2, r7
 80058ee:	4616      	mov	r6, r2
 80058f0:	3201      	adds	r2, #1
 80058f2:	7830      	ldrb	r0, [r6, #0]
 80058f4:	f7ff ffa4 	bl	8005840 <__hexdig_fun>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d1f8      	bne.n	80058ee <__gethex+0x84>
 80058fc:	9a01      	ldr	r2, [sp, #4]
 80058fe:	9903      	ldr	r1, [sp, #12]
 8005900:	4630      	mov	r0, r6
 8005902:	f001 f9f1 	bl	8006ce8 <strncmp>
 8005906:	b950      	cbnz	r0, 800591e <__gethex+0xb4>
 8005908:	b954      	cbnz	r4, 8005920 <__gethex+0xb6>
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	18f4      	adds	r4, r6, r3
 800590e:	4622      	mov	r2, r4
 8005910:	4616      	mov	r6, r2
 8005912:	3201      	adds	r2, #1
 8005914:	7830      	ldrb	r0, [r6, #0]
 8005916:	f7ff ff93 	bl	8005840 <__hexdig_fun>
 800591a:	2800      	cmp	r0, #0
 800591c:	d1f8      	bne.n	8005910 <__gethex+0xa6>
 800591e:	b10c      	cbz	r4, 8005924 <__gethex+0xba>
 8005920:	1ba4      	subs	r4, r4, r6
 8005922:	00a4      	lsls	r4, r4, #2
 8005924:	7833      	ldrb	r3, [r6, #0]
 8005926:	2b50      	cmp	r3, #80	; 0x50
 8005928:	d001      	beq.n	800592e <__gethex+0xc4>
 800592a:	2b70      	cmp	r3, #112	; 0x70
 800592c:	d140      	bne.n	80059b0 <__gethex+0x146>
 800592e:	7873      	ldrb	r3, [r6, #1]
 8005930:	2b2b      	cmp	r3, #43	; 0x2b
 8005932:	d031      	beq.n	8005998 <__gethex+0x12e>
 8005934:	2b2d      	cmp	r3, #45	; 0x2d
 8005936:	d033      	beq.n	80059a0 <__gethex+0x136>
 8005938:	1c71      	adds	r1, r6, #1
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	7808      	ldrb	r0, [r1, #0]
 8005940:	f7ff ff7e 	bl	8005840 <__hexdig_fun>
 8005944:	1e43      	subs	r3, r0, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b18      	cmp	r3, #24
 800594a:	d831      	bhi.n	80059b0 <__gethex+0x146>
 800594c:	f1a0 0210 	sub.w	r2, r0, #16
 8005950:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005954:	f7ff ff74 	bl	8005840 <__hexdig_fun>
 8005958:	1e43      	subs	r3, r0, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b18      	cmp	r3, #24
 800595e:	d922      	bls.n	80059a6 <__gethex+0x13c>
 8005960:	f1b9 0f00 	cmp.w	r9, #0
 8005964:	d000      	beq.n	8005968 <__gethex+0xfe>
 8005966:	4252      	negs	r2, r2
 8005968:	4414      	add	r4, r2
 800596a:	f8ca 1000 	str.w	r1, [sl]
 800596e:	b30d      	cbz	r5, 80059b4 <__gethex+0x14a>
 8005970:	f1bb 0f00 	cmp.w	fp, #0
 8005974:	bf0c      	ite	eq
 8005976:	2706      	moveq	r7, #6
 8005978:	2700      	movne	r7, #0
 800597a:	4638      	mov	r0, r7
 800597c:	b00b      	add	sp, #44	; 0x2c
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	f10b 0b01 	add.w	fp, fp, #1
 8005986:	e78a      	b.n	800589e <__gethex+0x34>
 8005988:	2500      	movs	r5, #0
 800598a:	462c      	mov	r4, r5
 800598c:	e7ae      	b.n	80058ec <__gethex+0x82>
 800598e:	463e      	mov	r6, r7
 8005990:	2501      	movs	r5, #1
 8005992:	e7c7      	b.n	8005924 <__gethex+0xba>
 8005994:	4604      	mov	r4, r0
 8005996:	e7fb      	b.n	8005990 <__gethex+0x126>
 8005998:	f04f 0900 	mov.w	r9, #0
 800599c:	1cb1      	adds	r1, r6, #2
 800599e:	e7ce      	b.n	800593e <__gethex+0xd4>
 80059a0:	f04f 0901 	mov.w	r9, #1
 80059a4:	e7fa      	b.n	800599c <__gethex+0x132>
 80059a6:	230a      	movs	r3, #10
 80059a8:	fb03 0202 	mla	r2, r3, r2, r0
 80059ac:	3a10      	subs	r2, #16
 80059ae:	e7cf      	b.n	8005950 <__gethex+0xe6>
 80059b0:	4631      	mov	r1, r6
 80059b2:	e7da      	b.n	800596a <__gethex+0x100>
 80059b4:	1bf3      	subs	r3, r6, r7
 80059b6:	3b01      	subs	r3, #1
 80059b8:	4629      	mov	r1, r5
 80059ba:	2b07      	cmp	r3, #7
 80059bc:	dc49      	bgt.n	8005a52 <__gethex+0x1e8>
 80059be:	9802      	ldr	r0, [sp, #8]
 80059c0:	f000 fa41 	bl	8005e46 <_Balloc>
 80059c4:	9b01      	ldr	r3, [sp, #4]
 80059c6:	f100 0914 	add.w	r9, r0, #20
 80059ca:	f04f 0b00 	mov.w	fp, #0
 80059ce:	f1c3 0301 	rsb	r3, r3, #1
 80059d2:	4605      	mov	r5, r0
 80059d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80059d8:	46da      	mov	sl, fp
 80059da:	9308      	str	r3, [sp, #32]
 80059dc:	42b7      	cmp	r7, r6
 80059de:	d33b      	bcc.n	8005a58 <__gethex+0x1ee>
 80059e0:	9804      	ldr	r0, [sp, #16]
 80059e2:	f840 ab04 	str.w	sl, [r0], #4
 80059e6:	eba0 0009 	sub.w	r0, r0, r9
 80059ea:	1080      	asrs	r0, r0, #2
 80059ec:	6128      	str	r0, [r5, #16]
 80059ee:	0147      	lsls	r7, r0, #5
 80059f0:	4650      	mov	r0, sl
 80059f2:	f000 faec 	bl	8005fce <__hi0bits>
 80059f6:	f8d8 6000 	ldr.w	r6, [r8]
 80059fa:	1a3f      	subs	r7, r7, r0
 80059fc:	42b7      	cmp	r7, r6
 80059fe:	dd64      	ble.n	8005aca <__gethex+0x260>
 8005a00:	1bbf      	subs	r7, r7, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 fdfb 	bl	8006600 <__any_on>
 8005a0a:	4682      	mov	sl, r0
 8005a0c:	b178      	cbz	r0, 8005a2e <__gethex+0x1c4>
 8005a0e:	1e7b      	subs	r3, r7, #1
 8005a10:	1159      	asrs	r1, r3, #5
 8005a12:	f003 021f 	and.w	r2, r3, #31
 8005a16:	f04f 0a01 	mov.w	sl, #1
 8005a1a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a1e:	fa0a f202 	lsl.w	r2, sl, r2
 8005a22:	420a      	tst	r2, r1
 8005a24:	d003      	beq.n	8005a2e <__gethex+0x1c4>
 8005a26:	4553      	cmp	r3, sl
 8005a28:	dc46      	bgt.n	8005ab8 <__gethex+0x24e>
 8005a2a:	f04f 0a02 	mov.w	sl, #2
 8005a2e:	4639      	mov	r1, r7
 8005a30:	4628      	mov	r0, r5
 8005a32:	f7ff fecb 	bl	80057cc <rshift>
 8005a36:	443c      	add	r4, r7
 8005a38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	da52      	bge.n	8005ae6 <__gethex+0x27c>
 8005a40:	4629      	mov	r1, r5
 8005a42:	9802      	ldr	r0, [sp, #8]
 8005a44:	f000 fa33 	bl	8005eae <_Bfree>
 8005a48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	27a3      	movs	r7, #163	; 0xa3
 8005a50:	e793      	b.n	800597a <__gethex+0x110>
 8005a52:	3101      	adds	r1, #1
 8005a54:	105b      	asrs	r3, r3, #1
 8005a56:	e7b0      	b.n	80059ba <__gethex+0x150>
 8005a58:	1e73      	subs	r3, r6, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	9a07      	ldr	r2, [sp, #28]
 8005a5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <__gethex+0x22e>
 8005a66:	f1bb 0f20 	cmp.w	fp, #32
 8005a6a:	d107      	bne.n	8005a7c <__gethex+0x212>
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	f8c3 a000 	str.w	sl, [r3]
 8005a72:	3304      	adds	r3, #4
 8005a74:	f04f 0a00 	mov.w	sl, #0
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	46d3      	mov	fp, sl
 8005a7c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005a80:	f7ff fede 	bl	8005840 <__hexdig_fun>
 8005a84:	f000 000f 	and.w	r0, r0, #15
 8005a88:	fa00 f00b 	lsl.w	r0, r0, fp
 8005a8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005a90:	f10b 0b04 	add.w	fp, fp, #4
 8005a94:	9b05      	ldr	r3, [sp, #20]
 8005a96:	e00d      	b.n	8005ab4 <__gethex+0x24a>
 8005a98:	9b05      	ldr	r3, [sp, #20]
 8005a9a:	9a08      	ldr	r2, [sp, #32]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	42bb      	cmp	r3, r7
 8005aa0:	d3e1      	bcc.n	8005a66 <__gethex+0x1fc>
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	9a01      	ldr	r2, [sp, #4]
 8005aa6:	9903      	ldr	r1, [sp, #12]
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	f001 f91d 	bl	8006ce8 <strncmp>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1d8      	bne.n	8005a66 <__gethex+0x1fc>
 8005ab4:	461e      	mov	r6, r3
 8005ab6:	e791      	b.n	80059dc <__gethex+0x172>
 8005ab8:	1eb9      	subs	r1, r7, #2
 8005aba:	4628      	mov	r0, r5
 8005abc:	f000 fda0 	bl	8006600 <__any_on>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d0b2      	beq.n	8005a2a <__gethex+0x1c0>
 8005ac4:	f04f 0a03 	mov.w	sl, #3
 8005ac8:	e7b1      	b.n	8005a2e <__gethex+0x1c4>
 8005aca:	da09      	bge.n	8005ae0 <__gethex+0x276>
 8005acc:	1bf7      	subs	r7, r6, r7
 8005ace:	4629      	mov	r1, r5
 8005ad0:	463a      	mov	r2, r7
 8005ad2:	9802      	ldr	r0, [sp, #8]
 8005ad4:	f000 fbb6 	bl	8006244 <__lshift>
 8005ad8:	1be4      	subs	r4, r4, r7
 8005ada:	4605      	mov	r5, r0
 8005adc:	f100 0914 	add.w	r9, r0, #20
 8005ae0:	f04f 0a00 	mov.w	sl, #0
 8005ae4:	e7a8      	b.n	8005a38 <__gethex+0x1ce>
 8005ae6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	dd6a      	ble.n	8005bc4 <__gethex+0x35a>
 8005aee:	1b04      	subs	r4, r0, r4
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	dc2e      	bgt.n	8005b52 <__gethex+0x2e8>
 8005af4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d022      	beq.n	8005b42 <__gethex+0x2d8>
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d024      	beq.n	8005b4a <__gethex+0x2e0>
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d115      	bne.n	8005b30 <__gethex+0x2c6>
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d113      	bne.n	8005b30 <__gethex+0x2c6>
 8005b08:	2e01      	cmp	r6, #1
 8005b0a:	dc0b      	bgt.n	8005b24 <__gethex+0x2ba>
 8005b0c:	9a06      	ldr	r2, [sp, #24]
 8005b0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	2301      	movs	r3, #1
 8005b16:	612b      	str	r3, [r5, #16]
 8005b18:	f8c9 3000 	str.w	r3, [r9]
 8005b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b1e:	2762      	movs	r7, #98	; 0x62
 8005b20:	601d      	str	r5, [r3, #0]
 8005b22:	e72a      	b.n	800597a <__gethex+0x110>
 8005b24:	1e71      	subs	r1, r6, #1
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fd6a 	bl	8006600 <__any_on>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1ed      	bne.n	8005b0c <__gethex+0x2a2>
 8005b30:	4629      	mov	r1, r5
 8005b32:	9802      	ldr	r0, [sp, #8]
 8005b34:	f000 f9bb 	bl	8005eae <_Bfree>
 8005b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	2750      	movs	r7, #80	; 0x50
 8005b40:	e71b      	b.n	800597a <__gethex+0x110>
 8005b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0e1      	beq.n	8005b0c <__gethex+0x2a2>
 8005b48:	e7f2      	b.n	8005b30 <__gethex+0x2c6>
 8005b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1dd      	bne.n	8005b0c <__gethex+0x2a2>
 8005b50:	e7ee      	b.n	8005b30 <__gethex+0x2c6>
 8005b52:	1e67      	subs	r7, r4, #1
 8005b54:	f1ba 0f00 	cmp.w	sl, #0
 8005b58:	d131      	bne.n	8005bbe <__gethex+0x354>
 8005b5a:	b127      	cbz	r7, 8005b66 <__gethex+0x2fc>
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fd4e 	bl	8006600 <__any_on>
 8005b64:	4682      	mov	sl, r0
 8005b66:	117a      	asrs	r2, r7, #5
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f007 071f 	and.w	r7, r7, #31
 8005b6e:	fa03 f707 	lsl.w	r7, r3, r7
 8005b72:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005b76:	4621      	mov	r1, r4
 8005b78:	421f      	tst	r7, r3
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	bf18      	it	ne
 8005b7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005b82:	1b36      	subs	r6, r6, r4
 8005b84:	f7ff fe22 	bl	80057cc <rshift>
 8005b88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005b8c:	2702      	movs	r7, #2
 8005b8e:	f1ba 0f00 	cmp.w	sl, #0
 8005b92:	d048      	beq.n	8005c26 <__gethex+0x3bc>
 8005b94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d015      	beq.n	8005bc8 <__gethex+0x35e>
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d017      	beq.n	8005bd0 <__gethex+0x366>
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d109      	bne.n	8005bb8 <__gethex+0x34e>
 8005ba4:	f01a 0f02 	tst.w	sl, #2
 8005ba8:	d006      	beq.n	8005bb8 <__gethex+0x34e>
 8005baa:	f8d9 3000 	ldr.w	r3, [r9]
 8005bae:	ea4a 0a03 	orr.w	sl, sl, r3
 8005bb2:	f01a 0f01 	tst.w	sl, #1
 8005bb6:	d10e      	bne.n	8005bd6 <__gethex+0x36c>
 8005bb8:	f047 0710 	orr.w	r7, r7, #16
 8005bbc:	e033      	b.n	8005c26 <__gethex+0x3bc>
 8005bbe:	f04f 0a01 	mov.w	sl, #1
 8005bc2:	e7d0      	b.n	8005b66 <__gethex+0x2fc>
 8005bc4:	2701      	movs	r7, #1
 8005bc6:	e7e2      	b.n	8005b8e <__gethex+0x324>
 8005bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bca:	f1c3 0301 	rsb	r3, r3, #1
 8005bce:	9315      	str	r3, [sp, #84]	; 0x54
 8005bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <__gethex+0x34e>
 8005bd6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005bda:	f105 0314 	add.w	r3, r5, #20
 8005bde:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005be2:	eb03 010a 	add.w	r1, r3, sl
 8005be6:	f04f 0c00 	mov.w	ip, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005bf4:	d01c      	beq.n	8005c30 <__gethex+0x3c6>
 8005bf6:	3201      	adds	r2, #1
 8005bf8:	6002      	str	r2, [r0, #0]
 8005bfa:	2f02      	cmp	r7, #2
 8005bfc:	f105 0314 	add.w	r3, r5, #20
 8005c00:	d138      	bne.n	8005c74 <__gethex+0x40a>
 8005c02:	f8d8 2000 	ldr.w	r2, [r8]
 8005c06:	3a01      	subs	r2, #1
 8005c08:	42b2      	cmp	r2, r6
 8005c0a:	d10a      	bne.n	8005c22 <__gethex+0x3b8>
 8005c0c:	1171      	asrs	r1, r6, #5
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f006 061f 	and.w	r6, r6, #31
 8005c14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c18:	fa02 f606 	lsl.w	r6, r2, r6
 8005c1c:	421e      	tst	r6, r3
 8005c1e:	bf18      	it	ne
 8005c20:	4617      	movne	r7, r2
 8005c22:	f047 0720 	orr.w	r7, r7, #32
 8005c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c28:	601d      	str	r5, [r3, #0]
 8005c2a:	9b06      	ldr	r3, [sp, #24]
 8005c2c:	601c      	str	r4, [r3, #0]
 8005c2e:	e6a4      	b.n	800597a <__gethex+0x110>
 8005c30:	4299      	cmp	r1, r3
 8005c32:	f843 cc04 	str.w	ip, [r3, #-4]
 8005c36:	d8d8      	bhi.n	8005bea <__gethex+0x380>
 8005c38:	68ab      	ldr	r3, [r5, #8]
 8005c3a:	4599      	cmp	r9, r3
 8005c3c:	db12      	blt.n	8005c64 <__gethex+0x3fa>
 8005c3e:	6869      	ldr	r1, [r5, #4]
 8005c40:	9802      	ldr	r0, [sp, #8]
 8005c42:	3101      	adds	r1, #1
 8005c44:	f000 f8ff 	bl	8005e46 <_Balloc>
 8005c48:	692a      	ldr	r2, [r5, #16]
 8005c4a:	3202      	adds	r2, #2
 8005c4c:	f105 010c 	add.w	r1, r5, #12
 8005c50:	4683      	mov	fp, r0
 8005c52:	0092      	lsls	r2, r2, #2
 8005c54:	300c      	adds	r0, #12
 8005c56:	f7fe fcd7 	bl	8004608 <memcpy>
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	9802      	ldr	r0, [sp, #8]
 8005c5e:	f000 f926 	bl	8005eae <_Bfree>
 8005c62:	465d      	mov	r5, fp
 8005c64:	692b      	ldr	r3, [r5, #16]
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005c6c:	612a      	str	r2, [r5, #16]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
 8005c72:	e7c2      	b.n	8005bfa <__gethex+0x390>
 8005c74:	692a      	ldr	r2, [r5, #16]
 8005c76:	454a      	cmp	r2, r9
 8005c78:	dd0b      	ble.n	8005c92 <__gethex+0x428>
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff fda5 	bl	80057cc <rshift>
 8005c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c86:	3401      	adds	r4, #1
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	f6ff aed9 	blt.w	8005a40 <__gethex+0x1d6>
 8005c8e:	2701      	movs	r7, #1
 8005c90:	e7c7      	b.n	8005c22 <__gethex+0x3b8>
 8005c92:	f016 061f 	ands.w	r6, r6, #31
 8005c96:	d0fa      	beq.n	8005c8e <__gethex+0x424>
 8005c98:	449a      	add	sl, r3
 8005c9a:	f1c6 0620 	rsb	r6, r6, #32
 8005c9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005ca2:	f000 f994 	bl	8005fce <__hi0bits>
 8005ca6:	42b0      	cmp	r0, r6
 8005ca8:	dbe7      	blt.n	8005c7a <__gethex+0x410>
 8005caa:	e7f0      	b.n	8005c8e <__gethex+0x424>

08005cac <L_shift>:
 8005cac:	f1c2 0208 	rsb	r2, r2, #8
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	b570      	push	{r4, r5, r6, lr}
 8005cb4:	f1c2 0620 	rsb	r6, r2, #32
 8005cb8:	6843      	ldr	r3, [r0, #4]
 8005cba:	6804      	ldr	r4, [r0, #0]
 8005cbc:	fa03 f506 	lsl.w	r5, r3, r6
 8005cc0:	432c      	orrs	r4, r5
 8005cc2:	40d3      	lsrs	r3, r2
 8005cc4:	6004      	str	r4, [r0, #0]
 8005cc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005cca:	4288      	cmp	r0, r1
 8005ccc:	d3f4      	bcc.n	8005cb8 <L_shift+0xc>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}

08005cd0 <__match>:
 8005cd0:	b530      	push	{r4, r5, lr}
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cda:	b914      	cbnz	r4, 8005ce2 <__match+0x12>
 8005cdc:	6003      	str	r3, [r0, #0]
 8005cde:	2001      	movs	r0, #1
 8005ce0:	bd30      	pop	{r4, r5, pc}
 8005ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005cea:	2d19      	cmp	r5, #25
 8005cec:	bf98      	it	ls
 8005cee:	3220      	addls	r2, #32
 8005cf0:	42a2      	cmp	r2, r4
 8005cf2:	d0f0      	beq.n	8005cd6 <__match+0x6>
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	e7f3      	b.n	8005ce0 <__match+0x10>

08005cf8 <__hexnan>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	680b      	ldr	r3, [r1, #0]
 8005cfe:	6801      	ldr	r1, [r0, #0]
 8005d00:	115f      	asrs	r7, r3, #5
 8005d02:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d06:	f013 031f 	ands.w	r3, r3, #31
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	bf18      	it	ne
 8005d0e:	3704      	addne	r7, #4
 8005d10:	2500      	movs	r5, #0
 8005d12:	1f3e      	subs	r6, r7, #4
 8005d14:	4682      	mov	sl, r0
 8005d16:	4690      	mov	r8, r2
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f847 5c04 	str.w	r5, [r7, #-4]
 8005d1e:	46b1      	mov	r9, r6
 8005d20:	4634      	mov	r4, r6
 8005d22:	9502      	str	r5, [sp, #8]
 8005d24:	46ab      	mov	fp, r5
 8005d26:	784a      	ldrb	r2, [r1, #1]
 8005d28:	1c4b      	adds	r3, r1, #1
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	b342      	cbz	r2, 8005d80 <__hexnan+0x88>
 8005d2e:	4610      	mov	r0, r2
 8005d30:	9105      	str	r1, [sp, #20]
 8005d32:	9204      	str	r2, [sp, #16]
 8005d34:	f7ff fd84 	bl	8005840 <__hexdig_fun>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d143      	bne.n	8005dc4 <__hexnan+0xcc>
 8005d3c:	9a04      	ldr	r2, [sp, #16]
 8005d3e:	9905      	ldr	r1, [sp, #20]
 8005d40:	2a20      	cmp	r2, #32
 8005d42:	d818      	bhi.n	8005d76 <__hexnan+0x7e>
 8005d44:	9b02      	ldr	r3, [sp, #8]
 8005d46:	459b      	cmp	fp, r3
 8005d48:	dd13      	ble.n	8005d72 <__hexnan+0x7a>
 8005d4a:	454c      	cmp	r4, r9
 8005d4c:	d206      	bcs.n	8005d5c <__hexnan+0x64>
 8005d4e:	2d07      	cmp	r5, #7
 8005d50:	dc04      	bgt.n	8005d5c <__hexnan+0x64>
 8005d52:	462a      	mov	r2, r5
 8005d54:	4649      	mov	r1, r9
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7ff ffa8 	bl	8005cac <L_shift>
 8005d5c:	4544      	cmp	r4, r8
 8005d5e:	d944      	bls.n	8005dea <__hexnan+0xf2>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f1a4 0904 	sub.w	r9, r4, #4
 8005d66:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d6a:	f8cd b008 	str.w	fp, [sp, #8]
 8005d6e:	464c      	mov	r4, r9
 8005d70:	461d      	mov	r5, r3
 8005d72:	9903      	ldr	r1, [sp, #12]
 8005d74:	e7d7      	b.n	8005d26 <__hexnan+0x2e>
 8005d76:	2a29      	cmp	r2, #41	; 0x29
 8005d78:	d14a      	bne.n	8005e10 <__hexnan+0x118>
 8005d7a:	3102      	adds	r1, #2
 8005d7c:	f8ca 1000 	str.w	r1, [sl]
 8005d80:	f1bb 0f00 	cmp.w	fp, #0
 8005d84:	d044      	beq.n	8005e10 <__hexnan+0x118>
 8005d86:	454c      	cmp	r4, r9
 8005d88:	d206      	bcs.n	8005d98 <__hexnan+0xa0>
 8005d8a:	2d07      	cmp	r5, #7
 8005d8c:	dc04      	bgt.n	8005d98 <__hexnan+0xa0>
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4649      	mov	r1, r9
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff ff8a 	bl	8005cac <L_shift>
 8005d98:	4544      	cmp	r4, r8
 8005d9a:	d928      	bls.n	8005dee <__hexnan+0xf6>
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	f854 2b04 	ldr.w	r2, [r4], #4
 8005da2:	f843 2b04 	str.w	r2, [r3], #4
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d2f9      	bcs.n	8005d9e <__hexnan+0xa6>
 8005daa:	2200      	movs	r2, #0
 8005dac:	f843 2b04 	str.w	r2, [r3], #4
 8005db0:	429e      	cmp	r6, r3
 8005db2:	d2fb      	bcs.n	8005dac <__hexnan+0xb4>
 8005db4:	6833      	ldr	r3, [r6, #0]
 8005db6:	b91b      	cbnz	r3, 8005dc0 <__hexnan+0xc8>
 8005db8:	4546      	cmp	r6, r8
 8005dba:	d127      	bne.n	8005e0c <__hexnan+0x114>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	6033      	str	r3, [r6, #0]
 8005dc0:	2005      	movs	r0, #5
 8005dc2:	e026      	b.n	8005e12 <__hexnan+0x11a>
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	2d08      	cmp	r5, #8
 8005dc8:	f10b 0b01 	add.w	fp, fp, #1
 8005dcc:	dd06      	ble.n	8005ddc <__hexnan+0xe4>
 8005dce:	4544      	cmp	r4, r8
 8005dd0:	d9cf      	bls.n	8005d72 <__hexnan+0x7a>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005dd8:	2501      	movs	r5, #1
 8005dda:	3c04      	subs	r4, #4
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	f000 000f 	and.w	r0, r0, #15
 8005de2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005de6:	6020      	str	r0, [r4, #0]
 8005de8:	e7c3      	b.n	8005d72 <__hexnan+0x7a>
 8005dea:	2508      	movs	r5, #8
 8005dec:	e7c1      	b.n	8005d72 <__hexnan+0x7a>
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0df      	beq.n	8005db4 <__hexnan+0xbc>
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df8:	f1c3 0320 	rsb	r3, r3, #32
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005e04:	401a      	ands	r2, r3
 8005e06:	f847 2c04 	str.w	r2, [r7, #-4]
 8005e0a:	e7d3      	b.n	8005db4 <__hexnan+0xbc>
 8005e0c:	3e04      	subs	r6, #4
 8005e0e:	e7d1      	b.n	8005db4 <__hexnan+0xbc>
 8005e10:	2004      	movs	r0, #4
 8005e12:	b007      	add	sp, #28
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e18 <__locale_ctype_ptr_l>:
 8005e18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005e1c:	4770      	bx	lr

08005e1e <__localeconv_l>:
 8005e1e:	30f0      	adds	r0, #240	; 0xf0
 8005e20:	4770      	bx	lr

08005e22 <__ascii_mbtowc>:
 8005e22:	b082      	sub	sp, #8
 8005e24:	b901      	cbnz	r1, 8005e28 <__ascii_mbtowc+0x6>
 8005e26:	a901      	add	r1, sp, #4
 8005e28:	b142      	cbz	r2, 8005e3c <__ascii_mbtowc+0x1a>
 8005e2a:	b14b      	cbz	r3, 8005e40 <__ascii_mbtowc+0x1e>
 8005e2c:	7813      	ldrb	r3, [r2, #0]
 8005e2e:	600b      	str	r3, [r1, #0]
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	1c10      	adds	r0, r2, #0
 8005e34:	bf18      	it	ne
 8005e36:	2001      	movne	r0, #1
 8005e38:	b002      	add	sp, #8
 8005e3a:	4770      	bx	lr
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	e7fb      	b.n	8005e38 <__ascii_mbtowc+0x16>
 8005e40:	f06f 0001 	mvn.w	r0, #1
 8005e44:	e7f8      	b.n	8005e38 <__ascii_mbtowc+0x16>

08005e46 <_Balloc>:
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	b93d      	cbnz	r5, 8005e60 <_Balloc+0x1a>
 8005e50:	2010      	movs	r0, #16
 8005e52:	f000 ff69 	bl	8006d28 <malloc>
 8005e56:	6260      	str	r0, [r4, #36]	; 0x24
 8005e58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e5c:	6005      	str	r5, [r0, #0]
 8005e5e:	60c5      	str	r5, [r0, #12]
 8005e60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e62:	68eb      	ldr	r3, [r5, #12]
 8005e64:	b183      	cbz	r3, 8005e88 <_Balloc+0x42>
 8005e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e6e:	b9b8      	cbnz	r0, 8005ea0 <_Balloc+0x5a>
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f506 	lsl.w	r5, r1, r6
 8005e76:	1d6a      	adds	r2, r5, #5
 8005e78:	0092      	lsls	r2, r2, #2
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fbe1 	bl	8006642 <_calloc_r>
 8005e80:	b160      	cbz	r0, 8005e9c <_Balloc+0x56>
 8005e82:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e86:	e00e      	b.n	8005ea6 <_Balloc+0x60>
 8005e88:	2221      	movs	r2, #33	; 0x21
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fbd8 	bl	8006642 <_calloc_r>
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	60e8      	str	r0, [r5, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e4      	bne.n	8005e66 <_Balloc+0x20>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	6802      	ldr	r2, [r0, #0]
 8005ea2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005eac:	e7f7      	b.n	8005e9e <_Balloc+0x58>

08005eae <_Bfree>:
 8005eae:	b570      	push	{r4, r5, r6, lr}
 8005eb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	b93c      	cbnz	r4, 8005ec8 <_Bfree+0x1a>
 8005eb8:	2010      	movs	r0, #16
 8005eba:	f000 ff35 	bl	8006d28 <malloc>
 8005ebe:	6270      	str	r0, [r6, #36]	; 0x24
 8005ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ec4:	6004      	str	r4, [r0, #0]
 8005ec6:	60c4      	str	r4, [r0, #12]
 8005ec8:	b13d      	cbz	r5, 8005eda <_Bfree+0x2c>
 8005eca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ecc:	686a      	ldr	r2, [r5, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005eda:	bd70      	pop	{r4, r5, r6, pc}

08005edc <__multadd>:
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	690d      	ldr	r5, [r1, #16]
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f101 0c14 	add.w	ip, r1, #20
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8dc 0000 	ldr.w	r0, [ip]
 8005ef2:	b281      	uxth	r1, r0
 8005ef4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ef8:	0c0f      	lsrs	r7, r1, #16
 8005efa:	0c00      	lsrs	r0, r0, #16
 8005efc:	fb02 7000 	mla	r0, r2, r0, r7
 8005f00:	b289      	uxth	r1, r1
 8005f02:	3301      	adds	r3, #1
 8005f04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f08:	429d      	cmp	r5, r3
 8005f0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8005f12:	dcec      	bgt.n	8005eee <__multadd+0x12>
 8005f14:	b1d7      	cbz	r7, 8005f4c <__multadd+0x70>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dc12      	bgt.n	8005f42 <__multadd+0x66>
 8005f1c:	6861      	ldr	r1, [r4, #4]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	3101      	adds	r1, #1
 8005f22:	f7ff ff90 	bl	8005e46 <_Balloc>
 8005f26:	6922      	ldr	r2, [r4, #16]
 8005f28:	3202      	adds	r2, #2
 8005f2a:	f104 010c 	add.w	r1, r4, #12
 8005f2e:	4680      	mov	r8, r0
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	300c      	adds	r0, #12
 8005f34:	f7fe fb68 	bl	8004608 <memcpy>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ffb7 	bl	8005eae <_Bfree>
 8005f40:	4644      	mov	r4, r8
 8005f42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f46:	3501      	adds	r5, #1
 8005f48:	615f      	str	r7, [r3, #20]
 8005f4a:	6125      	str	r5, [r4, #16]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f52 <__s2b>:
 8005f52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f56:	460c      	mov	r4, r1
 8005f58:	4615      	mov	r5, r2
 8005f5a:	461f      	mov	r7, r3
 8005f5c:	2209      	movs	r2, #9
 8005f5e:	3308      	adds	r3, #8
 8005f60:	4606      	mov	r6, r0
 8005f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f66:	2100      	movs	r1, #0
 8005f68:	2201      	movs	r2, #1
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	db20      	blt.n	8005fb0 <__s2b+0x5e>
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f7ff ff69 	bl	8005e46 <_Balloc>
 8005f74:	9b08      	ldr	r3, [sp, #32]
 8005f76:	6143      	str	r3, [r0, #20]
 8005f78:	2d09      	cmp	r5, #9
 8005f7a:	f04f 0301 	mov.w	r3, #1
 8005f7e:	6103      	str	r3, [r0, #16]
 8005f80:	dd19      	ble.n	8005fb6 <__s2b+0x64>
 8005f82:	f104 0809 	add.w	r8, r4, #9
 8005f86:	46c1      	mov	r9, r8
 8005f88:	442c      	add	r4, r5
 8005f8a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005f8e:	4601      	mov	r1, r0
 8005f90:	3b30      	subs	r3, #48	; 0x30
 8005f92:	220a      	movs	r2, #10
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffa1 	bl	8005edc <__multadd>
 8005f9a:	45a1      	cmp	r9, r4
 8005f9c:	d1f5      	bne.n	8005f8a <__s2b+0x38>
 8005f9e:	eb08 0405 	add.w	r4, r8, r5
 8005fa2:	3c08      	subs	r4, #8
 8005fa4:	1b2d      	subs	r5, r5, r4
 8005fa6:	1963      	adds	r3, r4, r5
 8005fa8:	42bb      	cmp	r3, r7
 8005faa:	db07      	blt.n	8005fbc <__s2b+0x6a>
 8005fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb0:	0052      	lsls	r2, r2, #1
 8005fb2:	3101      	adds	r1, #1
 8005fb4:	e7d9      	b.n	8005f6a <__s2b+0x18>
 8005fb6:	340a      	adds	r4, #10
 8005fb8:	2509      	movs	r5, #9
 8005fba:	e7f3      	b.n	8005fa4 <__s2b+0x52>
 8005fbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	3b30      	subs	r3, #48	; 0x30
 8005fc4:	220a      	movs	r2, #10
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff ff88 	bl	8005edc <__multadd>
 8005fcc:	e7eb      	b.n	8005fa6 <__s2b+0x54>

08005fce <__hi0bits>:
 8005fce:	0c02      	lsrs	r2, r0, #16
 8005fd0:	0412      	lsls	r2, r2, #16
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	b9b2      	cbnz	r2, 8006004 <__hi0bits+0x36>
 8005fd6:	0403      	lsls	r3, r0, #16
 8005fd8:	2010      	movs	r0, #16
 8005fda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fde:	bf04      	itt	eq
 8005fe0:	021b      	lsleq	r3, r3, #8
 8005fe2:	3008      	addeq	r0, #8
 8005fe4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fe8:	bf04      	itt	eq
 8005fea:	011b      	lsleq	r3, r3, #4
 8005fec:	3004      	addeq	r0, #4
 8005fee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ff2:	bf04      	itt	eq
 8005ff4:	009b      	lsleq	r3, r3, #2
 8005ff6:	3002      	addeq	r0, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db06      	blt.n	800600a <__hi0bits+0x3c>
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	d503      	bpl.n	8006008 <__hi0bits+0x3a>
 8006000:	3001      	adds	r0, #1
 8006002:	4770      	bx	lr
 8006004:	2000      	movs	r0, #0
 8006006:	e7e8      	b.n	8005fda <__hi0bits+0xc>
 8006008:	2020      	movs	r0, #32
 800600a:	4770      	bx	lr

0800600c <__lo0bits>:
 800600c:	6803      	ldr	r3, [r0, #0]
 800600e:	f013 0207 	ands.w	r2, r3, #7
 8006012:	4601      	mov	r1, r0
 8006014:	d00b      	beq.n	800602e <__lo0bits+0x22>
 8006016:	07da      	lsls	r2, r3, #31
 8006018:	d423      	bmi.n	8006062 <__lo0bits+0x56>
 800601a:	0798      	lsls	r0, r3, #30
 800601c:	bf49      	itett	mi
 800601e:	085b      	lsrmi	r3, r3, #1
 8006020:	089b      	lsrpl	r3, r3, #2
 8006022:	2001      	movmi	r0, #1
 8006024:	600b      	strmi	r3, [r1, #0]
 8006026:	bf5c      	itt	pl
 8006028:	600b      	strpl	r3, [r1, #0]
 800602a:	2002      	movpl	r0, #2
 800602c:	4770      	bx	lr
 800602e:	b298      	uxth	r0, r3
 8006030:	b9a8      	cbnz	r0, 800605e <__lo0bits+0x52>
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	2010      	movs	r0, #16
 8006036:	f013 0fff 	tst.w	r3, #255	; 0xff
 800603a:	bf04      	itt	eq
 800603c:	0a1b      	lsreq	r3, r3, #8
 800603e:	3008      	addeq	r0, #8
 8006040:	071a      	lsls	r2, r3, #28
 8006042:	bf04      	itt	eq
 8006044:	091b      	lsreq	r3, r3, #4
 8006046:	3004      	addeq	r0, #4
 8006048:	079a      	lsls	r2, r3, #30
 800604a:	bf04      	itt	eq
 800604c:	089b      	lsreq	r3, r3, #2
 800604e:	3002      	addeq	r0, #2
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	d402      	bmi.n	800605a <__lo0bits+0x4e>
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	d006      	beq.n	8006066 <__lo0bits+0x5a>
 8006058:	3001      	adds	r0, #1
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	4770      	bx	lr
 800605e:	4610      	mov	r0, r2
 8006060:	e7e9      	b.n	8006036 <__lo0bits+0x2a>
 8006062:	2000      	movs	r0, #0
 8006064:	4770      	bx	lr
 8006066:	2020      	movs	r0, #32
 8006068:	4770      	bx	lr

0800606a <__i2b>:
 800606a:	b510      	push	{r4, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	2101      	movs	r1, #1
 8006070:	f7ff fee9 	bl	8005e46 <_Balloc>
 8006074:	2201      	movs	r2, #1
 8006076:	6144      	str	r4, [r0, #20]
 8006078:	6102      	str	r2, [r0, #16]
 800607a:	bd10      	pop	{r4, pc}

0800607c <__multiply>:
 800607c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	4614      	mov	r4, r2
 8006082:	690a      	ldr	r2, [r1, #16]
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	bfb8      	it	lt
 800608a:	460b      	movlt	r3, r1
 800608c:	4688      	mov	r8, r1
 800608e:	bfbc      	itt	lt
 8006090:	46a0      	movlt	r8, r4
 8006092:	461c      	movlt	r4, r3
 8006094:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006098:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800609c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060a4:	eb07 0609 	add.w	r6, r7, r9
 80060a8:	42b3      	cmp	r3, r6
 80060aa:	bfb8      	it	lt
 80060ac:	3101      	addlt	r1, #1
 80060ae:	f7ff feca 	bl	8005e46 <_Balloc>
 80060b2:	f100 0514 	add.w	r5, r0, #20
 80060b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060ba:	462b      	mov	r3, r5
 80060bc:	2200      	movs	r2, #0
 80060be:	4573      	cmp	r3, lr
 80060c0:	d316      	bcc.n	80060f0 <__multiply+0x74>
 80060c2:	f104 0214 	add.w	r2, r4, #20
 80060c6:	f108 0114 	add.w	r1, r8, #20
 80060ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80060ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	9b00      	ldr	r3, [sp, #0]
 80060d6:	9201      	str	r2, [sp, #4]
 80060d8:	4293      	cmp	r3, r2
 80060da:	d80c      	bhi.n	80060f6 <__multiply+0x7a>
 80060dc:	2e00      	cmp	r6, #0
 80060de:	dd03      	ble.n	80060e8 <__multiply+0x6c>
 80060e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05d      	beq.n	80061a4 <__multiply+0x128>
 80060e8:	6106      	str	r6, [r0, #16]
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	f843 2b04 	str.w	r2, [r3], #4
 80060f4:	e7e3      	b.n	80060be <__multiply+0x42>
 80060f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80060fa:	f1bb 0f00 	cmp.w	fp, #0
 80060fe:	d023      	beq.n	8006148 <__multiply+0xcc>
 8006100:	4689      	mov	r9, r1
 8006102:	46ac      	mov	ip, r5
 8006104:	f04f 0800 	mov.w	r8, #0
 8006108:	f859 4b04 	ldr.w	r4, [r9], #4
 800610c:	f8dc a000 	ldr.w	sl, [ip]
 8006110:	b2a3      	uxth	r3, r4
 8006112:	fa1f fa8a 	uxth.w	sl, sl
 8006116:	fb0b a303 	mla	r3, fp, r3, sl
 800611a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800611e:	f8dc 4000 	ldr.w	r4, [ip]
 8006122:	4443      	add	r3, r8
 8006124:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006128:	fb0b 840a 	mla	r4, fp, sl, r8
 800612c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006130:	46e2      	mov	sl, ip
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006138:	454f      	cmp	r7, r9
 800613a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800613e:	f84a 3b04 	str.w	r3, [sl], #4
 8006142:	d82b      	bhi.n	800619c <__multiply+0x120>
 8006144:	f8cc 8004 	str.w	r8, [ip, #4]
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800614e:	3204      	adds	r2, #4
 8006150:	f1ba 0f00 	cmp.w	sl, #0
 8006154:	d020      	beq.n	8006198 <__multiply+0x11c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	4689      	mov	r9, r1
 800615a:	46a8      	mov	r8, r5
 800615c:	f04f 0b00 	mov.w	fp, #0
 8006160:	f8b9 c000 	ldrh.w	ip, [r9]
 8006164:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006168:	fb0a 440c 	mla	r4, sl, ip, r4
 800616c:	445c      	add	r4, fp
 800616e:	46c4      	mov	ip, r8
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006176:	f84c 3b04 	str.w	r3, [ip], #4
 800617a:	f859 3b04 	ldr.w	r3, [r9], #4
 800617e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	fb0a b303 	mla	r3, sl, r3, fp
 8006188:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800618c:	454f      	cmp	r7, r9
 800618e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006192:	d805      	bhi.n	80061a0 <__multiply+0x124>
 8006194:	f8c8 3004 	str.w	r3, [r8, #4]
 8006198:	3504      	adds	r5, #4
 800619a:	e79b      	b.n	80060d4 <__multiply+0x58>
 800619c:	46d4      	mov	ip, sl
 800619e:	e7b3      	b.n	8006108 <__multiply+0x8c>
 80061a0:	46e0      	mov	r8, ip
 80061a2:	e7dd      	b.n	8006160 <__multiply+0xe4>
 80061a4:	3e01      	subs	r6, #1
 80061a6:	e799      	b.n	80060dc <__multiply+0x60>

080061a8 <__pow5mult>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4615      	mov	r5, r2
 80061ae:	f012 0203 	ands.w	r2, r2, #3
 80061b2:	4606      	mov	r6, r0
 80061b4:	460f      	mov	r7, r1
 80061b6:	d007      	beq.n	80061c8 <__pow5mult+0x20>
 80061b8:	3a01      	subs	r2, #1
 80061ba:	4c21      	ldr	r4, [pc, #132]	; (8006240 <__pow5mult+0x98>)
 80061bc:	2300      	movs	r3, #0
 80061be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061c2:	f7ff fe8b 	bl	8005edc <__multadd>
 80061c6:	4607      	mov	r7, r0
 80061c8:	10ad      	asrs	r5, r5, #2
 80061ca:	d035      	beq.n	8006238 <__pow5mult+0x90>
 80061cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061ce:	b93c      	cbnz	r4, 80061e0 <__pow5mult+0x38>
 80061d0:	2010      	movs	r0, #16
 80061d2:	f000 fda9 	bl	8006d28 <malloc>
 80061d6:	6270      	str	r0, [r6, #36]	; 0x24
 80061d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061dc:	6004      	str	r4, [r0, #0]
 80061de:	60c4      	str	r4, [r0, #12]
 80061e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061e8:	b94c      	cbnz	r4, 80061fe <__pow5mult+0x56>
 80061ea:	f240 2171 	movw	r1, #625	; 0x271
 80061ee:	4630      	mov	r0, r6
 80061f0:	f7ff ff3b 	bl	800606a <__i2b>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80061fa:	4604      	mov	r4, r0
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	07eb      	lsls	r3, r5, #31
 8006204:	d50a      	bpl.n	800621c <__pow5mult+0x74>
 8006206:	4639      	mov	r1, r7
 8006208:	4622      	mov	r2, r4
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ff36 	bl	800607c <__multiply>
 8006210:	4639      	mov	r1, r7
 8006212:	4681      	mov	r9, r0
 8006214:	4630      	mov	r0, r6
 8006216:	f7ff fe4a 	bl	8005eae <_Bfree>
 800621a:	464f      	mov	r7, r9
 800621c:	106d      	asrs	r5, r5, #1
 800621e:	d00b      	beq.n	8006238 <__pow5mult+0x90>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	b938      	cbnz	r0, 8006234 <__pow5mult+0x8c>
 8006224:	4622      	mov	r2, r4
 8006226:	4621      	mov	r1, r4
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ff27 	bl	800607c <__multiply>
 800622e:	6020      	str	r0, [r4, #0]
 8006230:	f8c0 8000 	str.w	r8, [r0]
 8006234:	4604      	mov	r4, r0
 8006236:	e7e4      	b.n	8006202 <__pow5mult+0x5a>
 8006238:	4638      	mov	r0, r7
 800623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623e:	bf00      	nop
 8006240:	0800b890 	.word	0x0800b890

08006244 <__lshift>:
 8006244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	6849      	ldr	r1, [r1, #4]
 8006252:	eb0a 0903 	add.w	r9, sl, r3
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	4607      	mov	r7, r0
 800625a:	4616      	mov	r6, r2
 800625c:	f109 0501 	add.w	r5, r9, #1
 8006260:	42ab      	cmp	r3, r5
 8006262:	db32      	blt.n	80062ca <__lshift+0x86>
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff fdee 	bl	8005e46 <_Balloc>
 800626a:	2300      	movs	r3, #0
 800626c:	4680      	mov	r8, r0
 800626e:	f100 0114 	add.w	r1, r0, #20
 8006272:	461a      	mov	r2, r3
 8006274:	4553      	cmp	r3, sl
 8006276:	db2b      	blt.n	80062d0 <__lshift+0x8c>
 8006278:	6920      	ldr	r0, [r4, #16]
 800627a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800627e:	f104 0314 	add.w	r3, r4, #20
 8006282:	f016 021f 	ands.w	r2, r6, #31
 8006286:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800628a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800628e:	d025      	beq.n	80062dc <__lshift+0x98>
 8006290:	f1c2 0e20 	rsb	lr, r2, #32
 8006294:	2000      	movs	r0, #0
 8006296:	681e      	ldr	r6, [r3, #0]
 8006298:	468a      	mov	sl, r1
 800629a:	4096      	lsls	r6, r2
 800629c:	4330      	orrs	r0, r6
 800629e:	f84a 0b04 	str.w	r0, [sl], #4
 80062a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80062a6:	459c      	cmp	ip, r3
 80062a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80062ac:	d814      	bhi.n	80062d8 <__lshift+0x94>
 80062ae:	6048      	str	r0, [r1, #4]
 80062b0:	b108      	cbz	r0, 80062b6 <__lshift+0x72>
 80062b2:	f109 0502 	add.w	r5, r9, #2
 80062b6:	3d01      	subs	r5, #1
 80062b8:	4638      	mov	r0, r7
 80062ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80062be:	4621      	mov	r1, r4
 80062c0:	f7ff fdf5 	bl	8005eae <_Bfree>
 80062c4:	4640      	mov	r0, r8
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	3101      	adds	r1, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	e7c7      	b.n	8006260 <__lshift+0x1c>
 80062d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80062d4:	3301      	adds	r3, #1
 80062d6:	e7cd      	b.n	8006274 <__lshift+0x30>
 80062d8:	4651      	mov	r1, sl
 80062da:	e7dc      	b.n	8006296 <__lshift+0x52>
 80062dc:	3904      	subs	r1, #4
 80062de:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80062e6:	459c      	cmp	ip, r3
 80062e8:	d8f9      	bhi.n	80062de <__lshift+0x9a>
 80062ea:	e7e4      	b.n	80062b6 <__lshift+0x72>

080062ec <__mcmp>:
 80062ec:	6903      	ldr	r3, [r0, #16]
 80062ee:	690a      	ldr	r2, [r1, #16]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	b530      	push	{r4, r5, lr}
 80062f4:	d10c      	bne.n	8006310 <__mcmp+0x24>
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	3014      	adds	r0, #20
 80062fa:	3114      	adds	r1, #20
 80062fc:	1884      	adds	r4, r0, r2
 80062fe:	4411      	add	r1, r2
 8006300:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006304:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006308:	4295      	cmp	r5, r2
 800630a:	d003      	beq.n	8006314 <__mcmp+0x28>
 800630c:	d305      	bcc.n	800631a <__mcmp+0x2e>
 800630e:	2301      	movs	r3, #1
 8006310:	4618      	mov	r0, r3
 8006312:	bd30      	pop	{r4, r5, pc}
 8006314:	42a0      	cmp	r0, r4
 8006316:	d3f3      	bcc.n	8006300 <__mcmp+0x14>
 8006318:	e7fa      	b.n	8006310 <__mcmp+0x24>
 800631a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800631e:	e7f7      	b.n	8006310 <__mcmp+0x24>

08006320 <__mdiff>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	460d      	mov	r5, r1
 8006326:	4607      	mov	r7, r0
 8006328:	4611      	mov	r1, r2
 800632a:	4628      	mov	r0, r5
 800632c:	4614      	mov	r4, r2
 800632e:	f7ff ffdd 	bl	80062ec <__mcmp>
 8006332:	1e06      	subs	r6, r0, #0
 8006334:	d108      	bne.n	8006348 <__mdiff+0x28>
 8006336:	4631      	mov	r1, r6
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fd84 	bl	8005e46 <_Balloc>
 800633e:	2301      	movs	r3, #1
 8006340:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	bfa4      	itt	ge
 800634a:	4623      	movge	r3, r4
 800634c:	462c      	movge	r4, r5
 800634e:	4638      	mov	r0, r7
 8006350:	6861      	ldr	r1, [r4, #4]
 8006352:	bfa6      	itte	ge
 8006354:	461d      	movge	r5, r3
 8006356:	2600      	movge	r6, #0
 8006358:	2601      	movlt	r6, #1
 800635a:	f7ff fd74 	bl	8005e46 <_Balloc>
 800635e:	692b      	ldr	r3, [r5, #16]
 8006360:	60c6      	str	r6, [r0, #12]
 8006362:	6926      	ldr	r6, [r4, #16]
 8006364:	f105 0914 	add.w	r9, r5, #20
 8006368:	f104 0214 	add.w	r2, r4, #20
 800636c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006370:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006374:	f100 0514 	add.w	r5, r0, #20
 8006378:	f04f 0e00 	mov.w	lr, #0
 800637c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006380:	f859 4b04 	ldr.w	r4, [r9], #4
 8006384:	fa1e f18a 	uxtah	r1, lr, sl
 8006388:	b2a3      	uxth	r3, r4
 800638a:	1ac9      	subs	r1, r1, r3
 800638c:	0c23      	lsrs	r3, r4, #16
 800638e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006392:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006396:	b289      	uxth	r1, r1
 8006398:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800639c:	45c8      	cmp	r8, r9
 800639e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063a2:	4694      	mov	ip, r2
 80063a4:	f845 3b04 	str.w	r3, [r5], #4
 80063a8:	d8e8      	bhi.n	800637c <__mdiff+0x5c>
 80063aa:	45bc      	cmp	ip, r7
 80063ac:	d304      	bcc.n	80063b8 <__mdiff+0x98>
 80063ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063b2:	b183      	cbz	r3, 80063d6 <__mdiff+0xb6>
 80063b4:	6106      	str	r6, [r0, #16]
 80063b6:	e7c5      	b.n	8006344 <__mdiff+0x24>
 80063b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063bc:	fa1e f381 	uxtah	r3, lr, r1
 80063c0:	141a      	asrs	r2, r3, #16
 80063c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80063d0:	f845 3b04 	str.w	r3, [r5], #4
 80063d4:	e7e9      	b.n	80063aa <__mdiff+0x8a>
 80063d6:	3e01      	subs	r6, #1
 80063d8:	e7e9      	b.n	80063ae <__mdiff+0x8e>
	...

080063dc <__ulp>:
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <__ulp+0x4c>)
 80063de:	ee10 2a90 	vmov	r2, s1
 80063e2:	401a      	ands	r2, r3
 80063e4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dd04      	ble.n	80063f6 <__ulp+0x1a>
 80063ec:	2000      	movs	r0, #0
 80063ee:	4619      	mov	r1, r3
 80063f0:	ec41 0b10 	vmov	d0, r0, r1
 80063f4:	4770      	bx	lr
 80063f6:	425b      	negs	r3, r3
 80063f8:	151b      	asrs	r3, r3, #20
 80063fa:	2b13      	cmp	r3, #19
 80063fc:	f04f 0000 	mov.w	r0, #0
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	dc04      	bgt.n	8006410 <__ulp+0x34>
 8006406:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800640a:	fa42 f103 	asr.w	r1, r2, r3
 800640e:	e7ef      	b.n	80063f0 <__ulp+0x14>
 8006410:	3b14      	subs	r3, #20
 8006412:	2b1e      	cmp	r3, #30
 8006414:	f04f 0201 	mov.w	r2, #1
 8006418:	bfda      	itte	le
 800641a:	f1c3 031f 	rsble	r3, r3, #31
 800641e:	fa02 f303 	lslle.w	r3, r2, r3
 8006422:	4613      	movgt	r3, r2
 8006424:	4618      	mov	r0, r3
 8006426:	e7e3      	b.n	80063f0 <__ulp+0x14>
 8006428:	7ff00000 	.word	0x7ff00000

0800642c <__b2d>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	6905      	ldr	r5, [r0, #16]
 8006430:	f100 0714 	add.w	r7, r0, #20
 8006434:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006438:	1f2e      	subs	r6, r5, #4
 800643a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff fdc5 	bl	8005fce <__hi0bits>
 8006444:	f1c0 0320 	rsb	r3, r0, #32
 8006448:	280a      	cmp	r0, #10
 800644a:	600b      	str	r3, [r1, #0]
 800644c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80064c4 <__b2d+0x98>
 8006450:	dc14      	bgt.n	800647c <__b2d+0x50>
 8006452:	f1c0 0e0b 	rsb	lr, r0, #11
 8006456:	fa24 f10e 	lsr.w	r1, r4, lr
 800645a:	42b7      	cmp	r7, r6
 800645c:	ea41 030c 	orr.w	r3, r1, ip
 8006460:	bf34      	ite	cc
 8006462:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006466:	2100      	movcs	r1, #0
 8006468:	3015      	adds	r0, #21
 800646a:	fa04 f000 	lsl.w	r0, r4, r0
 800646e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006472:	ea40 0201 	orr.w	r2, r0, r1
 8006476:	ec43 2b10 	vmov	d0, r2, r3
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800647c:	42b7      	cmp	r7, r6
 800647e:	bf3a      	itte	cc
 8006480:	f1a5 0608 	subcc.w	r6, r5, #8
 8006484:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006488:	2100      	movcs	r1, #0
 800648a:	380b      	subs	r0, #11
 800648c:	d015      	beq.n	80064ba <__b2d+0x8e>
 800648e:	4084      	lsls	r4, r0
 8006490:	f1c0 0520 	rsb	r5, r0, #32
 8006494:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006498:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800649c:	42be      	cmp	r6, r7
 800649e:	fa21 fc05 	lsr.w	ip, r1, r5
 80064a2:	ea44 030c 	orr.w	r3, r4, ip
 80064a6:	bf8c      	ite	hi
 80064a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80064ac:	2400      	movls	r4, #0
 80064ae:	fa01 f000 	lsl.w	r0, r1, r0
 80064b2:	40ec      	lsrs	r4, r5
 80064b4:	ea40 0204 	orr.w	r2, r0, r4
 80064b8:	e7dd      	b.n	8006476 <__b2d+0x4a>
 80064ba:	ea44 030c 	orr.w	r3, r4, ip
 80064be:	460a      	mov	r2, r1
 80064c0:	e7d9      	b.n	8006476 <__b2d+0x4a>
 80064c2:	bf00      	nop
 80064c4:	3ff00000 	.word	0x3ff00000

080064c8 <__d2b>:
 80064c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	460e      	mov	r6, r1
 80064ce:	2101      	movs	r1, #1
 80064d0:	ec59 8b10 	vmov	r8, r9, d0
 80064d4:	4615      	mov	r5, r2
 80064d6:	f7ff fcb6 	bl	8005e46 <_Balloc>
 80064da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80064de:	4607      	mov	r7, r0
 80064e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064e4:	bb34      	cbnz	r4, 8006534 <__d2b+0x6c>
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f1b8 0300 	subs.w	r3, r8, #0
 80064ec:	d027      	beq.n	800653e <__d2b+0x76>
 80064ee:	a802      	add	r0, sp, #8
 80064f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80064f4:	f7ff fd8a 	bl	800600c <__lo0bits>
 80064f8:	9900      	ldr	r1, [sp, #0]
 80064fa:	b1f0      	cbz	r0, 800653a <__d2b+0x72>
 80064fc:	9a01      	ldr	r2, [sp, #4]
 80064fe:	f1c0 0320 	rsb	r3, r0, #32
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	430b      	orrs	r3, r1
 8006508:	40c2      	lsrs	r2, r0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	9201      	str	r2, [sp, #4]
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf14      	ite	ne
 8006516:	2102      	movne	r1, #2
 8006518:	2101      	moveq	r1, #1
 800651a:	6139      	str	r1, [r7, #16]
 800651c:	b1c4      	cbz	r4, 8006550 <__d2b+0x88>
 800651e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006522:	4404      	add	r4, r0
 8006524:	6034      	str	r4, [r6, #0]
 8006526:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800652a:	6028      	str	r0, [r5, #0]
 800652c:	4638      	mov	r0, r7
 800652e:	b003      	add	sp, #12
 8006530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006538:	e7d5      	b.n	80064e6 <__d2b+0x1e>
 800653a:	6179      	str	r1, [r7, #20]
 800653c:	e7e7      	b.n	800650e <__d2b+0x46>
 800653e:	a801      	add	r0, sp, #4
 8006540:	f7ff fd64 	bl	800600c <__lo0bits>
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	2101      	movs	r1, #1
 800654a:	6139      	str	r1, [r7, #16]
 800654c:	3020      	adds	r0, #32
 800654e:	e7e5      	b.n	800651c <__d2b+0x54>
 8006550:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006558:	6030      	str	r0, [r6, #0]
 800655a:	6918      	ldr	r0, [r3, #16]
 800655c:	f7ff fd37 	bl	8005fce <__hi0bits>
 8006560:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006564:	e7e1      	b.n	800652a <__d2b+0x62>

08006566 <__ratio>:
 8006566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	4688      	mov	r8, r1
 800656c:	4669      	mov	r1, sp
 800656e:	4681      	mov	r9, r0
 8006570:	f7ff ff5c 	bl	800642c <__b2d>
 8006574:	a901      	add	r1, sp, #4
 8006576:	4640      	mov	r0, r8
 8006578:	ec57 6b10 	vmov	r6, r7, d0
 800657c:	f7ff ff56 	bl	800642c <__b2d>
 8006580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006584:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006588:	eba3 0c02 	sub.w	ip, r3, r2
 800658c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006596:	ec5b ab10 	vmov	sl, fp, d0
 800659a:	2b00      	cmp	r3, #0
 800659c:	bfce      	itee	gt
 800659e:	463a      	movgt	r2, r7
 80065a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065a4:	465a      	movle	r2, fp
 80065a6:	4659      	mov	r1, fp
 80065a8:	463d      	mov	r5, r7
 80065aa:	bfd4      	ite	le
 80065ac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80065b0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80065b4:	4630      	mov	r0, r6
 80065b6:	ee10 2a10 	vmov	r2, s0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa f945 	bl	800084c <__aeabi_ddiv>
 80065c2:	ec41 0b10 	vmov	d0, r0, r1
 80065c6:	b003      	add	sp, #12
 80065c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065cc <__copybits>:
 80065cc:	3901      	subs	r1, #1
 80065ce:	b510      	push	{r4, lr}
 80065d0:	1149      	asrs	r1, r1, #5
 80065d2:	6914      	ldr	r4, [r2, #16]
 80065d4:	3101      	adds	r1, #1
 80065d6:	f102 0314 	add.w	r3, r2, #20
 80065da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	4602      	mov	r2, r0
 80065e6:	d303      	bcc.n	80065f0 <__copybits+0x24>
 80065e8:	2300      	movs	r3, #0
 80065ea:	428a      	cmp	r2, r1
 80065ec:	d305      	bcc.n	80065fa <__copybits+0x2e>
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f4:	f840 2b04 	str.w	r2, [r0], #4
 80065f8:	e7f3      	b.n	80065e2 <__copybits+0x16>
 80065fa:	f842 3b04 	str.w	r3, [r2], #4
 80065fe:	e7f4      	b.n	80065ea <__copybits+0x1e>

08006600 <__any_on>:
 8006600:	f100 0214 	add.w	r2, r0, #20
 8006604:	6900      	ldr	r0, [r0, #16]
 8006606:	114b      	asrs	r3, r1, #5
 8006608:	4298      	cmp	r0, r3
 800660a:	b510      	push	{r4, lr}
 800660c:	db11      	blt.n	8006632 <__any_on+0x32>
 800660e:	dd0a      	ble.n	8006626 <__any_on+0x26>
 8006610:	f011 011f 	ands.w	r1, r1, #31
 8006614:	d007      	beq.n	8006626 <__any_on+0x26>
 8006616:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800661a:	fa24 f001 	lsr.w	r0, r4, r1
 800661e:	fa00 f101 	lsl.w	r1, r0, r1
 8006622:	428c      	cmp	r4, r1
 8006624:	d10b      	bne.n	800663e <__any_on+0x3e>
 8006626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800662a:	4293      	cmp	r3, r2
 800662c:	d803      	bhi.n	8006636 <__any_on+0x36>
 800662e:	2000      	movs	r0, #0
 8006630:	bd10      	pop	{r4, pc}
 8006632:	4603      	mov	r3, r0
 8006634:	e7f7      	b.n	8006626 <__any_on+0x26>
 8006636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800663a:	2900      	cmp	r1, #0
 800663c:	d0f5      	beq.n	800662a <__any_on+0x2a>
 800663e:	2001      	movs	r0, #1
 8006640:	e7f6      	b.n	8006630 <__any_on+0x30>

08006642 <_calloc_r>:
 8006642:	b538      	push	{r3, r4, r5, lr}
 8006644:	fb02 f401 	mul.w	r4, r2, r1
 8006648:	4621      	mov	r1, r4
 800664a:	f000 f809 	bl	8006660 <_malloc_r>
 800664e:	4605      	mov	r5, r0
 8006650:	b118      	cbz	r0, 800665a <_calloc_r+0x18>
 8006652:	4622      	mov	r2, r4
 8006654:	2100      	movs	r1, #0
 8006656:	f7fd fffb 	bl	8004650 <memset>
 800665a:	4628      	mov	r0, r5
 800665c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006660 <_malloc_r>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	1ccd      	adds	r5, r1, #3
 8006664:	f025 0503 	bic.w	r5, r5, #3
 8006668:	3508      	adds	r5, #8
 800666a:	2d0c      	cmp	r5, #12
 800666c:	bf38      	it	cc
 800666e:	250c      	movcc	r5, #12
 8006670:	2d00      	cmp	r5, #0
 8006672:	4606      	mov	r6, r0
 8006674:	db01      	blt.n	800667a <_malloc_r+0x1a>
 8006676:	42a9      	cmp	r1, r5
 8006678:	d903      	bls.n	8006682 <_malloc_r+0x22>
 800667a:	230c      	movs	r3, #12
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	2000      	movs	r0, #0
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	f000 fb59 	bl	8006d38 <__malloc_lock>
 8006686:	4a21      	ldr	r2, [pc, #132]	; (800670c <_malloc_r+0xac>)
 8006688:	6814      	ldr	r4, [r2, #0]
 800668a:	4621      	mov	r1, r4
 800668c:	b991      	cbnz	r1, 80066b4 <_malloc_r+0x54>
 800668e:	4c20      	ldr	r4, [pc, #128]	; (8006710 <_malloc_r+0xb0>)
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	b91b      	cbnz	r3, 800669c <_malloc_r+0x3c>
 8006694:	4630      	mov	r0, r6
 8006696:	f000 fb17 	bl	8006cc8 <_sbrk_r>
 800669a:	6020      	str	r0, [r4, #0]
 800669c:	4629      	mov	r1, r5
 800669e:	4630      	mov	r0, r6
 80066a0:	f000 fb12 	bl	8006cc8 <_sbrk_r>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d124      	bne.n	80066f2 <_malloc_r+0x92>
 80066a8:	230c      	movs	r3, #12
 80066aa:	6033      	str	r3, [r6, #0]
 80066ac:	4630      	mov	r0, r6
 80066ae:	f000 fb44 	bl	8006d3a <__malloc_unlock>
 80066b2:	e7e4      	b.n	800667e <_malloc_r+0x1e>
 80066b4:	680b      	ldr	r3, [r1, #0]
 80066b6:	1b5b      	subs	r3, r3, r5
 80066b8:	d418      	bmi.n	80066ec <_malloc_r+0x8c>
 80066ba:	2b0b      	cmp	r3, #11
 80066bc:	d90f      	bls.n	80066de <_malloc_r+0x7e>
 80066be:	600b      	str	r3, [r1, #0]
 80066c0:	50cd      	str	r5, [r1, r3]
 80066c2:	18cc      	adds	r4, r1, r3
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 fb38 	bl	8006d3a <__malloc_unlock>
 80066ca:	f104 000b 	add.w	r0, r4, #11
 80066ce:	1d23      	adds	r3, r4, #4
 80066d0:	f020 0007 	bic.w	r0, r0, #7
 80066d4:	1ac3      	subs	r3, r0, r3
 80066d6:	d0d3      	beq.n	8006680 <_malloc_r+0x20>
 80066d8:	425a      	negs	r2, r3
 80066da:	50e2      	str	r2, [r4, r3]
 80066dc:	e7d0      	b.n	8006680 <_malloc_r+0x20>
 80066de:	428c      	cmp	r4, r1
 80066e0:	684b      	ldr	r3, [r1, #4]
 80066e2:	bf16      	itet	ne
 80066e4:	6063      	strne	r3, [r4, #4]
 80066e6:	6013      	streq	r3, [r2, #0]
 80066e8:	460c      	movne	r4, r1
 80066ea:	e7eb      	b.n	80066c4 <_malloc_r+0x64>
 80066ec:	460c      	mov	r4, r1
 80066ee:	6849      	ldr	r1, [r1, #4]
 80066f0:	e7cc      	b.n	800668c <_malloc_r+0x2c>
 80066f2:	1cc4      	adds	r4, r0, #3
 80066f4:	f024 0403 	bic.w	r4, r4, #3
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	d005      	beq.n	8006708 <_malloc_r+0xa8>
 80066fc:	1a21      	subs	r1, r4, r0
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 fae2 	bl	8006cc8 <_sbrk_r>
 8006704:	3001      	adds	r0, #1
 8006706:	d0cf      	beq.n	80066a8 <_malloc_r+0x48>
 8006708:	6025      	str	r5, [r4, #0]
 800670a:	e7db      	b.n	80066c4 <_malloc_r+0x64>
 800670c:	200009c8 	.word	0x200009c8
 8006710:	200009cc 	.word	0x200009cc

08006714 <__ssputs_r>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	688e      	ldr	r6, [r1, #8]
 800671a:	429e      	cmp	r6, r3
 800671c:	4682      	mov	sl, r0
 800671e:	460c      	mov	r4, r1
 8006720:	4690      	mov	r8, r2
 8006722:	4699      	mov	r9, r3
 8006724:	d837      	bhi.n	8006796 <__ssputs_r+0x82>
 8006726:	898a      	ldrh	r2, [r1, #12]
 8006728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800672c:	d031      	beq.n	8006792 <__ssputs_r+0x7e>
 800672e:	6825      	ldr	r5, [r4, #0]
 8006730:	6909      	ldr	r1, [r1, #16]
 8006732:	1a6f      	subs	r7, r5, r1
 8006734:	6965      	ldr	r5, [r4, #20]
 8006736:	2302      	movs	r3, #2
 8006738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800673c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006740:	f109 0301 	add.w	r3, r9, #1
 8006744:	443b      	add	r3, r7
 8006746:	429d      	cmp	r5, r3
 8006748:	bf38      	it	cc
 800674a:	461d      	movcc	r5, r3
 800674c:	0553      	lsls	r3, r2, #21
 800674e:	d530      	bpl.n	80067b2 <__ssputs_r+0x9e>
 8006750:	4629      	mov	r1, r5
 8006752:	f7ff ff85 	bl	8006660 <_malloc_r>
 8006756:	4606      	mov	r6, r0
 8006758:	b950      	cbnz	r0, 8006770 <__ssputs_r+0x5c>
 800675a:	230c      	movs	r3, #12
 800675c:	f8ca 3000 	str.w	r3, [sl]
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	463a      	mov	r2, r7
 8006772:	6921      	ldr	r1, [r4, #16]
 8006774:	f7fd ff48 	bl	8004608 <memcpy>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800677e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	6126      	str	r6, [r4, #16]
 8006786:	6165      	str	r5, [r4, #20]
 8006788:	443e      	add	r6, r7
 800678a:	1bed      	subs	r5, r5, r7
 800678c:	6026      	str	r6, [r4, #0]
 800678e:	60a5      	str	r5, [r4, #8]
 8006790:	464e      	mov	r6, r9
 8006792:	454e      	cmp	r6, r9
 8006794:	d900      	bls.n	8006798 <__ssputs_r+0x84>
 8006796:	464e      	mov	r6, r9
 8006798:	4632      	mov	r2, r6
 800679a:	4641      	mov	r1, r8
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	f7fd ff3e 	bl	800461e <memmove>
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	1b9b      	subs	r3, r3, r6
 80067a6:	60a3      	str	r3, [r4, #8]
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	441e      	add	r6, r3
 80067ac:	6026      	str	r6, [r4, #0]
 80067ae:	2000      	movs	r0, #0
 80067b0:	e7dc      	b.n	800676c <__ssputs_r+0x58>
 80067b2:	462a      	mov	r2, r5
 80067b4:	f000 fb10 	bl	8006dd8 <_realloc_r>
 80067b8:	4606      	mov	r6, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d1e2      	bne.n	8006784 <__ssputs_r+0x70>
 80067be:	6921      	ldr	r1, [r4, #16]
 80067c0:	4650      	mov	r0, sl
 80067c2:	f000 fabb 	bl	8006d3c <_free_r>
 80067c6:	e7c8      	b.n	800675a <__ssputs_r+0x46>

080067c8 <_svfiprintf_r>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	461d      	mov	r5, r3
 80067ce:	898b      	ldrh	r3, [r1, #12]
 80067d0:	061f      	lsls	r7, r3, #24
 80067d2:	b09d      	sub	sp, #116	; 0x74
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	4616      	mov	r6, r2
 80067da:	d50f      	bpl.n	80067fc <_svfiprintf_r+0x34>
 80067dc:	690b      	ldr	r3, [r1, #16]
 80067de:	b96b      	cbnz	r3, 80067fc <_svfiprintf_r+0x34>
 80067e0:	2140      	movs	r1, #64	; 0x40
 80067e2:	f7ff ff3d 	bl	8006660 <_malloc_r>
 80067e6:	6020      	str	r0, [r4, #0]
 80067e8:	6120      	str	r0, [r4, #16]
 80067ea:	b928      	cbnz	r0, 80067f8 <_svfiprintf_r+0x30>
 80067ec:	230c      	movs	r3, #12
 80067ee:	f8c8 3000 	str.w	r3, [r8]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f6:	e0c8      	b.n	800698a <_svfiprintf_r+0x1c2>
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	6163      	str	r3, [r4, #20]
 80067fc:	2300      	movs	r3, #0
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	2320      	movs	r3, #32
 8006802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006806:	2330      	movs	r3, #48	; 0x30
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800680c:	9503      	str	r5, [sp, #12]
 800680e:	f04f 0b01 	mov.w	fp, #1
 8006812:	4637      	mov	r7, r6
 8006814:	463d      	mov	r5, r7
 8006816:	f815 3b01 	ldrb.w	r3, [r5], #1
 800681a:	b10b      	cbz	r3, 8006820 <_svfiprintf_r+0x58>
 800681c:	2b25      	cmp	r3, #37	; 0x25
 800681e:	d13e      	bne.n	800689e <_svfiprintf_r+0xd6>
 8006820:	ebb7 0a06 	subs.w	sl, r7, r6
 8006824:	d00b      	beq.n	800683e <_svfiprintf_r+0x76>
 8006826:	4653      	mov	r3, sl
 8006828:	4632      	mov	r2, r6
 800682a:	4621      	mov	r1, r4
 800682c:	4640      	mov	r0, r8
 800682e:	f7ff ff71 	bl	8006714 <__ssputs_r>
 8006832:	3001      	adds	r0, #1
 8006834:	f000 80a4 	beq.w	8006980 <_svfiprintf_r+0x1b8>
 8006838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683a:	4453      	add	r3, sl
 800683c:	9309      	str	r3, [sp, #36]	; 0x24
 800683e:	783b      	ldrb	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 809d 	beq.w	8006980 <_svfiprintf_r+0x1b8>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006858:	931a      	str	r3, [sp, #104]	; 0x68
 800685a:	462f      	mov	r7, r5
 800685c:	2205      	movs	r2, #5
 800685e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006862:	4850      	ldr	r0, [pc, #320]	; (80069a4 <_svfiprintf_r+0x1dc>)
 8006864:	f7f9 fcbc 	bl	80001e0 <memchr>
 8006868:	9b04      	ldr	r3, [sp, #16]
 800686a:	b9d0      	cbnz	r0, 80068a2 <_svfiprintf_r+0xda>
 800686c:	06d9      	lsls	r1, r3, #27
 800686e:	bf44      	itt	mi
 8006870:	2220      	movmi	r2, #32
 8006872:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006876:	071a      	lsls	r2, r3, #28
 8006878:	bf44      	itt	mi
 800687a:	222b      	movmi	r2, #43	; 0x2b
 800687c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006880:	782a      	ldrb	r2, [r5, #0]
 8006882:	2a2a      	cmp	r2, #42	; 0x2a
 8006884:	d015      	beq.n	80068b2 <_svfiprintf_r+0xea>
 8006886:	9a07      	ldr	r2, [sp, #28]
 8006888:	462f      	mov	r7, r5
 800688a:	2000      	movs	r0, #0
 800688c:	250a      	movs	r5, #10
 800688e:	4639      	mov	r1, r7
 8006890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006894:	3b30      	subs	r3, #48	; 0x30
 8006896:	2b09      	cmp	r3, #9
 8006898:	d94d      	bls.n	8006936 <_svfiprintf_r+0x16e>
 800689a:	b1b8      	cbz	r0, 80068cc <_svfiprintf_r+0x104>
 800689c:	e00f      	b.n	80068be <_svfiprintf_r+0xf6>
 800689e:	462f      	mov	r7, r5
 80068a0:	e7b8      	b.n	8006814 <_svfiprintf_r+0x4c>
 80068a2:	4a40      	ldr	r2, [pc, #256]	; (80069a4 <_svfiprintf_r+0x1dc>)
 80068a4:	1a80      	subs	r0, r0, r2
 80068a6:	fa0b f000 	lsl.w	r0, fp, r0
 80068aa:	4318      	orrs	r0, r3
 80068ac:	9004      	str	r0, [sp, #16]
 80068ae:	463d      	mov	r5, r7
 80068b0:	e7d3      	b.n	800685a <_svfiprintf_r+0x92>
 80068b2:	9a03      	ldr	r2, [sp, #12]
 80068b4:	1d11      	adds	r1, r2, #4
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	9103      	str	r1, [sp, #12]
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	db01      	blt.n	80068c2 <_svfiprintf_r+0xfa>
 80068be:	9207      	str	r2, [sp, #28]
 80068c0:	e004      	b.n	80068cc <_svfiprintf_r+0x104>
 80068c2:	4252      	negs	r2, r2
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	9207      	str	r2, [sp, #28]
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	783b      	ldrb	r3, [r7, #0]
 80068ce:	2b2e      	cmp	r3, #46	; 0x2e
 80068d0:	d10c      	bne.n	80068ec <_svfiprintf_r+0x124>
 80068d2:	787b      	ldrb	r3, [r7, #1]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d133      	bne.n	8006940 <_svfiprintf_r+0x178>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	9203      	str	r2, [sp, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bfb8      	it	lt
 80068e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068e8:	3702      	adds	r7, #2
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	4d2e      	ldr	r5, [pc, #184]	; (80069a8 <_svfiprintf_r+0x1e0>)
 80068ee:	7839      	ldrb	r1, [r7, #0]
 80068f0:	2203      	movs	r2, #3
 80068f2:	4628      	mov	r0, r5
 80068f4:	f7f9 fc74 	bl	80001e0 <memchr>
 80068f8:	b138      	cbz	r0, 800690a <_svfiprintf_r+0x142>
 80068fa:	2340      	movs	r3, #64	; 0x40
 80068fc:	1b40      	subs	r0, r0, r5
 80068fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	4303      	orrs	r3, r0
 8006906:	3701      	adds	r7, #1
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	7839      	ldrb	r1, [r7, #0]
 800690c:	4827      	ldr	r0, [pc, #156]	; (80069ac <_svfiprintf_r+0x1e4>)
 800690e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006912:	2206      	movs	r2, #6
 8006914:	1c7e      	adds	r6, r7, #1
 8006916:	f7f9 fc63 	bl	80001e0 <memchr>
 800691a:	2800      	cmp	r0, #0
 800691c:	d038      	beq.n	8006990 <_svfiprintf_r+0x1c8>
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <_svfiprintf_r+0x1e8>)
 8006920:	bb13      	cbnz	r3, 8006968 <_svfiprintf_r+0x1a0>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	3307      	adds	r3, #7
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	3308      	adds	r3, #8
 800692c:	9303      	str	r3, [sp, #12]
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	444b      	add	r3, r9
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	e76d      	b.n	8006812 <_svfiprintf_r+0x4a>
 8006936:	fb05 3202 	mla	r2, r5, r2, r3
 800693a:	2001      	movs	r0, #1
 800693c:	460f      	mov	r7, r1
 800693e:	e7a6      	b.n	800688e <_svfiprintf_r+0xc6>
 8006940:	2300      	movs	r3, #0
 8006942:	3701      	adds	r7, #1
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	4619      	mov	r1, r3
 8006948:	250a      	movs	r5, #10
 800694a:	4638      	mov	r0, r7
 800694c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006950:	3a30      	subs	r2, #48	; 0x30
 8006952:	2a09      	cmp	r2, #9
 8006954:	d903      	bls.n	800695e <_svfiprintf_r+0x196>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0c8      	beq.n	80068ec <_svfiprintf_r+0x124>
 800695a:	9105      	str	r1, [sp, #20]
 800695c:	e7c6      	b.n	80068ec <_svfiprintf_r+0x124>
 800695e:	fb05 2101 	mla	r1, r5, r1, r2
 8006962:	2301      	movs	r3, #1
 8006964:	4607      	mov	r7, r0
 8006966:	e7f0      	b.n	800694a <_svfiprintf_r+0x182>
 8006968:	ab03      	add	r3, sp, #12
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4622      	mov	r2, r4
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <_svfiprintf_r+0x1ec>)
 8006970:	a904      	add	r1, sp, #16
 8006972:	4640      	mov	r0, r8
 8006974:	f3af 8000 	nop.w
 8006978:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800697c:	4681      	mov	r9, r0
 800697e:	d1d6      	bne.n	800692e <_svfiprintf_r+0x166>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	065b      	lsls	r3, r3, #25
 8006984:	f53f af35 	bmi.w	80067f2 <_svfiprintf_r+0x2a>
 8006988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698a:	b01d      	add	sp, #116	; 0x74
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	ab03      	add	r3, sp, #12
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4622      	mov	r2, r4
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <_svfiprintf_r+0x1ec>)
 8006998:	a904      	add	r1, sp, #16
 800699a:	4640      	mov	r0, r8
 800699c:	f000 f882 	bl	8006aa4 <_printf_i>
 80069a0:	e7ea      	b.n	8006978 <_svfiprintf_r+0x1b0>
 80069a2:	bf00      	nop
 80069a4:	0800b89c 	.word	0x0800b89c
 80069a8:	0800b8a2 	.word	0x0800b8a2
 80069ac:	0800b8a6 	.word	0x0800b8a6
 80069b0:	00000000 	.word	0x00000000
 80069b4:	08006715 	.word	0x08006715

080069b8 <_printf_common>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	4691      	mov	r9, r2
 80069be:	461f      	mov	r7, r3
 80069c0:	688a      	ldr	r2, [r1, #8]
 80069c2:	690b      	ldr	r3, [r1, #16]
 80069c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	bfb8      	it	lt
 80069cc:	4613      	movlt	r3, r2
 80069ce:	f8c9 3000 	str.w	r3, [r9]
 80069d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069d6:	4606      	mov	r6, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	b112      	cbz	r2, 80069e2 <_printf_common+0x2a>
 80069dc:	3301      	adds	r3, #1
 80069de:	f8c9 3000 	str.w	r3, [r9]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	0699      	lsls	r1, r3, #26
 80069e6:	bf42      	ittt	mi
 80069e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069ec:	3302      	addmi	r3, #2
 80069ee:	f8c9 3000 	strmi.w	r3, [r9]
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	f015 0506 	ands.w	r5, r5, #6
 80069f8:	d107      	bne.n	8006a0a <_printf_common+0x52>
 80069fa:	f104 0a19 	add.w	sl, r4, #25
 80069fe:	68e3      	ldr	r3, [r4, #12]
 8006a00:	f8d9 2000 	ldr.w	r2, [r9]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	42ab      	cmp	r3, r5
 8006a08:	dc28      	bgt.n	8006a5c <_printf_common+0xa4>
 8006a0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	3300      	adds	r3, #0
 8006a12:	bf18      	it	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	0692      	lsls	r2, r2, #26
 8006a18:	d42d      	bmi.n	8006a76 <_printf_common+0xbe>
 8006a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4630      	mov	r0, r6
 8006a22:	47c0      	blx	r8
 8006a24:	3001      	adds	r0, #1
 8006a26:	d020      	beq.n	8006a6a <_printf_common+0xb2>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	68e5      	ldr	r5, [r4, #12]
 8006a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006a30:	f003 0306 	and.w	r3, r3, #6
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	bf08      	it	eq
 8006a38:	1aad      	subeq	r5, r5, r2
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	6922      	ldr	r2, [r4, #16]
 8006a3e:	bf0c      	ite	eq
 8006a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a44:	2500      	movne	r5, #0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bfc4      	itt	gt
 8006a4a:	1a9b      	subgt	r3, r3, r2
 8006a4c:	18ed      	addgt	r5, r5, r3
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	341a      	adds	r4, #26
 8006a54:	454d      	cmp	r5, r9
 8006a56:	d11a      	bne.n	8006a8e <_printf_common+0xd6>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e008      	b.n	8006a6e <_printf_common+0xb6>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4652      	mov	r2, sl
 8006a60:	4639      	mov	r1, r7
 8006a62:	4630      	mov	r0, r6
 8006a64:	47c0      	blx	r8
 8006a66:	3001      	adds	r0, #1
 8006a68:	d103      	bne.n	8006a72 <_printf_common+0xba>
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	3501      	adds	r5, #1
 8006a74:	e7c3      	b.n	80069fe <_printf_common+0x46>
 8006a76:	18e1      	adds	r1, r4, r3
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	2030      	movs	r0, #48	; 0x30
 8006a7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a80:	4422      	add	r2, r4
 8006a82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	e7c5      	b.n	8006a1a <_printf_common+0x62>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4622      	mov	r2, r4
 8006a92:	4639      	mov	r1, r7
 8006a94:	4630      	mov	r0, r6
 8006a96:	47c0      	blx	r8
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0e6      	beq.n	8006a6a <_printf_common+0xb2>
 8006a9c:	f109 0901 	add.w	r9, r9, #1
 8006aa0:	e7d8      	b.n	8006a54 <_printf_common+0x9c>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006aac:	460c      	mov	r4, r1
 8006aae:	7e09      	ldrb	r1, [r1, #24]
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	296e      	cmp	r1, #110	; 0x6e
 8006ab4:	4617      	mov	r7, r2
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4698      	mov	r8, r3
 8006aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006abc:	f000 80b3 	beq.w	8006c26 <_printf_i+0x182>
 8006ac0:	d822      	bhi.n	8006b08 <_printf_i+0x64>
 8006ac2:	2963      	cmp	r1, #99	; 0x63
 8006ac4:	d036      	beq.n	8006b34 <_printf_i+0x90>
 8006ac6:	d80a      	bhi.n	8006ade <_printf_i+0x3a>
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	f000 80b9 	beq.w	8006c40 <_printf_i+0x19c>
 8006ace:	2958      	cmp	r1, #88	; 0x58
 8006ad0:	f000 8083 	beq.w	8006bda <_printf_i+0x136>
 8006ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006adc:	e032      	b.n	8006b44 <_printf_i+0xa0>
 8006ade:	2964      	cmp	r1, #100	; 0x64
 8006ae0:	d001      	beq.n	8006ae6 <_printf_i+0x42>
 8006ae2:	2969      	cmp	r1, #105	; 0x69
 8006ae4:	d1f6      	bne.n	8006ad4 <_printf_i+0x30>
 8006ae6:	6820      	ldr	r0, [r4, #0]
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	0605      	lsls	r5, r0, #24
 8006aec:	f103 0104 	add.w	r1, r3, #4
 8006af0:	d52a      	bpl.n	8006b48 <_printf_i+0xa4>
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	da03      	bge.n	8006b02 <_printf_i+0x5e>
 8006afa:	222d      	movs	r2, #45	; 0x2d
 8006afc:	425b      	negs	r3, r3
 8006afe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b02:	486f      	ldr	r0, [pc, #444]	; (8006cc0 <_printf_i+0x21c>)
 8006b04:	220a      	movs	r2, #10
 8006b06:	e039      	b.n	8006b7c <_printf_i+0xd8>
 8006b08:	2973      	cmp	r1, #115	; 0x73
 8006b0a:	f000 809d 	beq.w	8006c48 <_printf_i+0x1a4>
 8006b0e:	d808      	bhi.n	8006b22 <_printf_i+0x7e>
 8006b10:	296f      	cmp	r1, #111	; 0x6f
 8006b12:	d020      	beq.n	8006b56 <_printf_i+0xb2>
 8006b14:	2970      	cmp	r1, #112	; 0x70
 8006b16:	d1dd      	bne.n	8006ad4 <_printf_i+0x30>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	f043 0320 	orr.w	r3, r3, #32
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	e003      	b.n	8006b2a <_printf_i+0x86>
 8006b22:	2975      	cmp	r1, #117	; 0x75
 8006b24:	d017      	beq.n	8006b56 <_printf_i+0xb2>
 8006b26:	2978      	cmp	r1, #120	; 0x78
 8006b28:	d1d4      	bne.n	8006ad4 <_printf_i+0x30>
 8006b2a:	2378      	movs	r3, #120	; 0x78
 8006b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b30:	4864      	ldr	r0, [pc, #400]	; (8006cc4 <_printf_i+0x220>)
 8006b32:	e055      	b.n	8006be0 <_printf_i+0x13c>
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	1d19      	adds	r1, r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6011      	str	r1, [r2, #0]
 8006b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b44:	2301      	movs	r3, #1
 8006b46:	e08c      	b.n	8006c62 <_printf_i+0x1be>
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6011      	str	r1, [r2, #0]
 8006b4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b50:	bf18      	it	ne
 8006b52:	b21b      	sxthne	r3, r3
 8006b54:	e7cf      	b.n	8006af6 <_printf_i+0x52>
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1d18      	adds	r0, r3, #4
 8006b5c:	6010      	str	r0, [r2, #0]
 8006b5e:	0628      	lsls	r0, r5, #24
 8006b60:	d501      	bpl.n	8006b66 <_printf_i+0xc2>
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	e002      	b.n	8006b6c <_printf_i+0xc8>
 8006b66:	0668      	lsls	r0, r5, #25
 8006b68:	d5fb      	bpl.n	8006b62 <_printf_i+0xbe>
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	4854      	ldr	r0, [pc, #336]	; (8006cc0 <_printf_i+0x21c>)
 8006b6e:	296f      	cmp	r1, #111	; 0x6f
 8006b70:	bf14      	ite	ne
 8006b72:	220a      	movne	r2, #10
 8006b74:	2208      	moveq	r2, #8
 8006b76:	2100      	movs	r1, #0
 8006b78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b7c:	6865      	ldr	r5, [r4, #4]
 8006b7e:	60a5      	str	r5, [r4, #8]
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	f2c0 8095 	blt.w	8006cb0 <_printf_i+0x20c>
 8006b86:	6821      	ldr	r1, [r4, #0]
 8006b88:	f021 0104 	bic.w	r1, r1, #4
 8006b8c:	6021      	str	r1, [r4, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d13d      	bne.n	8006c0e <_printf_i+0x16a>
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	f040 808e 	bne.w	8006cb4 <_printf_i+0x210>
 8006b98:	4665      	mov	r5, ip
 8006b9a:	2a08      	cmp	r2, #8
 8006b9c:	d10b      	bne.n	8006bb6 <_printf_i+0x112>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	07db      	lsls	r3, r3, #31
 8006ba2:	d508      	bpl.n	8006bb6 <_printf_i+0x112>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	6862      	ldr	r2, [r4, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	bfde      	ittt	le
 8006bac:	2330      	movle	r3, #48	; 0x30
 8006bae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bb6:	ebac 0305 	sub.w	r3, ip, r5
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	f8cd 8000 	str.w	r8, [sp]
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	aa03      	add	r2, sp, #12
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7ff fef6 	bl	80069b8 <_printf_common>
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d14d      	bne.n	8006c6c <_printf_i+0x1c8>
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd4:	b005      	add	sp, #20
 8006bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bda:	4839      	ldr	r0, [pc, #228]	; (8006cc0 <_printf_i+0x21c>)
 8006bdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006be0:	6813      	ldr	r3, [r2, #0]
 8006be2:	6821      	ldr	r1, [r4, #0]
 8006be4:	1d1d      	adds	r5, r3, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6015      	str	r5, [r2, #0]
 8006bea:	060a      	lsls	r2, r1, #24
 8006bec:	d50b      	bpl.n	8006c06 <_printf_i+0x162>
 8006bee:	07ca      	lsls	r2, r1, #31
 8006bf0:	bf44      	itt	mi
 8006bf2:	f041 0120 	orrmi.w	r1, r1, #32
 8006bf6:	6021      	strmi	r1, [r4, #0]
 8006bf8:	b91b      	cbnz	r3, 8006c02 <_printf_i+0x15e>
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	f022 0220 	bic.w	r2, r2, #32
 8006c00:	6022      	str	r2, [r4, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	e7b7      	b.n	8006b76 <_printf_i+0xd2>
 8006c06:	064d      	lsls	r5, r1, #25
 8006c08:	bf48      	it	mi
 8006c0a:	b29b      	uxthmi	r3, r3
 8006c0c:	e7ef      	b.n	8006bee <_printf_i+0x14a>
 8006c0e:	4665      	mov	r5, ip
 8006c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c14:	fb02 3311 	mls	r3, r2, r1, r3
 8006c18:	5cc3      	ldrb	r3, [r0, r3]
 8006c1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c1e:	460b      	mov	r3, r1
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d1f5      	bne.n	8006c10 <_printf_i+0x16c>
 8006c24:	e7b9      	b.n	8006b9a <_printf_i+0xf6>
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	6825      	ldr	r5, [r4, #0]
 8006c2a:	6961      	ldr	r1, [r4, #20]
 8006c2c:	1d18      	adds	r0, r3, #4
 8006c2e:	6010      	str	r0, [r2, #0]
 8006c30:	0628      	lsls	r0, r5, #24
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	d501      	bpl.n	8006c3a <_printf_i+0x196>
 8006c36:	6019      	str	r1, [r3, #0]
 8006c38:	e002      	b.n	8006c40 <_printf_i+0x19c>
 8006c3a:	066a      	lsls	r2, r5, #25
 8006c3c:	d5fb      	bpl.n	8006c36 <_printf_i+0x192>
 8006c3e:	8019      	strh	r1, [r3, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	4665      	mov	r5, ip
 8006c46:	e7b9      	b.n	8006bbc <_printf_i+0x118>
 8006c48:	6813      	ldr	r3, [r2, #0]
 8006c4a:	1d19      	adds	r1, r3, #4
 8006c4c:	6011      	str	r1, [r2, #0]
 8006c4e:	681d      	ldr	r5, [r3, #0]
 8006c50:	6862      	ldr	r2, [r4, #4]
 8006c52:	2100      	movs	r1, #0
 8006c54:	4628      	mov	r0, r5
 8006c56:	f7f9 fac3 	bl	80001e0 <memchr>
 8006c5a:	b108      	cbz	r0, 8006c60 <_printf_i+0x1bc>
 8006c5c:	1b40      	subs	r0, r0, r5
 8006c5e:	6060      	str	r0, [r4, #4]
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	2300      	movs	r3, #0
 8006c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6a:	e7a7      	b.n	8006bbc <_printf_i+0x118>
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4639      	mov	r1, r7
 8006c72:	4630      	mov	r0, r6
 8006c74:	47c0      	blx	r8
 8006c76:	3001      	adds	r0, #1
 8006c78:	d0aa      	beq.n	8006bd0 <_printf_i+0x12c>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	079b      	lsls	r3, r3, #30
 8006c7e:	d413      	bmi.n	8006ca8 <_printf_i+0x204>
 8006c80:	68e0      	ldr	r0, [r4, #12]
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	4298      	cmp	r0, r3
 8006c86:	bfb8      	it	lt
 8006c88:	4618      	movlt	r0, r3
 8006c8a:	e7a3      	b.n	8006bd4 <_printf_i+0x130>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	464a      	mov	r2, r9
 8006c90:	4639      	mov	r1, r7
 8006c92:	4630      	mov	r0, r6
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d09a      	beq.n	8006bd0 <_printf_i+0x12c>
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	68e3      	ldr	r3, [r4, #12]
 8006c9e:	9a03      	ldr	r2, [sp, #12]
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	42ab      	cmp	r3, r5
 8006ca4:	dcf2      	bgt.n	8006c8c <_printf_i+0x1e8>
 8006ca6:	e7eb      	b.n	8006c80 <_printf_i+0x1dc>
 8006ca8:	2500      	movs	r5, #0
 8006caa:	f104 0919 	add.w	r9, r4, #25
 8006cae:	e7f5      	b.n	8006c9c <_printf_i+0x1f8>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ac      	bne.n	8006c0e <_printf_i+0x16a>
 8006cb4:	7803      	ldrb	r3, [r0, #0]
 8006cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cbe:	e76c      	b.n	8006b9a <_printf_i+0xf6>
 8006cc0:	0800b8ad 	.word	0x0800b8ad
 8006cc4:	0800b8be 	.word	0x0800b8be

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4c06      	ldr	r4, [pc, #24]	; (8006ce4 <_sbrk_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	f7fb fad4 	bl	8002280 <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000d7c 	.word	0x20000d7c

08006ce8 <strncmp>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	b16a      	cbz	r2, 8006d08 <strncmp+0x20>
 8006cec:	3901      	subs	r1, #1
 8006cee:	1884      	adds	r4, r0, r2
 8006cf0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006cf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d103      	bne.n	8006d04 <strncmp+0x1c>
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	d001      	beq.n	8006d04 <strncmp+0x1c>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f5      	bne.n	8006cf0 <strncmp+0x8>
 8006d04:	1a98      	subs	r0, r3, r2
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	4610      	mov	r0, r2
 8006d0a:	e7fc      	b.n	8006d06 <strncmp+0x1e>

08006d0c <__ascii_wctomb>:
 8006d0c:	b149      	cbz	r1, 8006d22 <__ascii_wctomb+0x16>
 8006d0e:	2aff      	cmp	r2, #255	; 0xff
 8006d10:	bf85      	ittet	hi
 8006d12:	238a      	movhi	r3, #138	; 0x8a
 8006d14:	6003      	strhi	r3, [r0, #0]
 8006d16:	700a      	strbls	r2, [r1, #0]
 8006d18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d1c:	bf98      	it	ls
 8006d1e:	2001      	movls	r0, #1
 8006d20:	4770      	bx	lr
 8006d22:	4608      	mov	r0, r1
 8006d24:	4770      	bx	lr
	...

08006d28 <malloc>:
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <malloc+0xc>)
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f7ff bc97 	b.w	8006660 <_malloc_r>
 8006d32:	bf00      	nop
 8006d34:	2000002c 	.word	0x2000002c

08006d38 <__malloc_lock>:
 8006d38:	4770      	bx	lr

08006d3a <__malloc_unlock>:
 8006d3a:	4770      	bx	lr

08006d3c <_free_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4605      	mov	r5, r0
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d045      	beq.n	8006dd0 <_free_r+0x94>
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f0c      	subs	r4, r1, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfb8      	it	lt
 8006d4e:	18e4      	addlt	r4, r4, r3
 8006d50:	f7ff fff2 	bl	8006d38 <__malloc_lock>
 8006d54:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <_free_r+0x98>)
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	4610      	mov	r0, r2
 8006d5a:	b933      	cbnz	r3, 8006d6a <_free_r+0x2e>
 8006d5c:	6063      	str	r3, [r4, #4]
 8006d5e:	6014      	str	r4, [r2, #0]
 8006d60:	4628      	mov	r0, r5
 8006d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d66:	f7ff bfe8 	b.w	8006d3a <__malloc_unlock>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d90c      	bls.n	8006d88 <_free_r+0x4c>
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	1862      	adds	r2, r4, r1
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bf04      	itt	eq
 8006d76:	681a      	ldreq	r2, [r3, #0]
 8006d78:	685b      	ldreq	r3, [r3, #4]
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	bf04      	itt	eq
 8006d7e:	1852      	addeq	r2, r2, r1
 8006d80:	6022      	streq	r2, [r4, #0]
 8006d82:	6004      	str	r4, [r0, #0]
 8006d84:	e7ec      	b.n	8006d60 <_free_r+0x24>
 8006d86:	4613      	mov	r3, r2
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	b10a      	cbz	r2, 8006d90 <_free_r+0x54>
 8006d8c:	42a2      	cmp	r2, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x4a>
 8006d90:	6819      	ldr	r1, [r3, #0]
 8006d92:	1858      	adds	r0, r3, r1
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x74>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	4401      	add	r1, r0
 8006d9c:	1858      	adds	r0, r3, r1
 8006d9e:	4282      	cmp	r2, r0
 8006da0:	6019      	str	r1, [r3, #0]
 8006da2:	d1dd      	bne.n	8006d60 <_free_r+0x24>
 8006da4:	6810      	ldr	r0, [r2, #0]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	4401      	add	r1, r0
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	e7d7      	b.n	8006d60 <_free_r+0x24>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x7c>
 8006db2:	230c      	movs	r3, #12
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	e7d3      	b.n	8006d60 <_free_r+0x24>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6811      	ldreq	r1, [r2, #0]
 8006dc2:	6852      	ldreq	r2, [r2, #4]
 8006dc4:	6062      	str	r2, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1809      	addeq	r1, r1, r0
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	605c      	str	r4, [r3, #4]
 8006dce:	e7c7      	b.n	8006d60 <_free_r+0x24>
 8006dd0:	bd38      	pop	{r3, r4, r5, pc}
 8006dd2:	bf00      	nop
 8006dd4:	200009c8 	.word	0x200009c8

08006dd8 <_realloc_r>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	4607      	mov	r7, r0
 8006ddc:	4614      	mov	r4, r2
 8006dde:	460e      	mov	r6, r1
 8006de0:	b921      	cbnz	r1, 8006dec <_realloc_r+0x14>
 8006de2:	4611      	mov	r1, r2
 8006de4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006de8:	f7ff bc3a 	b.w	8006660 <_malloc_r>
 8006dec:	b922      	cbnz	r2, 8006df8 <_realloc_r+0x20>
 8006dee:	f7ff ffa5 	bl	8006d3c <_free_r>
 8006df2:	4625      	mov	r5, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df8:	f000 f814 	bl	8006e24 <_malloc_usable_size_r>
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d20f      	bcs.n	8006e20 <_realloc_r+0x48>
 8006e00:	4621      	mov	r1, r4
 8006e02:	4638      	mov	r0, r7
 8006e04:	f7ff fc2c 	bl	8006660 <_malloc_r>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d0f2      	beq.n	8006df4 <_realloc_r+0x1c>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4622      	mov	r2, r4
 8006e12:	f7fd fbf9 	bl	8004608 <memcpy>
 8006e16:	4631      	mov	r1, r6
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f7ff ff8f 	bl	8006d3c <_free_r>
 8006e1e:	e7e9      	b.n	8006df4 <_realloc_r+0x1c>
 8006e20:	4635      	mov	r5, r6
 8006e22:	e7e7      	b.n	8006df4 <_realloc_r+0x1c>

08006e24 <_malloc_usable_size_r>:
 8006e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e28:	1f18      	subs	r0, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfbc      	itt	lt
 8006e2e:	580b      	ldrlt	r3, [r1, r0]
 8006e30:	18c0      	addlt	r0, r0, r3
 8006e32:	4770      	bx	lr

08006e34 <fmod>:
 8006e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e38:	ed2d 8b02 	vpush	{d8}
 8006e3c:	b08b      	sub	sp, #44	; 0x2c
 8006e3e:	ec55 4b10 	vmov	r4, r5, d0
 8006e42:	ec57 6b11 	vmov	r6, r7, d1
 8006e46:	f000 f859 	bl	8006efc <__ieee754_fmod>
 8006e4a:	4b2a      	ldr	r3, [pc, #168]	; (8006ef4 <fmod+0xc0>)
 8006e4c:	eeb0 8a40 	vmov.f32	s16, s0
 8006e50:	eef0 8a60 	vmov.f32	s17, s1
 8006e54:	f993 8000 	ldrsb.w	r8, [r3]
 8006e58:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006e5c:	d030      	beq.n	8006ec0 <fmod+0x8c>
 8006e5e:	4632      	mov	r2, r6
 8006e60:	463b      	mov	r3, r7
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 fe61 	bl	8000b2c <__aeabi_dcmpun>
 8006e6a:	bb48      	cbnz	r0, 8006ec0 <fmod+0x8c>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	462b      	mov	r3, r5
 8006e70:	4620      	mov	r0, r4
 8006e72:	4629      	mov	r1, r5
 8006e74:	f7f9 fe5a 	bl	8000b2c <__aeabi_dcmpun>
 8006e78:	4681      	mov	r9, r0
 8006e7a:	bb08      	cbnz	r0, 8006ec0 <fmod+0x8c>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4630      	mov	r0, r6
 8006e82:	4639      	mov	r1, r7
 8006e84:	f7f9 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e88:	b1d0      	cbz	r0, 8006ec0 <fmod+0x8c>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <fmod+0xc4>)
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e9a:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ea2:	d116      	bne.n	8006ed2 <fmod+0x9e>
 8006ea4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ea8:	4668      	mov	r0, sp
 8006eaa:	f000 f939 	bl	8007120 <matherr>
 8006eae:	b1d8      	cbz	r0, 8006ee8 <fmod+0xb4>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	b11b      	cbz	r3, 8006ebc <fmod+0x88>
 8006eb4:	f7fd fb7e 	bl	80045b4 <__errno>
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	6003      	str	r3, [r0, #0]
 8006ebc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006ec0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ec4:	eef0 0a68 	vmov.f32	s1, s17
 8006ec8:	b00b      	add	sp, #44	; 0x2c
 8006eca:	ecbd 8b02 	vpop	{d8}
 8006ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7f9 fcb7 	bl	800084c <__aeabi_ddiv>
 8006ede:	f1b8 0f02 	cmp.w	r8, #2
 8006ee2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ee6:	d1df      	bne.n	8006ea8 <fmod+0x74>
 8006ee8:	f7fd fb64 	bl	80045b4 <__errno>
 8006eec:	2321      	movs	r3, #33	; 0x21
 8006eee:	6003      	str	r3, [r0, #0]
 8006ef0:	e7de      	b.n	8006eb0 <fmod+0x7c>
 8006ef2:	bf00      	nop
 8006ef4:	200001fc 	.word	0x200001fc
 8006ef8:	0800b9d0 	.word	0x0800b9d0

08006efc <__ieee754_fmod>:
 8006efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f00:	ec53 2b11 	vmov	r2, r3, d1
 8006f04:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006f08:	ea5e 0402 	orrs.w	r4, lr, r2
 8006f0c:	ec51 0b10 	vmov	r0, r1, d0
 8006f10:	461e      	mov	r6, r3
 8006f12:	ee11 5a10 	vmov	r5, s2
 8006f16:	4694      	mov	ip, r2
 8006f18:	d00c      	beq.n	8006f34 <__ieee754_fmod+0x38>
 8006f1a:	4c7a      	ldr	r4, [pc, #488]	; (8007104 <__ieee754_fmod+0x208>)
 8006f1c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006f20:	45a0      	cmp	r8, r4
 8006f22:	4689      	mov	r9, r1
 8006f24:	dc06      	bgt.n	8006f34 <__ieee754_fmod+0x38>
 8006f26:	4254      	negs	r4, r2
 8006f28:	4314      	orrs	r4, r2
 8006f2a:	4f77      	ldr	r7, [pc, #476]	; (8007108 <__ieee754_fmod+0x20c>)
 8006f2c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006f30:	42bc      	cmp	r4, r7
 8006f32:	d909      	bls.n	8006f48 <__ieee754_fmod+0x4c>
 8006f34:	f7f9 fb60 	bl	80005f8 <__aeabi_dmul>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	f7f9 fc86 	bl	800084c <__aeabi_ddiv>
 8006f40:	ec41 0b10 	vmov	d0, r0, r1
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	45f0      	cmp	r8, lr
 8006f4a:	ee10 2a10 	vmov	r2, s0
 8006f4e:	4607      	mov	r7, r0
 8006f50:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006f54:	dc0a      	bgt.n	8006f6c <__ieee754_fmod+0x70>
 8006f56:	dbf3      	blt.n	8006f40 <__ieee754_fmod+0x44>
 8006f58:	42a8      	cmp	r0, r5
 8006f5a:	d3f1      	bcc.n	8006f40 <__ieee754_fmod+0x44>
 8006f5c:	d106      	bne.n	8006f6c <__ieee754_fmod+0x70>
 8006f5e:	496b      	ldr	r1, [pc, #428]	; (800710c <__ieee754_fmod+0x210>)
 8006f60:	0fe4      	lsrs	r4, r4, #31
 8006f62:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006f66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006f6a:	e7e9      	b.n	8006f40 <__ieee754_fmod+0x44>
 8006f6c:	4b68      	ldr	r3, [pc, #416]	; (8007110 <__ieee754_fmod+0x214>)
 8006f6e:	4598      	cmp	r8, r3
 8006f70:	dc49      	bgt.n	8007006 <__ieee754_fmod+0x10a>
 8006f72:	f1b8 0f00 	cmp.w	r8, #0
 8006f76:	d13d      	bne.n	8006ff4 <__ieee754_fmod+0xf8>
 8006f78:	4866      	ldr	r0, [pc, #408]	; (8007114 <__ieee754_fmod+0x218>)
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	dc36      	bgt.n	8006fee <__ieee754_fmod+0xf2>
 8006f80:	459e      	cmp	lr, r3
 8006f82:	dc51      	bgt.n	8007028 <__ieee754_fmod+0x12c>
 8006f84:	f1be 0f00 	cmp.w	lr, #0
 8006f88:	d145      	bne.n	8007016 <__ieee754_fmod+0x11a>
 8006f8a:	4b62      	ldr	r3, [pc, #392]	; (8007114 <__ieee754_fmod+0x218>)
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	dc3e      	bgt.n	8007010 <__ieee754_fmod+0x114>
 8006f92:	4961      	ldr	r1, [pc, #388]	; (8007118 <__ieee754_fmod+0x21c>)
 8006f94:	4288      	cmp	r0, r1
 8006f96:	db4c      	blt.n	8007032 <__ieee754_fmod+0x136>
 8006f98:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006fa0:	4a5d      	ldr	r2, [pc, #372]	; (8007118 <__ieee754_fmod+0x21c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	db59      	blt.n	800705a <__ieee754_fmod+0x15e>
 8006fa6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006faa:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006fae:	1ac0      	subs	r0, r0, r3
 8006fb0:	1b8a      	subs	r2, r1, r6
 8006fb2:	eba7 050c 	sub.w	r5, r7, ip
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d166      	bne.n	8007088 <__ieee754_fmod+0x18c>
 8006fba:	4567      	cmp	r7, ip
 8006fbc:	bf38      	it	cc
 8006fbe:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	bfbc      	itt	lt
 8006fc6:	463d      	movlt	r5, r7
 8006fc8:	460a      	movlt	r2, r1
 8006fca:	ea52 0105 	orrs.w	r1, r2, r5
 8006fce:	d0c6      	beq.n	8006f5e <__ieee754_fmod+0x62>
 8006fd0:	494f      	ldr	r1, [pc, #316]	; (8007110 <__ieee754_fmod+0x214>)
 8006fd2:	428a      	cmp	r2, r1
 8006fd4:	dd6d      	ble.n	80070b2 <__ieee754_fmod+0x1b6>
 8006fd6:	4950      	ldr	r1, [pc, #320]	; (8007118 <__ieee754_fmod+0x21c>)
 8006fd8:	428b      	cmp	r3, r1
 8006fda:	db70      	blt.n	80070be <__ieee754_fmod+0x1c2>
 8006fdc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006fe0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006fe4:	4314      	orrs	r4, r2
 8006fe6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006fea:	4628      	mov	r0, r5
 8006fec:	e7a8      	b.n	8006f40 <__ieee754_fmod+0x44>
 8006fee:	3801      	subs	r0, #1
 8006ff0:	0049      	lsls	r1, r1, #1
 8006ff2:	e7c3      	b.n	8006f7c <__ieee754_fmod+0x80>
 8006ff4:	4848      	ldr	r0, [pc, #288]	; (8007118 <__ieee754_fmod+0x21c>)
 8006ff6:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006ffa:	0049      	lsls	r1, r1, #1
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007002:	dcfa      	bgt.n	8006ffa <__ieee754_fmod+0xfe>
 8007004:	e7bc      	b.n	8006f80 <__ieee754_fmod+0x84>
 8007006:	ea4f 5028 	mov.w	r0, r8, asr #20
 800700a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800700e:	e7b7      	b.n	8006f80 <__ieee754_fmod+0x84>
 8007010:	3b01      	subs	r3, #1
 8007012:	0049      	lsls	r1, r1, #1
 8007014:	e7bb      	b.n	8006f8e <__ieee754_fmod+0x92>
 8007016:	4b40      	ldr	r3, [pc, #256]	; (8007118 <__ieee754_fmod+0x21c>)
 8007018:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800701c:	0049      	lsls	r1, r1, #1
 800701e:	2900      	cmp	r1, #0
 8007020:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007024:	dcfa      	bgt.n	800701c <__ieee754_fmod+0x120>
 8007026:	e7b4      	b.n	8006f92 <__ieee754_fmod+0x96>
 8007028:	ea4f 532e 	mov.w	r3, lr, asr #20
 800702c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007030:	e7af      	b.n	8006f92 <__ieee754_fmod+0x96>
 8007032:	1a0f      	subs	r7, r1, r0
 8007034:	2f1f      	cmp	r7, #31
 8007036:	dc0a      	bgt.n	800704e <__ieee754_fmod+0x152>
 8007038:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800703c:	fa08 f807 	lsl.w	r8, r8, r7
 8007040:	fa22 f101 	lsr.w	r1, r2, r1
 8007044:	ea41 0108 	orr.w	r1, r1, r8
 8007048:	fa02 f707 	lsl.w	r7, r2, r7
 800704c:	e7a8      	b.n	8006fa0 <__ieee754_fmod+0xa4>
 800704e:	4933      	ldr	r1, [pc, #204]	; (800711c <__ieee754_fmod+0x220>)
 8007050:	1a09      	subs	r1, r1, r0
 8007052:	fa02 f101 	lsl.w	r1, r2, r1
 8007056:	2700      	movs	r7, #0
 8007058:	e7a2      	b.n	8006fa0 <__ieee754_fmod+0xa4>
 800705a:	eba2 0c03 	sub.w	ip, r2, r3
 800705e:	f1bc 0f1f 	cmp.w	ip, #31
 8007062:	dc0a      	bgt.n	800707a <__ieee754_fmod+0x17e>
 8007064:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8007068:	fa0e fe0c 	lsl.w	lr, lr, ip
 800706c:	fa25 f606 	lsr.w	r6, r5, r6
 8007070:	ea46 060e 	orr.w	r6, r6, lr
 8007074:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007078:	e799      	b.n	8006fae <__ieee754_fmod+0xb2>
 800707a:	4e28      	ldr	r6, [pc, #160]	; (800711c <__ieee754_fmod+0x220>)
 800707c:	1af6      	subs	r6, r6, r3
 800707e:	fa05 f606 	lsl.w	r6, r5, r6
 8007082:	f04f 0c00 	mov.w	ip, #0
 8007086:	e792      	b.n	8006fae <__ieee754_fmod+0xb2>
 8007088:	4567      	cmp	r7, ip
 800708a:	bf38      	it	cc
 800708c:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8007090:	2a00      	cmp	r2, #0
 8007092:	da05      	bge.n	80070a0 <__ieee754_fmod+0x1a4>
 8007094:	0ffa      	lsrs	r2, r7, #31
 8007096:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800709a:	007f      	lsls	r7, r7, #1
 800709c:	3801      	subs	r0, #1
 800709e:	e787      	b.n	8006fb0 <__ieee754_fmod+0xb4>
 80070a0:	ea52 0105 	orrs.w	r1, r2, r5
 80070a4:	f43f af5b 	beq.w	8006f5e <__ieee754_fmod+0x62>
 80070a8:	0fe9      	lsrs	r1, r5, #31
 80070aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80070ae:	006f      	lsls	r7, r5, #1
 80070b0:	e7f4      	b.n	800709c <__ieee754_fmod+0x1a0>
 80070b2:	0fe8      	lsrs	r0, r5, #31
 80070b4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80070b8:	006d      	lsls	r5, r5, #1
 80070ba:	3b01      	subs	r3, #1
 80070bc:	e789      	b.n	8006fd2 <__ieee754_fmod+0xd6>
 80070be:	1ac9      	subs	r1, r1, r3
 80070c0:	2914      	cmp	r1, #20
 80070c2:	dc0a      	bgt.n	80070da <__ieee754_fmod+0x1de>
 80070c4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	40cd      	lsrs	r5, r1
 80070ce:	432b      	orrs	r3, r5
 80070d0:	410a      	asrs	r2, r1
 80070d2:	ea42 0104 	orr.w	r1, r2, r4
 80070d6:	4618      	mov	r0, r3
 80070d8:	e732      	b.n	8006f40 <__ieee754_fmod+0x44>
 80070da:	291f      	cmp	r1, #31
 80070dc:	dc07      	bgt.n	80070ee <__ieee754_fmod+0x1f2>
 80070de:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80070e2:	40cd      	lsrs	r5, r1
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	432b      	orrs	r3, r5
 80070ea:	4622      	mov	r2, r4
 80070ec:	e7f1      	b.n	80070d2 <__ieee754_fmod+0x1d6>
 80070ee:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80070f2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80070fa:	33e2      	adds	r3, #226	; 0xe2
 80070fc:	fa42 f303 	asr.w	r3, r2, r3
 8007100:	e7f3      	b.n	80070ea <__ieee754_fmod+0x1ee>
 8007102:	bf00      	nop
 8007104:	7fefffff 	.word	0x7fefffff
 8007108:	7ff00000 	.word	0x7ff00000
 800710c:	0800b9d8 	.word	0x0800b9d8
 8007110:	000fffff 	.word	0x000fffff
 8007114:	fffffbed 	.word	0xfffffbed
 8007118:	fffffc02 	.word	0xfffffc02
 800711c:	fffffbe2 	.word	0xfffffbe2

08007120 <matherr>:
 8007120:	2000      	movs	r0, #0
 8007122:	4770      	bx	lr

08007124 <_init>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr

08007130 <_fini>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr
 800713c:	0000      	movs	r0, r0
	...
